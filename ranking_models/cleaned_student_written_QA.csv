prompt,completion
How does a decoder work? How is it different from a multiplexer,"A decoder has n input lines, and (2^n) output lines. Each of the n input lines takes in a signal of 0 or 1, and the resulting binary code determines which of the 2n output signals are forwarded to the next part of the system. The remaining output signals do not send a signal, so a decoder can only send signals from one output at any one time. A mux acts similarly to a decoder except the output lines merge into a single “wire” at the end, so a mux has only one output line."
How does the Branch Opcode work in LC3?,"During Branch, the LC3 looks at the value in the cc register, and depending on whether it is positive, negative, or zero, decides whether to jump to a different branch of the code, by changing the program counter value."
What is a Multiplexer?,A multiplexer acts a selector of multiple different inputs
What is de Morgan's Law?,"De Morgan’s Law is a way to find out an alternative representation of a given boolean logic. Given two variables A and B, the two main forms to remember are: \n(A + B)' = A' B' (The NOT of A OR B is equal to NOT A AND NOT B)\n(AB)' = A' + B' (The NOT of A AND B is equal to NOT A OR NOT B)"
What are don’t care values?,"'Don’t care values' are used when the output of a boolean function can be left unspecified. Using 'don’t care values' allows you to choose from among several possible logic functions, all of which produce the desired results (as well as some combination of 0s and 1s in place of the 'don’t care values'). Each input combination marked as 'don't care' doubles the number of functions that can be chosen to implement the design, often enabling the logic needed for implementation to be simpler."
What is a Multiplexer?,A multiplexer acts a selector of multiple different inputs
What is a Decoder?,A decoder translates the coded n input bits to a set of 2^n output bits that represent the message's original meaning
What is a Bit-Sliced Design,"A bit-sliced design is a type of hardware implementation in which multiple copies of a set of combinational logic elements are used to process multiple input bits. This type of design is often used for components such as adders, multipliers, and other arithmetic logic units."
What is the purpose of the clock signal in a D-latch?,The clock signal enables the D-latch and is thus used to copy the input value and store that input value in the D-latch when the clock signal is high.
What are the TRAP Vectors in LC3?,"TRAP vectors call TRAP subroutines that are in place for specific purposes. There are 5 trap vectors: IN, GETC, OUT, PUT"
What are the NZP bits in the LC-3 assembly language?,"NZP stands for Negative, Zero, Positive, and they are used to indicate to the LC-3 assembler whether the result of an operation is negative, zero, or positive."
How do I clear a register in the LC-3 assembly language?,"You AND the register with the #0, which clears any previous content in the register."
How do I indicate the end of the program in an LC-3 assembly file?,The .END directive indicates to the LC-3 assembler the end of the assembly file.
How do I set the memory origination location in an LC-3 assembly file?,The .ORIG directive with the memory location that you want to start at indicates to the assembler the memory location where the program should originate at.
When would I use 2’s complement in an LC-3 program?,You would use 2’s complement when you need to subtract one number from another since LC-3 does not have a SUBTRACT instruction.
What is a 2’s complement integer used for?,We use a 2’s complement integer to represent positive and negative integers that we wish to perform arithmetic on.
What is a sign extension and what is it used for?,"A sign extension is used when we need to add representations of different lengths, we need to represent them with the same number of bits. A sign extension extends the sign bit of a number by as many bit positions to the left as needed."
What is an ALU used for?,"An ALU stands for Arithmetic Logic Unit, it performs arithmetic operations like adding and subtracting on bits."
What is the AND function used for?,"The AND function performs a logical AND operation on 2 source operands. The logical AND operation says that if and only if both operands are 1, then the output of the AND operation will be 1."
What is the OR function used for?,"The OR function performs a logical OR operation on 2 source operands. The logical OR operation says that if one source operand out of the 2 is 1, then the output of the OR operation will be 1. Additionally, if both source operands are 1, then the output of the OR operation will be 1."
What is the NOT function used for?,The NOT function inverts the source operand to get the result of the operation. It only requires one source operand for the function.
What is the Exclusive-OR (XOR) function used for?,"The XOR function performs a logical XOR operation on 2 source operands. The logical XOR operation says that if and only if one of the 2 source operands is 1, then the output of the XOR operation will be 1. If both the operands are 1 or 0, then the result of the XOR operation will be 0."
What are DeMorgan’s Laws?,"It is a crucial relationship between AND and OR functions. The basis of DeMorgan’s Laws says that we complement (perform the NOT operation) on 2 inputs A and B, and then perform the AND operation on the complement of the two inputs, and then take the complement of the result of the operation."
How to convert a 2 level AND-OR circuit to a NAND-NAND circuit,"According to De Morgan’s theorem, a NAND Gate is equivalent to an OR gate with inverted inputs. Thus, by inverting the inputs of the AND Gates, we get the first level of logic comprising of NAND Gates and swapping the OR gate with a NAND gate, we get the second level of logic"
"How can we convert bit-sliced design to a serialized design, and why do we do so?","Bit Sliced Digital logic works by creating n copies of the bit slice and replicating them to create logic for n bits instead of just one. This works fine when n is a small number. However, as n gets larger, it becomes prohibitively expensive to implement that many bit slices. Thus, we use a serialized approach where we take a singular bit slice and use Flip Flops to store intermediate bits and feed these bits back into the bit slice. The drawback in using serialised design is that it is more time consuming. Thus the trade off occurs in Logic space(for bit sliced design) and Logic time(for serialized design)"
What is Addressability of memory?,"Answer Memory in modern systems is used to store variable and instructions(something more relevant when students learn LC3). These systems have properties based on the number of bits in the system. Addressability is the way computers identify different memory locations and is determined by the size of the system (also known as the number of bits in the system: 16 in LC3, 64 in x86 etc). The max available address space is calculated by taking 2^n, where n is the size of the system."
What are the components of the Von Neumann architecture and how do they interlink,"The Von Neumann model is the idea that a computer can be designed with these key components:\n1. Memory: The computer has a single, unified memory system that can store both data and instructions. This memory is divided into discrete cells, each of which has a unique address.\n2. Processing Unit (CPU): The CPU is responsible for executing instructions stored in memory. It consists of an arithmetic and logic unit (ALU) that performs mathematical and logical operations, and a temporary registers that enable these operations\n3. Control unit: The control unit is responsible for determining what needs to be done by the processing unit. It has 2 components: The Program Counter(Keeps track of the current instruction) and the Instruction Register(Tells the rest of the system what needs to be done for each instruction)\n4. Input/Output (I/O): The computer has devices for input and output, such as a keyboard, mouse, and display.\n5. Bus: The bus is a system of wires or channels that connects the CPU, memory, and I/O devices and allows them to communicate with each other.\nIn the Von Neumann model, instructions and data are stored in the same memory space, and they are accessed using their unique addresses. The CPU retrieves instructions from memory, executes them using the ALU and control unit, and then stores the results back in memory. This cycle of fetch-decode-execute is repeated for each instruction in the program. \nThe Von Neumann model is relevant because it allows for the creation of powerful, efficient, and flexible computer systems."
How do we create Loops and Conditionals using the Von Neumann architecture,"One of the Instructions that any computing system has is the Branch instruction that enables the Program Counter to jump to different locations. Thus, we can create conditions such as when Register R0 is positive, loop back to the start of the instructions in memory. Doing so, we are able to create a loop. By branching to specific locations depending on various values, we are able to create a conditional."
What is the TRAP Instruction and why is it useful?,"The TRAP instruction, also known as the HALT instruction, is a type of instruction in computer programming that is used to halt or stop the execution of a program. When a TRAP instruction is encountered in a program, the computer immediately stops executing instructions and enters a special state known as a ""trap"" or ""interrupt"" state.\nIn this state, execution stops and the program and transfers control to a predefined location in memory where a special routine or interrupt handler is located."
What integers can be used as immediate values in LC3?,"This depends on the number of bits allocated for the immediate value in the opcode. For example, the ADD opcode allocates 5 bits for the immediate value. As the LC3 is in two’s complement representation, the range of integers that can be used are from -2^4 to (2^4)-1. Or, in other words from -16 to 15."
What is the LC3 instruction cycle?,"The cycle consists of FETCH,DECODE,EVALUATE ADDRESS,OPERAND FETCH,EXECUTE and STORE RESULT. Of these, only fetch and decode are mandatory for every cycle. The remaining steps are optional, depending on the opcode of the instruction. For example, ADD and NOT instructions will not have an Evaluate Address step whereas STI and LDI will have an evaluate address step, as the latter steps require accessing specific memory addresses."
What do we need to know about TRAP vectors/instructions for ECE120?,"A TRAP instruction is a service call to the operating system, and performs an automated function for us. In ECE120, there are a few main trap vectors that are used - \nTRAP #20 - GETC (gets a single character from the keyboard and stores in R0)\nTRAP #21 - OUT (outputs a value to the screen, that is stored in R0)\nTRAP #22 - PUTS (outputs a string to the screen)\nTRAP #23 - IN (reads in a character from the keyboard, saves it to R0, and outputs the character to the screen)\nTRAP #25 - HALT (ends the execution of the program)"
What are the Gate Signals in the LC3 Datapath and what are the potential issues we can face if multiple gate signals are set to 1.,"The Gate Signals enable various data to be sent from one set of Von Neumann Components to another (ie Control unit to Processing Unit). These data signals are sent over the BUS of the LC3(A set of wires that connect the different units). Setting one Gate signal to high, allows that data to be transmitted on the bus. The GatePC sends the current value of the PC to the other parts of the LC3. If multiple Gate signals are set to high, we would be sending sets of different values on which will corrupt the system by causing floating values"
"What do the LD.REG,LD.MDR,LD.MAR signals mean in the LC3 datapath?","These signals control whether the Register/MAR/MDR components are “turned on” and send an output to other parts of the datapath. If we don’t want to use a particular component for a process in LC3, the LD signal for that component should be set to 0 throughout the process, so as to avoid interrupting signals from other components."
What tools can we use to debug LC3 programs? Assuming the program compiles but does not function as expected.,"Using the LC3 simulator, we can step through our program line by line and observe how our register and memory values change each step, and compare that with how the program is expected to function. To speed up the process, we can set up breakpoints to skip through the parts of the program that we know are working fine. Another debugging tool is to print the values to screen by loading it into R0 and using the OUT command."
How do we systematically decompose a problem and program it in LC3?,"As with other assembly and programming languages, the problem can be typically broken down into three types of “blocks” - sequential, conditional and iterative. \nSequential refers to steps that must take place one after another - these steps should be programmed in LC3 in the same chronological order.\nConditional refers to steps that take place only if a given condition is true - this can be programmed using the BR opcode and labels, in order to jump to or skip certain parts of the program. \nIterative refers to steps that must be repeated for a certain number of times, similar to a for loop in C. Iterative steps are represented in LC3 through the BR opcode as well, and a register that is used as a counter value and is decremented by 1 during each iteration of the loop."
What are opcodes and how are they used in assembly language?,"The Opcode is a symbolic name for the opcode of the corresponding LC-3 instruction. The idea is that it is easier to remember an operation by the symbolic name ADD, AND, or LDR than by the four-bit quantity 0001, 0101, or 0110\nExamples are as follows:\nADD R1, R1, #1\nAND R1, R0, R0\nNOT R0, R0\nLDR R3, R1, #0"
What are labels and how are they used in assembly language?,"Labels are symbolic names (alphanumeric) that are used to identify memory locations that are referred to explicitly in the program. The use of labels allows for an easy way to jump between different lines of code in the program\nThe syntax for creating a label is as follows:\nPOSITIVELOOP – This is the label\nADD R1, R1, #1\n\n<Additional code may go here>\n\nBRnzp POSITIVELOOP – This makes the program jump back to the \nline of code just under the label that was originally given"
What is the PCMUX in the Data Path?,"The PCMUX consists of two control signals (2 bits) and specifies which input to the MUX is required during a given clock cycle, depending on the instruction."
"In the microsequencer of the LC-3, what do the bits IR[15:12] specify?",The bits IR[15:12] specifies the opcode of the current LC-3 instruction that is being processed.
What is the difference between Address space and Addressability?,"Addressability is the number of bits stored in each memory location, also known as word space. LC3 stores 16 bits in each memory location. Modern computers typically have 64. Address space is the number of unique memory locations that the computer has, and is usually in the form 2n, where n is the number of bits needed to describe the memory location. The LC3 has an address space of 216, meaning each memory location has a “name” that is 16 bits long. So the LC3 memory is 216x16"
What is the Instruction Cycle in LC3?,"The steps are Fetch, Decode, Evaluate Address, Fetch Operands, Execute and Store Result. Fetch and Decode are necessary for every cycle, while the remaining states are optional, depending on the opcode specified."
What is the purpose of a register?,"They are used as temporary storage of values such that they can be quickly accessed, as accessing a value from memory can be time consuming"
What are the different steps in the LC3 assembly process?,"The computer does a “first pass” through the program, where it identifies the memory address of every label in the program, and then builds a symbol table. The computer then does a “second pass” through the program, where it translates the assembly language instructions into machine code."
How can I use a 4:1 mux to represent a 3-input boolean function?,"First draw a truth table with variables A,B,C and output P. Then group together the conditions that have the same A and B values, such that there are four different groups with 2 conditions in each group. Then determine an expression for P in terms of C for each group,  and those 4 expressions will be the 4 inputs to the MUX. The two select inputs will be A and B."
What are the constraints in choosing state numbers for an LC3 FSM?,"When a state J requires waiting for memory access, that state must have 1 as its second bit from the right. Once the memory is ready, the next state that the LC3 moves to must have state number J+2."
What are the three fetch states?,MAR <− PC\nPC <− PC + 1\nMDR <−M[MAR]\nIR <−MDR
Why are some numbers not accurately represented in IEEE-754 floating point representation?,"Some decimal values do not have an exact/finite binary representation, similar to ⅓ in decimal. Hence some precision is lost by representing the value in 754-floating point."
Why can’t I add large numbers (greater than #15) using the add operation in LC3?,"The LC3 ADD opcode only leaves 5 bits for immediate values. Considering that numbers are represented in two’s complement in LC3, this means that the largest immediate value that can be used in the ADD operation is 25-1-1, which is 15. To add numbers larger than that, one would have to store it into another register and use the LDR command."
What is the difference between a Mealy and Moore Machine?,"The current output of a Moore machine is based solely on its current state, whereas the output of a Mealy machine depends on both its current state and the external inputs."
What is de Morgan’s Law?,"De Morgan’s Law is a way to find out an alternative representation of a given boolean logic. Given two variables A and B, the two main forms to remember are:\n(A + B)’ = A’ B’ (The NOT of A OR B is equal to NOT A AND NOT B)\n(AB) ‘ = A’ + B’ (The NOT of A AND B is equal to NOT A OR NOT B)"
How do I check for overflow in a 2’s complement operation?,"Overflow can be indicated in a 2’s complement if the result has the wrong sign, such as if 2 positive numbers sum to a negative number or if 2 negative numbers sum to positive numbers."
How can I use the MSB (Most Significant Bit) in an operation to check for overflow?,"If the carry in bit matches the carry out bit, if not, then the overflow has occurred."
How can I make an AND gate out of an OR gate and inverters?,"Use one inverter on each input of the OR gate, and use a third inverter on the output of the OR gate."
What is the order of precedence in C programming?,"PEMDAS (Parenthesis, Exponents, Multiplication, Division, Addition, Subtraction)"
Why would I use NAND or NOR gates instead of regular/AOI logic gates?,A universal gate such as a NAND or NOR is easier to fabricate onto a chip and they can be used to create normal/AOI logic gates.
What is the difference between signed and unsigned representations?,"In a signed representation, the leftmost bit is used to indicate the sign of the number. In an unsigned representation, all bits are used to represent the magnitude of the number, with no bit reserved for indicating the sign. You cannot use unsigned representation to represent negative numbers."
Why would I use fixed-point representation?,"Fixed-point operations can be implemented with integer arithmetic, which is typically faster than floating-point arithmetic."
What is the difference between clock synchronous and clock asynchronous designs?,"Clock synchronous designs use a system clock to control the timing of all circuit operations. The circuit elements are updated on either the rising or falling edge of the clock signal. Clock asynchronous designs do not rely on a system clock to synchronize the timing of circuits, the circuit elements are designed to operate independently of the clock, using their own timing control."
Why are Hamming codes used?,"Hamming codes are used to detect and correct errors in transmitting data. They are a type of error-correcting code. Hamming codes add parity bits to the original data, the parity bits are used to detect and correct any errors."
What is Hamming distance?,Hamming distance is a measure of the difference between two binary strings of equal length. It is the number of positions at which the corresponding symbols in two binary strings are different.
What is a tri-state buffer used for?,"A tri-state buffer is a digital logic gate that is used to control the flow of data in a digital system. It is effectively a buffer that has a third, enable input, which lets the output be put into a “floating” state. They are commonly used to allow multiple devices to share the same bus without cross-interference."
What would I use a register for?,"A register is a circuit that is used to both store and manipulate data. It is simply a group of flip-flops that are connected together to form a single, larger unit. They are used to temporarily store data that is being actively processed."
What would I use a latch for?,"A latch is used to store and manipulate data similar to a register, but a latch can only store a single bit of information at a time."
How is a clock abstraction related to a clock signal?,"A clock abstraction ignores many details from the actual clock signal, instead, a clock abstraction represents the clock with a simple waveform, this makes it much easier to design and analyze digital circuits."
Why would I use an iterative construct in C?,"An iterative construct would be used in C when you want a section of code to be executed repeatedly, such as when a certain condition is true or false."
Why would I use a constructive construct in C?,A conditional construct would be used in C when you want a section of code to make decisions about what to execute based on certain conditions specified by you in the code.
What is an operator and when would you use it in C?,"An operator is a symbol that is used to perform a certain operation (mathematical or otherwise) on a set of operands. There are many types of operators in C, such as arithmetic, relational, logical, bitwise, assignment, etc. They are each used for a different purpose."
What is a function used for in C?,A function is a block of code that does a certain task. Writing code into a function can make it easier to be called from different parts of the program and can make the program quicker and easier to write.
