{
    "0": [
        "memory chips combined provide larger wider memories using multiple chips example, two 2-bit memories used implement 4-bit memory one address bits used drive decoder determines two chips active (cs=1) decoder enabled chip select signal larger memory, neither chip enabled external cs low, desired",
        "one way combine memory chips use multiple chips implement larger memory done using one address bit drive decoder determines two chips active another way combine memory chips use multiple chips implement wider memory done routing external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way combine memory chips use create larger memory done using one address bit drive decoder determines two chips active address bits, well external data inputs write enable signal, delivered memories external data outputs also connected memories another way combine memory chips use create wider memory case, chips either active inactive time, external address, write enable, chip select inputs routed chips however, data inputs outputs separate, chip handling different part data",
        "sram cells combined bit slice sharing bit lines analog read write logic decoder sets one cell's select line high enable read write operation cell chip select input cs drives enable input decoder, none memory cells active chip select low (cs=0), exactly one memory cells active chip select high (cs=1)",
        "the decoder memory chip responsible translating memory address correct location memory chip necessary ensure correct data read written correct location memory chip",
        "one way construct larger memory use multiple chips one address bits drive decoder determines two chips active decoder enabled chip select signal larger memory way, neither chip enabled external cs low",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "a decoder logic circuit converts binary code corresponding decimal code decoders used variety applications, including data storage transmission, error detection correction, address decoding",
        "an encoder helps implement fsm design translating user's input signal used fsm encoder produces signal p indicating user trying make purchase, two-bit signal indicating item user wants decoder takes signal produces individual item release signals r_1, r_2, r_3",
        "a decoder used fsm design generate release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "the vending machine fsm designed control release items vending machine based user's purchase request fsm uses priority encoder determine item user requested, decoder generate individual item release signals",
        "a decoder type logic circuit takes input signal produces one output possible value signal decoder similar multiplexer number inputs outputs however, decoder one input signal, multiplexer multiple input signals",
        "the main difference mux decoder mux multiple inputs one output, decoder one input multiple outputs mux used select one several input signals send output, decoder used interpret input signal produce several output signals",
        "a decoder logic circuit converts binary code set signals used operate device decoder takes input signal, typically one coded binary number, produces one output possible value signal decoder enabled (en=1), and gates produces one minterm input signal s decoder enabled (en=0), decoder produces 0 bits",
        "a decoder device converts coded signals usable information decoders used variety applications, error detection correction",
        "a decoder logic circuit converts coded inputs coded outputs, usually one output code input code decoders used variety applications, including data storage transmission, error detection correction, data compression",
        "a decoder similar mux allows one digital signal select several others forwarded output decoder one input multiple outputs, mux multiple inputs one output decoder thought special case mux",
        "a decoder logic device converts binary information form one code another, usually natural binary code multiplexer device selects one several analog digital input signals forwards selected input single output line",
        "a decoder logic circuit converts signals one form another binary form, decoder used convert binary number decimal number",
        "a mux logic block allows us use one digital signal select several others forwarded output decoder logic block converts binary code set signals",
        "the decoder generates release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "a decoder used context simplify expression logic function using decoder, function expressed two-level logic function, easier understand manipulate",
        "the vending machine releases item using decoder generate three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the input fsm reset button r, four buttons b_f, b_x, b_g, b_c fsm produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs",
        "a multiplexer digital logic block allows one digital signal select several others forwarded output simplest form multiplexer 2-to-1 multiplexer, two inputs left one top top input allows us choose left inputs forwarded output",
        "a multiplexer device allows multiple signals routed onto single channel done selecting one several input signals connecting output multiplexers used variety applications, telecommunications computer networking",
        "the main benefit using tri-state buffer allows logical disconnection buffer output means multiple memories share output line without need additional multiplexers",
        "the benefit using tri-state buffer allows logical disconnection tri-state buffer output means output shared one memory without need additional multiplexers useful creating larger memories combining multiple chips",
        "tri-state buffers used construct wider memories connecting data inputs outputs multiple memories together allows output line shared one memory without need additional multiplexers",
        "a tri-state buffer digital circuit used either connect disconnect signal circuit buffer three states: high, low, high impedance high impedance state effectively disconnects signal circuit allows multiple memories share output line without need additional multiplexers"
    ],
    "1": [
        "The Branch Opcode is in LC3",
        "The branch opcode works in the lc3",
        "The lc3 contains the branch opcode",
        "The branch opcode works by the lc3",
        "The branch opcode is in the lc3"
    ],
    "2": [
        "a multiplexer digital logic block allows one digital signal select several others forwarded output simplest form multiplexer 2-to-1 multiplexer, two inputs left one top top input allows us choose left inputs forwarded output",
        "a multiplexer device allows multiple signals routed onto single channel done selecting one several input signals connecting output multiplexers used variety applications, telecommunications computer networking",
        "the main benefit using tri-state buffer allows logical disconnection buffer output means multiple memories share output line without need additional multiplexers",
        "the benefit using tri-state buffer allows logical disconnection tri-state buffer output means output shared one memory without need additional multiplexers useful creating larger memories combining multiple chips",
        "tri-state buffers used construct wider memories connecting data inputs outputs multiple memories together allows output line shared one memory without need additional multiplexers",
        "a tri-state buffer digital circuit used either connect disconnect signal circuit buffer three states: high, low, high impedance high impedance state effectively disconnects signal circuit allows multiple memories share output line without need additional multiplexers",
        "a decoder type logic circuit takes input signal produces one output possible value signal decoder similar multiplexer number inputs outputs however, decoder one input signal, multiplexer multiple input signals",
        "a decoder logic device converts binary information form one code another, usually natural binary code multiplexer device selects one several analog digital input signals forwards selected input single output line"
    ],
    "3": [
        "the first examples passage two-level logic, demorgan's law, sop form two-level logic popular way expressing logic functions, demorgan's law way simplify expressions sop form way representing logic function",
        "one way reduce design complexity make use common algebraic terms sub-expressions help simplify design make easier understand another way reduce complexity use demorgan's laws simplify expression help reduce number gates needed make design efficient",
        "the next-state logic equations functions describe relationship current state system next state system functions represented either sop pos form demorgan's law used simplify functions replacing or gates nand gates, and gates nor gates",
        "the similarity equations s_1^+s_0^+ equations {2-to-1} mux used represent logic function two-level logic popular way expressing logic functions simple map expression cmos gates using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate",
        "passage - compact approaches comparing functions, solutions subject later class (such ece 462) {two-level logic} { two-level logic} popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams begin one demorgan's laws, illustrate algebraically graphically: c = b+a = {file=part2/figs/demorgan-nandeps,width=095in} let's say function expressed sop form, z=abc+de+fghj diagram left shows function constructed three and gates or gate using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate invert point along wire, slide bubble wire output first column",
        "what significance demorgan's law demorgan's law popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams"
    ],
    "4": [
        "the second step design process think carefully metrics possible interest set metrics feel complete, next step get rid many can",
        "the choice state representation affects implementation fsm terms number gates inverters required, well delay overall design serial comparator design based 2-bit slice variant, example, requires 24 gates 10 inverters, much larger earlier serial design terms gate delays, however, new design identical, meaning comparisons finished half time realistic area timing metrics show slightly difference two designs differences dominate results design carefully considered",
        "there disadvantages using fsm first, fsm designed carefully, hard understand debug second, fsm use resources simpler design, state machine finally, fsm difficult change extend simpler design",
        "the flow chart represents steps taken designing new product first step think carefully metrics possible interest second step get rid many metrics possible third step identify metrics practical impact current technology fourth step set threshold values metrics simplify reasoning them fifth step eliminate redundant metrics sixth step calculate linear sums reduce count metrics seventh step make use notion pareto optimality",
        "the third step design process identify metrics practical impact current technology, set threshold values metrics simplify reasoning them, eliminate redundant metrics, calculate linear sums reduce count metrics, and, finally, make use notion pareto optimality",
        "the third step design process evaluate design using multiple metrics includes identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "the implementation gray code counter developed first filling k-maps next-state values, deriving algebraic expressions next-state logic used develop implementation",
        "a gray code counter used applications digital value must changed incrementally least number steps gray code counter changes one bit time, minimizes number digital values must changed",
        "a gray code counter designed first creating transition diagram shows states outputs counter next, next-state logic developed creating k-maps next-state values deriving algebraic expressions finally, next-state logic implemented diagram",
        "the fully-specified transition diagram three-bit gray code counter follows: the states counter form loop, counter moving one state next cycle each state diagram marked internal state value s_2s_1s_0 (before \" / \") output z_2z_1z_0 (after \" / \") based transition diagram, next-state values s_2^+, s_1^+, s_0^+ filled shown",
        "the next-state values three-bit gray code counter follows: s_2^+=0, s_1^+=s_0, s_0^+={{s_1}}",
        "the vertical lines carrying current state values inverses back next state logic inputs ordered left right (on left side figure) {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2",
        "the purpose vertical lines carrying current state values inverses back next state logic inputs ensure state fsm always consistent necessary safety reasons, fsm must always ensure lights one roads red times",
        "the next-state values s_2, s_1, s_0 given table right states act like counter, examining connections, derive equations next state draw transition diagram six states loop defined next-state logic, two remaining states converging loop single cycle",
        "yes, choose use counter's internal state directly output values colors need produce outputs unique bit patterns using counter's internal state directly output values, simplify design",
        "a karnaugh map graphical representation boolean function helps simplify function map consists grid squares, corresponds possible combination input values map used find groups product terms implicants function",
        "the next-state values s_2, s_1, s_0 1",
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "one important reason consider possible input conditions possible states help ensure design correct example, design ever receives input values within certain range, possible design actually correct input values considering possible input conditions help catch errors like this another reason consider possible input conditions help optimize design example, design ever receives input values within certain range, possible simplify design make efficient considering possible input conditions help identify opportunities optimization",
        "the value s_2 counter count state hold=0 undefined because, passage states, overflow occurs either operands negative operands positive operands negative, resulting sum equal c however, operands positive, resulting sum less c thus, impossible determine value s_2 without knowing values operands",
        "one builds memories (static rams) using logic connecting dual-inverter loop opposing bit lines transistors controlled select line select high, transistors connect inverter loop bit lines writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "data elements computer memory stored either static random access memory (sram) dynamic random access memory (dram) sram uses active logic form two-inverter loop maintain stored values, dram uses charged capacitor store bit",
        "sram cells store data using dual-inverter loop writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "the device uses sensors generate clock signal alternating 0 1 regular period clock 0, one set latches holds bit values fixed, combinational logic uses latches inputs produce bits copied second set latches clock 1, second set latches stops storing data inputs retains bit values order drive combinational logic, results copied third set latches",
        "the output depend input function and evaluate 1 input values 1 input value 0, function evaluate 0",
        "the outputs needed observe state check output logic values state register timer outputs used determine duration state order states occur",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "what ideas used reduce number metrics some ideas used reduce number metrics include: identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "1 three ranges possible measurement values given metric the three ranges possible measurement values given metric values equivalently useful, ordered interesting respect one another, impossible use practice",
        "what three ranges given metric the first range measurement values equivalently useful second range possible values ordered interesting respect one another values third range impossible use practice",
        "the and gate left used determine input values 1 input values 1, output and gate 1 input values 0, output and gate 0"
    ],
    "5": [
        "a multiplexer digital logic block allows one digital signal select several others forwarded output simplest form multiplexer 2-to-1 multiplexer, two inputs left one top top input allows us choose left inputs forwarded output",
        "a multiplexer device allows multiple signals routed onto single channel done selecting one several input signals connecting output multiplexers used variety applications, telecommunications computer networking",
        "the main benefit using tri-state buffer allows logical disconnection buffer output means multiple memories share output line without need additional multiplexers",
        "the benefit using tri-state buffer allows logical disconnection tri-state buffer output means output shared one memory without need additional multiplexers useful creating larger memories combining multiple chips",
        "tri-state buffers used construct wider memories connecting data inputs outputs multiple memories together allows output line shared one memory without need additional multiplexers",
        "a tri-state buffer digital circuit used either connect disconnect signal circuit buffer three states: high, low, high impedance high impedance state effectively disconnects signal circuit allows multiple memories share output line without need additional multiplexers",
        "a decoder type logic circuit takes input signal produces one output possible value signal decoder similar multiplexer number inputs outputs however, decoder one input signal, multiplexer multiple input signals",
        "a decoder logic device converts binary information form one code another, usually natural binary code multiplexer device selects one several analog digital input signals forwards selected input single output line"
    ],
    "6": [
        "memory chips combined provide larger wider memories using multiple chips example, two 2-bit memories used implement 4-bit memory one address bits used drive decoder determines two chips active (cs=1) decoder enabled chip select signal larger memory, neither chip enabled external cs low, desired",
        "one way combine memory chips use multiple chips implement larger memory done using one address bit drive decoder determines two chips active another way combine memory chips use multiple chips implement wider memory done routing external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way combine memory chips use create larger memory done using one address bit drive decoder determines two chips active address bits, well external data inputs write enable signal, delivered memories external data outputs also connected memories another way combine memory chips use create wider memory case, chips either active inactive time, external address, write enable, chip select inputs routed chips however, data inputs outputs separate, chip handling different part data",
        "sram cells combined bit slice sharing bit lines analog read write logic decoder sets one cell's select line high enable read write operation cell chip select input cs drives enable input decoder, none memory cells active chip select low (cs=0), exactly one memory cells active chip select high (cs=1)",
        "the decoder memory chip responsible translating memory address correct location memory chip necessary ensure correct data read written correct location memory chip",
        "one way construct larger memory use multiple chips one address bits drive decoder determines two chips active decoder enabled chip select signal larger memory way, neither chip enabled external cs low",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "a decoder logic circuit converts binary code corresponding decimal code decoders used variety applications, including data storage transmission, error detection correction, address decoding",
        "an encoder helps implement fsm design translating user's input signal used fsm encoder produces signal p indicating user trying make purchase, two-bit signal indicating item user wants decoder takes signal produces individual item release signals r_1, r_2, r_3",
        "a decoder used fsm design generate release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "the vending machine fsm designed control release items vending machine based user's purchase request fsm uses priority encoder determine item user requested, decoder generate individual item release signals",
        "a decoder type logic circuit takes input signal produces one output possible value signal decoder similar multiplexer number inputs outputs however, decoder one input signal, multiplexer multiple input signals",
        "the main difference mux decoder mux multiple inputs one output, decoder one input multiple outputs mux used select one several input signals send output, decoder used interpret input signal produce several output signals",
        "a decoder logic circuit converts binary code set signals used operate device decoder takes input signal, typically one coded binary number, produces one output possible value signal decoder enabled (en=1), and gates produces one minterm input signal s decoder enabled (en=0), decoder produces 0 bits",
        "a decoder device converts coded signals usable information decoders used variety applications, error detection correction",
        "a decoder logic circuit converts coded inputs coded outputs, usually one output code input code decoders used variety applications, including data storage transmission, error detection correction, data compression",
        "a decoder similar mux allows one digital signal select several others forwarded output decoder one input multiple outputs, mux multiple inputs one output decoder thought special case mux",
        "a decoder logic device converts binary information form one code another, usually natural binary code multiplexer device selects one several analog digital input signals forwards selected input single output line",
        "a decoder logic circuit converts signals one form another binary form, decoder used convert binary number decimal number",
        "a mux logic block allows us use one digital signal select several others forwarded output decoder logic block converts binary code set signals",
        "the decoder generates release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "a decoder used context simplify expression logic function using decoder, function expressed two-level logic function, easier understand manipulate",
        "the vending machine releases item using decoder generate three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the input fsm reset button r, four buttons b_f, b_x, b_g, b_c fsm produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs"
    ],
    "7": [
        "the first approach use flip-flop design add single bit pass necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "the passage discusses design serial comparator using bit-sliced approach approach leads design 24 gates 10 inverters, much larger earlier serial design however, new design identical terms gate delays, meaning comparison finished half time",
        "abstraction used build three-bit gray code counter two-bit design using copies bit-sliced adder circuit approach less efficient designing circuit specifically three-bit gray code counter, simpler",
        "this particular example tricky requires reader understand concept bit-sliced addition order understand passage furthermore, passage provide clear explanation bit-sliced adder circuit works, making difficult reader follow along",
        "mapping bits gates means design circuit performs operation single bit passes necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "the design process digital fsm includes six steps: developing abstract model, specifying i/o behavior, completing specification, choosing state representation, calculating logic expressions, implementing flip-flops gates",
        "the design process digital fsm typically consists six steps: (1) developing abstract model, (2) specifying i/o behavior, (3) completing specification, (4) choosing state representation, (5) calculating logic expressions, (6) implementing flip-flops gates",
        "the design process involves manipulation logic expressions order optimize specific metrics, cost, power, performance today, manipulation performed almost entirely computers, human engineers supplying logic functions interest imposing constraints process",
        "from passage, seems digital fsm designed abstract model first identifying finite set states, set possible inputs, set possible outputs, set transition rules then, fsm implemented digital system representing states patterns using fixed number bits, translating inputs bits, translating outputs bits finally, transition rules defined given state fsm pattern input bits, transition defined state another state",
        "the design process counter number states power two choose representation states makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "the first step design process develop abstract model model translation human language description model states desired behavior model particularly thorough exact stage",
        "the second step design process think carefully metrics possible interest set metrics feel complete, next step get rid many can",
        "the third step design process identify metrics practical impact current technology, set threshold values metrics simplify reasoning them, eliminate redundant metrics, calculate linear sums reduce count metrics, and, finally, make use notion pareto optimality",
        "the fourth step design process choose particular design set possible designs making choice, engineers typically consider variety factors, including cost, performance, manufacturability, reliability",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "the first step design process develop abstract model model captures intent description particularly thorough exact",
        "the third step design process evaluate design using multiple metrics includes identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "the fourth step design process choose particular design set possible designs choice made based number factors, including objectives design, constraints problem, preferences designer",
        "abstraction process simplifying complex system identifying important aspects system ignoring rest context implementation, abstraction used simplify design identifying important features design ignoring rest make design manageable easier understand",
        "there reasons important make implicit assumptions clear design process first, assumptions made clear, lead confusion misunderstanding among team members working design second, making assumptions explicit help ensure everyone page working towards goal finally, explicit assumptions help prevent errors mistakes design process",
        "the choice state representation affects implementation fsm terms number gates inverters required, well delay overall design serial comparator design based 2-bit slice variant, example, requires 24 gates 10 inverters, much larger earlier serial design terms gate delays, however, new design identical, meaning comparisons finished half time realistic area timing metrics show slightly difference two designs differences dominate results design carefully considered",
        "the choice fsm's input output behavior affects design process determining set possible states set possible outputs set possible states determined set possible inputs, set possible outputs determined set possible outputs",
        "there benefits using gray code counter first, easy design implement second, easy check correctness logic third, easy read understand logic",
        "a gray code counter designed first creating transition diagram shows states outputs counter next, next-state logic developed creating k-maps next-state values deriving algebraic expressions finally, next-state logic implemented diagram",
        "adding third bit gray code counter increases design complexity requires additional carry bit carry bit must propagated adder bit slice logic, increases number logic gates required overall complexity design",
        "one way reduce design complexity make use common algebraic terms sub-expressions help simplify design make easier understand another way reduce complexity use demorgan's laws simplify expression help reduce number gates needed make design efficient",
        "it important reasonable order designing logic diagram help simplify design process make easier understand function logic diagram additionally, help ensure logic diagram compatible products may used system",
        "from passage, inferred logical completeness necessarily help efficient design logic functions words, single boolean logic function expressed many different ways therefore, important engineers learn develop efficient implementation function, well determine whether two logic expressions identical without actually writing truth tables",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills students learn coming months",
        "yes, choose use counter's internal state directly output values colors need produce outputs unique bit patterns using counter's internal state directly output values, simplify design",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways, learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills start learn coming months",
        "the passage states power consumption important metric engineers must take account designs however, cases, desktop high-end server processors, metrics (such performance) may important always want operate edge interesting range could going wrong, engineers taking power consumption account much be",
        "the initial state three flip-flops implementation 0 state explicit mechanism initialization forces flip-flop 0 state alternatively, could add extra logic design would allow us force fsm specific state next cycle",
        "interrupts powerful exceptions occur asynchronously respect program means processor check interrupts instructions, allows flexibility design processor",
        "the initial state three flip-flops unknown unless explicit mechanism initialization initialization work two ways first approach makes use flip-flop design know, flip-flop built pair latches, make use internal reset lines latches force flip-flop 0 state (or 1 state) using additional input alternatively, add extra logic design",
        "the design counter includes eight states, three state bits used keep track current state choice representation fsm's states dramatically affect design complexity right strategy thus often start selecting representation makes sense human, even requires bits strictly necessary",
        "an fsm finite state machine, mathematical model computation used design computer programs digital logic circuits abstract machine one finite number states",
        "there disadvantages using fsm first, fsm designed carefully, hard understand debug second, fsm use resources simpler design, state machine finally, fsm difficult change extend simpler design",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "the design continues choosing state representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "if use gray code, would compare two expressions determine whether represent logic function would test logical equivalence, important part hardware design however, tools today provide help problem, necessary use gray code",
        "the design counter completed applying decisions made { count a} state counting states, decisions made { halt a} state halted states results design states labeled internal state outputs (s_2s_1s_0/z_1z_0)",
        "one important reason consider possible input conditions possible states help ensure design correct example, design ever receives input values within certain range, possible design actually correct input values considering possible input conditions help catch errors like this another reason consider possible input conditions help optimize design example, design ever receives input values within certain range, possible simplify design make efficient considering possible input conditions help identify opportunities optimization",
        "a transition diagram help process helping identify important metrics helping balance design effectively according metrics",
        "the choice representation fsm's states affect design complexity determines many bits needed represent state bits needed represent state, design complex",
        "the right strategy choosing representation start selecting representation makes sense human, even requires bits strictly necessary make design process simpler efficient long run",
        "the choice state representation affects design complexity ways first, affect number bits needed represent states second, affect number possible states represented third, affect number transitions need considered designing state machine",
        "the right strategy start selecting representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "abstraction selecting state representation lead better design allowing engineer focus important aspects problem ignoring details important help simplify problem make easier find solution",
        "the number state bits affects design complexity determines number possible states fsm in larger number state bits means possible states design must able handle them",
        "abstraction important selecting state representation allows designer select representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "different state representations lead different fsm designs example, states represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits fsm implemented digital system, states must represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits",
        "abstraction selecting representation impact design metrics reducing number metrics need considered simplify process designing solution make easier find optimal solution",
        "the hold variable simplifies design allowing designer separate logic deciding whether advance counter fairly cleanly logic advancing counter itself hold bit diagram used determine whether counter advance current cycle",
        "the state representation significant impact overall design system affects way system behaves interacts environment well-chosen state representation simplify design system make efficient",
        "a good state representation important help reduce number logic gates needed design, thus save chip area additionally, good state representation help improve performance design reducing number logic operations needed",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor power consumption cases, two metrics may strongly correlated, meaning design good one metrics frequently also good metric",
        "a good state representation important help reduce number transistors needed design, thus save space energy additionally, help improve performance design making easier computer manipulate logic expressions",
        "the common types memory used digital systems sram dram sram used high-speed applications processor caches embedded designs dram used applications less demanding speed requirements",
        "the two common types memory used digital systems static random access memory (sram) dynamic random access memory (dram) sram used high-speed applications processor caches embedded designs, dram used applications less demanding speed requirements, main memory computers",
        "random access memories (rams) memories support two operations: writing data element, reading data element memories also volatile, means data held memory erased electrical power turned fails static random access memory (sram) used high-speed applications processor caches embedded designs",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors, dram cell uses one transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "sram faster dram, dram denser (has bits per chip area) substantial part dram density due transistor count: typical sram cells use six transistors (two inverter, two connect inverters bit lines), dram cells use single transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "static random access memory used high-speed applications processor caches embedded designs sram bit density significantly lower dram bit density, applications less demanding speed requirements use dram",
        "tri-state buffers used reduce number pins needed chips combining inputs outputs allowed chip designers halve number pins needed",
        "there several disadvantages using dram first, dram slower sram second, dram less dense sram, requires chip area store amount data finally, dram cells complex sram cells, difficult design manufacture",
        "dram type memory slower sram denser (has bits per chip area) dram cells use single transistor, sram cells use six transistors dram designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor count",
        "the vending machine application fsm designed team engineers fsm designed control simple vending machine accepts us coins payment offers choice three items sale machine adjustable item prices, fsm needs keep track much money inserted order decide whether user purchase one items",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "prof doug jones designed vending machine application fsm first identifying different states machine could in created state diagram showed machine would transition one state another finally, implemented fsm hardware using altera quartus software",
        "prof chris schmitz prototyped constructed physical elements help ece shop designed vending machine application fsm, prof doug jones created wiki documentation altera quartus portions lab casey smith, head guru ece instructional labs, developed new debounce design made changes improve robustness",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab based lab earlier mentor graphics work prof herman prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "prof kindratenko helped scale design way made possible deliver 400 students entering ece every semester creating wiki documentation altera quartus portions lab also helped improve robustness lab identifying common failure modes making changes design",
        "one reason try leverage fact next-state patterns two states relevant may simplify design system next-state patterns needed, system designed without them, may make design process simpler faster additionally, eliminating next-state patterns may also reduce cost system",
        "the design easy test two-level logic design means inputs outputs easily tested nand nor gate additionally, design easy test sop expression means inputs outputs easily tested or gate",
        "scan-based testing type testing used test functionality design type testing typically used test digital designs",
        "an fsm finite state machine, model computation used design computer programs hardware fsm defined set states, set inputs, set outputs, set transitions states",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "an encoder helps implement fsm design translating user's input signal used fsm encoder produces signal p indicating user trying make purchase, two-bit signal indicating item user wants decoder takes signal produces individual item release signals r_1, r_2, r_3",
        "a decoder used fsm design generate release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "a digital fsm used control stoplights intersection two roads fsm two inputs, f, two outputs, l1 l0 output fsm used control stoplights fsm designed stoplights red one roads times road green light, controller show yellow light showing red light give drivers warning allow slow down finally, fairness, controller alternate green lights two roads",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "one could design game controller logic puzzle would buttons corresponding different operations could performed logic puzzle example, could button add new element puzzle, button remove element puzzle, button change value element puzzle game controller could also display would show current state puzzle player's progress",
        "the vending machine fsm designed control release items vending machine based user's purchase request fsm uses priority encoder determine item user requested, decoder generate individual item release signals",
        "how multi-metric optimization useful engineering multi-metric optimization useful engineering allows engineers identify important metrics balance design effectively according them multi-metric optimization also allows engineers get rid many metrics possible focus important ones",
        "starting human-based design process typically results design efficient effective one mapped high-level programming language human designers easily optimize design specific metrics, power consumption performance additionally, human designers easily impose constraints design, limits chip area minimum performance, order guide design process",
        "the control structure code maps high-level fsm design breaking program simple steps mapping step state fsm number states fsm depend number steps program",
        "the two approaches fsm design state-transition table state diagram state-transition table lists possible states system in, state diagram shows sequence states system goes through state-transition table compact easier use comparing functions, state diagram intuitive easier understand",
        "the purpose notes introduce important abstraction logic design, use abstraction design ripple-carry adder ripple-carry adder adder adds single bit passes necessary information another copy itself design less efficient designs optimized specific purpose, simplicity approach makes tradeoff interesting one",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "the control structure code maps high-level fsm design breaking program simple steps, one step flow chart may sometimes require one state fsm similarly, one fsm state may able implement several steps flow chart, steps performed simultaneously",
        "one design fsm executes simple pieces flow chart breaking program smaller steps mapping step state fsm one also use registers counters implement variables program, use comparator implement test statement",
        "the idx variable used keep track number operations logic expression metric used estimate number transistors needed design, turn estimate area required design",
        "the flow chart represents steps taken designing new product first step think carefully metrics possible interest second step get rid many metrics possible third step identify metrics practical impact current technology fourth step set threshold values metrics simplify reasoning them fifth step eliminate redundant metrics sixth step calculate linear sums reduce count metrics seventh step make use notion pareto optimality"
    ],
    "8": [
        "the inputs gray code counter current state counter clock signal clock signal triggers state change counter",
        "a gray code counter type digital counter used count number clock pulses named frank gray, invented code 1953 main advantage gray code counter types counters less likely produce errors counting",
        "a gray code counter type digital counter uses gray code generate output input gray code counter digital signal represents number clock pulses applied counter output gray code counter digital signal represents number clock pulses applied counter, plus one",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "if rise fall rising clock edge, processor would able recognize interrupts instructions would cause program terminate unexpectedly",
        "there two optical sensors positioned different heights device first sensor positioned high enough slope dime passes beneath sensor, allowing signal produced sensor tell us whether coin dime quarter second sensor positioned coins pass front it signal second sensor used clock fsm",
        "the device uses two optical sensors differentiate dime quarter first sensor positioned dime passes beneath it, second sensor positioned coins pass front it rising edge clock signal second sensor occurs, signal first sensor indicates whether coin dime quarter",
        "the device uses sensors generate clock signal alternating 0 1 regular period clock 0, one set latches holds bit values fixed, combinational logic uses latches inputs produce bits copied second set latches clock 1, second set latches stops storing data inputs retains bit values order drive combinational logic, results copied third set latches",
        "the fsm uses signal determine whether accept reject coin checking rising edge signal second sensor rising edge occurs, signal first sensor indicates whether coin quarter (t=1) dime (t=0) sample timing diagram lab appears right clock signal generated lab square wave---in words, high low portions equal---but also unlikely periodic instead, ``cycle'' defined time coin insertions",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "the fsm five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs class, focus clocked synchronous fsm implementations, fsm's internal state bits stored flip-flops",
        "the vending machine uses sensors detect coin inserted first sensor positioned dime pass beneath it, second sensor positioned coins pass front it signal second sensor used clock fsm, signal first sensor indicates whether coin dime quarter",
        "the fsm handles multiple input events single clock cycle first storing input events queue fsm ready process input event, dequeues event queue processes it"
    ],
    "9": [
        "system calls initiated trap instruction, system calls also known traps many architectures, system call places processor privileged kernel mode, instructions implement call considered part operating system",
        "The trap vectors in lc3 are very similar to the trap vectors in lc3.",
        "The lc3 are in trap vectors",
        "Vectors are made up of trap",
        "Lc3 contains the trap vectors"
    ],
    "10": [
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "the first step design process develop abstract model model translation human language description model states desired behavior model particularly thorough exact stage",
        "starting human-based design process typically results design efficient effective one mapped high-level programming language human designers easily optimize design specific metrics, power consumption performance additionally, human designers easily impose constraints design, limits chip area minimum performance, order guide design process",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "one way transform code written high-level language fsm use compiler compiler program translates code written high-level language code run computer another way transform code written high-level language fsm use interpreter interpreter program executes code written high-level language"
    ],
    "11": [
        "the timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle states thus act like counter",
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the outputs needed observe state check output logic values state register timer outputs used determine duration state order states occur",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "the fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the state fsm split two pieces: 3-bit register 6-bit timer timer simply binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the transitions states well-defined fsm timer counts produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the output fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the value register price1 price first item machine, determined owner machine",
        "the value register price2 number nickels machine multiplied price item question way, machine keep track much money inserted much owed item",
        "the value register price3 price third item machine, determined owner machine",
        "the value register n corresponds number nickels inserted machine user inserts quarter, machine transition state n+5, indicating 5 nickels inserted user attempts purchase item without inserting enough money first, machine remain state reject request",
        "the value register equivalence class sum two 4-bit numbers case, sum 18, equivalent 2 (mod 16)",
        "the register price1 six bits allows machine keep track 315 (63 nickels)",
        "the value register price2 number nickels inserted machine",
        "the vending machine releases item using decoder generate three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the input fsm 3-bit register 6-bit timer timer used count produce output z=1 reaches 0 register used store state fsm",
        "the priority encoder used determine item user wants purchase, generate signal indicating user trying make purchase output priority encoder used select value one price registers, subtracted current number nickels stored register purchase successful, price subtracted number nickels item released",
        "the state fsm split two pieces: {3-bit} register {6-bit} timer timer simply binary counter counts downward produces output z=1 reaches 0 notice register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle we thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the stoplight controller 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the stoplight controller alternates green lights two roads changing value register s value changed timer reaches 0, timer set enters new state duration state determined value register s",
        "the general model computer system execute set instructions, called program, store resulting data system set registers hold data instructions, set memory locations store data programs system also set input output devices allow interact outside world",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "one design fsm executes simple pieces flow chart breaking program smaller steps mapping step state fsm one also use registers counters implement variables program, use comparator implement test statement",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "the first step design process develop abstract model model translation human language description model states desired behavior model particularly thorough exact stage",
        "starting human-based design process typically results design efficient effective one mapped high-level programming language human designers easily optimize design specific metrics, power consumption performance additionally, human designers easily impose constraints design, limits chip area minimum performance, order guide design process",
        "one way transform code written high-level language fsm use compiler compiler program translates code written high-level language code run computer another way transform code written high-level language fsm use interpreter interpreter program executes code written high-level language"
    ],
    "12": [
        "a gray code sequence n-bit patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit construct gray code recursively follows: (n+1)-bit gray code, write sequence n-bit gray code, add 0 front patterns sequence, append second copy n-bit gray code reverse order, put 1 front patterns second copy",
        "the passage states power consumption important metric engineers must take account designs however, cases, desktop high-end server processors, metrics (such performance) may important always want operate edge interesting range could going wrong, engineers taking power consumption account much be",
        "there disadvantages using fsm first, fsm designed carefully, hard understand debug second, fsm use resources simpler design, state machine finally, fsm difficult change extend simpler design",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context",
        "a tri-state buffer type digital logic device used either connect disconnect signal line power source ground achieved using two transistors, one connect signal line power source, connect signal line ground buffer enabled, transistors turned on, signal line connected either power source ground, depending value input signal buffer disabled, transistors turned off, effectively disconnecting signal line power source ground",
        "the addressability computer memory number bits stored element memory size elements memory vary single binary digit, bit, byte (8 bits) more typically, data elements larger byte referred words, size word depends context",
        "to write data memory element, external circuit sends signal memory indicating address element written data written sent memory, memory stores data element specified address",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context element memory assigned unique name, called address, allows external circuit identify particular element interest addresses unlike street addresses use send letter unlike street addresses, however, memory addresses usually little redundancy; possible combination bits address identifies distinct set bits memory",
        "a ram type memory used store data volatile memory, means data stored memory erased power turned fails ram random access memory, means time required access element memory independent element accessed",
        "the addressability computer memory number bits stored element memory size elements memory vary single bit byte more typically, data elements larger byte referred words, size word depends context",
        "a write operation sram cell performed bringing bit line intermediate voltage level, raising select line, allows capacitor either pull small amount charge bit line push small amount charge onto bit line resulting change voltage detected sense amplifier end bit line",
        "a tri-state buffer type digital logic circuit used either connect disconnect signal line power supply ground done using two transistors, one connect signal line power supply, connect signal line ground buffer enabled, transistors turned on, signal line connected either power supply ground, depending value input signal buffer disabled, transistors turned off, signal line effectively disconnected power supply ground",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, problem solved",
        "the vending machine application fsm designed team engineers fsm designed control simple vending machine accepts us coins payment offers choice three items sale machine adjustable item prices, fsm needs keep track much money inserted order decide whether user purchase one items",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, servo held place, desired",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "prof doug jones designed vending machine application fsm first identifying different states machine could in created state diagram showed machine would transition one state another finally, implemented fsm hardware using altera quartus software",
        "prof chris schmitz prototyped constructed physical elements help ece shop designed vending machine application fsm, prof doug jones created wiki documentation altera quartus portions lab casey smith, head guru ece instructional labs, developed new debounce design made changes improve robustness",
        "to use device, user presses one buttons user presses one button, device produces lychee ice cream user presses blend button, device produces blend user presses mango button, device produces mango ice cream",
        "the output depend input function and evaluate 1 input values 1 input value 0, function evaluate 0",
        "a decoder used fsm design generate release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "the vending machine fsm designed control release items vending machine based user's purchase request fsm uses priority encoder determine item user requested, decoder generate individual item release signals",
        "the main difference mux decoder mux multiple inputs one output, decoder one input multiple outputs mux used select one several input signals send output, decoder used interpret input signal produce several output signals",
        "the decoder generates release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "the vending machine knows much item costs owner machine sets prices dynamically machine keeps track much money inserted multiple 5 cents (one nickel) expensive item machine might cost dollar two, fsm must track least 20 40 nickels value",
        "the vending machine keeps track much money inserted multiple 5 cents (one nickel) six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "the vending machine uses sensors detect coin inserted first sensor positioned dime pass beneath it, second sensor positioned coins pass front it signal second sensor used clock fsm, signal first sensor indicates whether coin dime quarter",
        "the vending machine releases item using decoder generate three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the vending machine knows purchase requested user pushes one item selection buttons causes priority encoder produce signal p indicating user trying make purchase",
        "the control structure code maps high-level fsm design breaking program simple steps mapping step state fsm number states fsm depend number steps program",
        "interrupts powerful exceptions occur asynchronously respect program means processor check interrupts instructions, allows flexibility design processor",
        "an fsm finite state machine, mathematical model computation used design computer programs digital logic circuits abstract machine one finite number states",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "one reason important start representation makes sense human humans must supply logic functions interest, must program acceptable transformations equivalent forms second reason complexity problem good way introduce real engineering finally, contextual information help develop better understanding finite state machines higher-level abstractions form core digital systems still defined directly humans today",
        "non-volatile memories include magnetic optical storage media dvds, cd-roms, disks, tapes, capacitive storage media flash drives, programmable logic devices",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "if rise fall rising clock edge, processor would able recognize interrupts instructions would cause program terminate unexpectedly",
        "the signal indicates interrupt occurred interrupt could generated external device, disk drive keyboard, error program executed, undefined instruction attempt divide zero",
        "the 'rejectd' state state processor interrupts program due error unexpected behavior state usually causes program terminate",
        "scan-based testing method testing input scanned converted appropriate result programmer responsible ensuring number conversions format string matches number arguments provided programmer must also ensure type information produced conversion stored address passed conversion",
        "an fsm finite state machine, model computation used design computer programs hardware fsm defined set states, set inputs, set outputs, set transitions states",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "starting human-based design process typically results design efficient effective one mapped high-level programming language human designers easily optimize design specific metrics, power consumption performance additionally, human designers easily impose constraints design, limits chip area minimum performance, order guide design process",
        "the general model computer system execute set instructions, called program, store resulting data system set registers hold data instructions, set memory locations store data programs system also set input output devices allow interact outside world",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "a computer machine programmed carry set arithmetic logical operations automatically fsm model behavior composed finite set states, transitions states, actions",
        "one way transform code written high-level language fsm use compiler compiler program translates code written high-level language code run computer another way transform code written high-level language fsm use interpreter interpreter program executes code written high-level language",
        "the control structure code maps high-level fsm design breaking program simple steps, one step flow chart may sometimes require one state fsm similarly, one fsm state may able implement several steps flow chart, steps performed simultaneously",
        "one design fsm executes simple pieces flow chart breaking program smaller steps mapping step state fsm one also use registers counters implement variables program, use comparator implement test statement",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "passage - compact approaches comparing functions, solutions subject later class (such ece 462) {two-level logic} { two-level logic} popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams begin one demorgan's laws, illustrate algebraically graphically: c = b+a = {file=part2/figs/demorgan-nandeps,width=095in} let's say function expressed sop form, z=abc+de+fghj diagram left shows function constructed three and gates or gate using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate invert point along wire, slide bubble wire output first column"
    ],
    "13": [
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "there several benefits good state representation first, help reduce number pins needed chip second, improve density memory chip third, improve speed memory chip",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context",
        "the common types memory used digital systems sram dram sram used high-speed applications processor caches embedded designs dram used applications less demanding speed requirements",
        "memory chips combined provide larger wider memories using multiple chips example, two 2-bit memories used implement 4-bit memory one address bits used drive decoder determines two chips active (cs=1) decoder enabled chip select signal larger memory, neither chip enabled external cs low, desired",
        "the two common types memory used digital systems static random access memory (sram) dynamic random access memory (dram) sram used high-speed applications processor caches embedded designs, dram used applications less demanding speed requirements, main memory computers",
        "one way combine memory chips use multiple chips implement larger memory done using one address bit drive decoder determines two chips active another way combine memory chips use multiple chips implement wider memory done routing external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way combine memory chips use create larger memory done using one address bit drive decoder determines two chips active address bits, well external data inputs write enable signal, delivered memories external data outputs also connected memories another way combine memory chips use create wider memory case, chips either active inactive time, external address, write enable, chip select inputs routed chips however, data inputs outputs separate, chip handling different part data",
        "random access memories (rams) memories support two operations: writing data element, reading data element memories also volatile, means data held memory erased electrical power turned fails static random access memory (sram) used high-speed applications processor caches embedded designs",
        "the addressability computer memory number bits stored element memory size elements memory vary single binary digit, bit, byte (8 bits) more typically, data elements larger byte referred words, size word depends context",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors, dram cell uses one transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "to write data memory element, external circuit sends signal memory indicating address element written data written sent memory, memory stores data element specified address",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context element memory assigned unique name, called address, allows external circuit identify particular element interest addresses unlike street addresses use send letter unlike street addresses, however, memory addresses usually little redundancy; possible combination bits address identifies distinct set bits memory",
        "a word context computer memory sequence bits represents unit data words represent numbers, characters, data types size word typically determined computer's word size, number bits computer process time",
        "a ram type memory used store data volatile memory, means data stored memory erased power turned fails ram random access memory, means time required access element memory independent element accessed",
        "sram faster dram, dram denser (has bits per chip area) substantial part dram density due transistor count: typical sram cells use six transistors (two inverter, two connect inverters bit lines), dram cells use single transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "a computer memory storage device data two main types memory: sram dram sram faster expensive, dram slower cheaper dram commonly used main memory computers",
        "data elements computer memory stored either static random access memory (sram) dynamic random access memory (dram) sram uses active logic form two-inverter loop maintain stored values, dram uses charged capacitor store bit",
        "the addressability computer memory number bits stored element memory size elements memory vary single bit byte more typically, data elements larger byte referred words, size word depends context",
        "words computer memory stored bits, either 0 1 group bits makes byte, smallest unit data stored computer memory group bytes makes word, smallest unit data read written computer memory",
        "a random access memory (ram) type memory allows data stored retrieved order ram volatile, means loses data power supply removed two types ram: static ram (sram) dynamic ram (dram)",
        "static random access memory used high-speed applications processor caches embedded designs sram bit density significantly lower dram bit density, applications less demanding speed requirements use dram",
        "sram cells combined bit slice sharing bit lines analog read write logic bit slice figure thought 16-address, 1-bit-addressable memory (2^4b) cells bit slice share bit lines analog read write logic, appears right figure",
        "the main advantage sram dram speed sram faster dram need refresh memory cells often dram denser sram, store data given area",
        "sram type memory used computers made number transistors store data way easy computer access sram faster types memory, also expensive",
        "sram cells combined bit slice sharing bit lines analog read write logic decoder sets one cell's select line high enable read write operation cell chip select input cs drives enable input decoder, none memory cells active chip select low (cs=0), exactly one memory cells active chip select high (cs=1)",
        "the decoder memory chip responsible translating memory address correct location memory chip necessary ensure correct data read written correct location memory chip",
        "the benefit using tri-state buffer allows logical disconnection tri-state buffer output means output shared one memory without need additional multiplexers useful creating larger memories combining multiple chips",
        "tri-state buffers used construct wider memories connecting data inputs outputs multiple memories together allows output line shared one memory without need additional multiplexers",
        "tri-state buffers used reduce number pins needed chip combining inputs outputs example, data inputs outputs memory combined single set data wires, bidirectional signals reduces number pins needed still allowing amount data transferred",
        "one way construct wider memory use multiple chips connect data inputs outputs chip separately way, left chip handles high n bits input writes produces high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way construct larger memory use multiple chips one address bits drive decoder determines two chips active decoder enabled chip select signal larger memory way, neither chip enabled external cs low",
        "a sense amplifier circuit used read data stored memory cell sense amplifier amplifies small signal memory cell converts digital signal read processor",
        "sdram type dram used main memory computers ddr4 sdram newer type dram faster sdram",
        "dram type memory uses capacitors store data row dram selected, cells row read written back, refreshes data cells dram said destructive reads read operation brings voltage capacitor closer intermediate voltage level, effectively destroys data cell",
        "dram type memory slower sram denser (has bits per chip area) dram cells use single transistor, sram cells use six transistors dram designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor count",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "the general model computer system execute set instructions, called program, store resulting data system set registers hold data instructions, set memory locations store data programs system also set input output devices allow interact outside world",
        "the array notation code means code trying convert input user appropriate result, store result memory address given next argument",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "passage - compact approaches comparing functions, solutions subject later class (such ece 462) {two-level logic} { two-level logic} popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams begin one demorgan's laws, illustrate algebraically graphically: c = b+a = {file=part2/figs/demorgan-nandeps,width=095in} let's say function expressed sop form, z=abc+de+fghj diagram left shows function constructed three and gates or gate using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate invert point along wire, slide bubble wire output first column"
    ],
    "14": [
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "interrupts powerful exceptions occur asynchronously respect program means processor check interrupts instructions, allows flexibility design processor",
        "an fsm finite state machine, mathematical model computation used design computer programs digital logic circuits abstract machine one finite number states",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "one reason important start representation makes sense human humans must supply logic functions interest, must program acceptable transformations equivalent forms second reason complexity problem good way introduce real engineering finally, contextual information help develop better understanding finite state machines higher-level abstractions form core digital systems still defined directly humans today",
        "non-volatile memories include magnetic optical storage media dvds, cd-roms, disks, tapes, capacitive storage media flash drives, programmable logic devices",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "if rise fall rising clock edge, processor would able recognize interrupts instructions would cause program terminate unexpectedly",
        "the signal indicates interrupt occurred interrupt could generated external device, disk drive keyboard, error program executed, undefined instruction attempt divide zero",
        "the 'rejectd' state state processor interrupts program due error unexpected behavior state usually causes program terminate",
        "scan-based testing method testing input scanned converted appropriate result programmer responsible ensuring number conversions format string matches number arguments provided programmer must also ensure type information produced conversion stored address passed conversion",
        "an fsm finite state machine, model computation used design computer programs hardware fsm defined set states, set inputs, set outputs, set transitions states",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "starting human-based design process typically results design efficient effective one mapped high-level programming language human designers easily optimize design specific metrics, power consumption performance additionally, human designers easily impose constraints design, limits chip area minimum performance, order guide design process",
        "the control structure code maps high-level fsm design breaking program simple steps mapping step state fsm number states fsm depend number steps program",
        "the general model computer system execute set instructions, called program, store resulting data system set registers hold data instructions, set memory locations store data programs system also set input output devices allow interact outside world",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "a computer machine programmed carry set arithmetic logical operations automatically fsm model behavior composed finite set states, transitions states, actions",
        "one way transform code written high-level language fsm use compiler compiler program translates code written high-level language code run computer another way transform code written high-level language fsm use interpreter interpreter program executes code written high-level language",
        "the control structure code maps high-level fsm design breaking program simple steps, one step flow chart may sometimes require one state fsm similarly, one fsm state may able implement several steps flow chart, steps performed simultaneously",
        "one design fsm executes simple pieces flow chart breaking program smaller steps mapping step state fsm one also use registers counters implement variables program, use comparator implement test statement"
    ],
    "15": [
        "the desired pattern one represents number 2's complement representation 2's complement representation defined choosing set integers balanced around zero groups so, want represent number 2's complement representation, need choose pattern represents number representation",
        "the input sequence testing follows: first, user prompted input two integers decimal form, converted 2's complement stored variables 'a' 'b' next, user prompted input ascii character, value hexadecimal, double-precision floating-point number, stored variables 'c', 'u', 'd', respectively finally, user prompted input two real numbers decimal form, converted single- double-precision floating-point numbers stored variables 'f' 'd', respectively",
        "the output behavior add3 procedure takes three integers arguments, adds together, returns sum procedure called constants 10, 20, 30, result printed calling convention, call made, r0 must contain value 10, r1 value 20, r2 value 30",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "The 2's complement integer is used for computations"
    ],
    "16": [
        "the design process digital fsm includes six steps: developing abstract model, specifying i/o behavior, completing specification, choosing state representation, calculating logic expressions, implementing flip-flops gates",
        "a multiplexer digital logic block allows one digital signal select several others forwarded output simplest form multiplexer 2-to-1 multiplexer, two inputs left one top top input allows us choose left inputs forwarded output",
        "the design process digital fsm typically consists six steps: (1) developing abstract model, (2) specifying i/o behavior, (3) completing specification, (4) choosing state representation, (5) calculating logic expressions, (6) implementing flip-flops gates",
        "the design process involves manipulation logic expressions order optimize specific metrics, cost, power, performance today, manipulation performed almost entirely computers, human engineers supplying logic functions interest imposing constraints process",
        "a multiplexer device allows multiple signals routed onto single channel done selecting one several input signals connecting output multiplexers used variety applications, telecommunications computer networking",
        "from passage, seems digital fsm designed abstract model first identifying finite set states, set possible inputs, set possible outputs, set transition rules then, fsm implemented digital system representing states patterns using fixed number bits, translating inputs bits, translating outputs bits finally, transition rules defined given state fsm pattern input bits, transition defined state another state",
        "the design process counter number states power two choose representation states makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "the first step design process develop abstract model model translation human language description model states desired behavior model particularly thorough exact stage",
        "the second step design process think carefully metrics possible interest set metrics feel complete, next step get rid many can",
        "the third step design process identify metrics practical impact current technology, set threshold values metrics simplify reasoning them, eliminate redundant metrics, calculate linear sums reduce count metrics, and, finally, make use notion pareto optimality",
        "the fourth step design process choose particular design set possible designs making choice, engineers typically consider variety factors, including cost, performance, manufacturability, reliability",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "the first step design process develop abstract model model captures intent description particularly thorough exact",
        "the third step design process evaluate design using multiple metrics includes identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "the fourth step design process choose particular design set possible designs choice made based number factors, including objectives design, constraints problem, preferences designer",
        "abstraction process simplifying complex system identifying important aspects system ignoring rest context implementation, abstraction used simplify design identifying important features design ignoring rest make design manageable easier understand",
        "there reasons important make implicit assumptions clear design process first, assumptions made clear, lead confusion misunderstanding among team members working design second, making assumptions explicit help ensure everyone page working towards goal finally, explicit assumptions help prevent errors mistakes design process",
        "the choice state representation affects implementation fsm terms number gates inverters required, well delay overall design serial comparator design based 2-bit slice variant, example, requires 24 gates 10 inverters, much larger earlier serial design terms gate delays, however, new design identical, meaning comparisons finished half time realistic area timing metrics show slightly difference two designs differences dominate results design carefully considered",
        "the choice fsm's input output behavior affects design process determining set possible states set possible outputs set possible states determined set possible inputs, set possible outputs determined set possible outputs",
        "the inputs gray code counter current state counter clock signal clock signal triggers state change counter",
        "the timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle states thus act like counter",
        "there benefits using gray code counter first, easy design implement second, easy check correctness logic third, easy read understand logic",
        "a gray code counter type digital counter uses gray code generate output input gray code counter digital signal represents number clock pulses applied counter output gray code counter digital signal represents number clock pulses applied counter, plus one",
        "a gray code counter designed first creating transition diagram shows states outputs counter next, next-state logic developed creating k-maps next-state values deriving algebraic expressions finally, next-state logic implemented diagram",
        "adding third bit gray code counter increases design complexity requires additional carry bit carry bit must propagated adder bit slice logic, increases number logic gates required overall complexity design",
        "one way reduce design complexity make use common algebraic terms sub-expressions help simplify design make easier understand another way reduce complexity use demorgan's laws simplify expression help reduce number gates needed make design efficient",
        "it important reasonable order designing logic diagram help simplify design process make easier understand function logic diagram additionally, help ensure logic diagram compatible products may used system",
        "from passage, inferred logical completeness necessarily help efficient design logic functions words, single boolean logic function expressed many different ways therefore, important engineers learn develop efficient implementation function, well determine whether two logic expressions identical without actually writing truth tables",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills students learn coming months",
        "yes, choose use counter's internal state directly output values colors need produce outputs unique bit patterns using counter's internal state directly output values, simplify design",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways, learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills start learn coming months",
        "the passage states power consumption important metric engineers must take account designs however, cases, desktop high-end server processors, metrics (such performance) may important always want operate edge interesting range could going wrong, engineers taking power consumption account much be",
        "the initial state three flip-flops implementation 0 state explicit mechanism initialization forces flip-flop 0 state alternatively, could add extra logic design would allow us force fsm specific state next cycle",
        "the first approach use flip-flop design add single bit pass necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "interrupts powerful exceptions occur asynchronously respect program means processor check interrupts instructions, allows flexibility design processor",
        "the initial state three flip-flops unknown unless explicit mechanism initialization initialization work two ways first approach makes use flip-flop design know, flip-flop built pair latches, make use internal reset lines latches force flip-flop 0 state (or 1 state) using additional input alternatively, add extra logic design",
        "the passage discusses design serial comparator using bit-sliced approach approach leads design 24 gates 10 inverters, much larger earlier serial design however, new design identical terms gate delays, meaning comparison finished half time",
        "the design counter includes eight states, three state bits used keep track current state choice representation fsm's states dramatically affect design complexity right strategy thus often start selecting representation makes sense human, even requires bits strictly necessary",
        "an fsm finite state machine, mathematical model computation used design computer programs digital logic circuits abstract machine one finite number states",
        "there disadvantages using fsm first, fsm designed carefully, hard understand debug second, fsm use resources simpler design, state machine finally, fsm difficult change extend simpler design",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "the design continues choosing state representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "if use gray code, would compare two expressions determine whether represent logic function would test logical equivalence, important part hardware design however, tools today provide help problem, necessary use gray code",
        "the design counter completed applying decisions made { count a} state counting states, decisions made { halt a} state halted states results design states labeled internal state outputs (s_2s_1s_0/z_1z_0)",
        "one important reason consider possible input conditions possible states help ensure design correct example, design ever receives input values within certain range, possible design actually correct input values considering possible input conditions help catch errors like this another reason consider possible input conditions help optimize design example, design ever receives input values within certain range, possible simplify design make efficient considering possible input conditions help identify opportunities optimization",
        "a transition diagram help process helping identify important metrics helping balance design effectively according metrics",
        "the choice representation fsm's states affect design complexity determines many bits needed represent state bits needed represent state, design complex",
        "the right strategy choosing representation start selecting representation makes sense human, even requires bits strictly necessary make design process simpler efficient long run",
        "the choice state representation affects design complexity ways first, affect number bits needed represent states second, affect number possible states represented third, affect number transitions need considered designing state machine",
        "the right strategy start selecting representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "abstraction selecting state representation lead better design allowing engineer focus important aspects problem ignoring details important help simplify problem make easier find solution",
        "the number state bits affects design complexity determines number possible states fsm in larger number state bits means possible states design must able handle them",
        "abstraction important selecting state representation allows designer select representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "different state representations lead different fsm designs example, states represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits fsm implemented digital system, states must represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits",
        "abstraction selecting representation impact design metrics reducing number metrics need considered simplify process designing solution make easier find optimal solution",
        "the hold variable simplifies design allowing designer separate logic deciding whether advance counter fairly cleanly logic advancing counter itself hold bit diagram used determine whether counter advance current cycle",
        "abstraction used build three-bit gray code counter two-bit design using copies bit-sliced adder circuit approach less efficient designing circuit specifically three-bit gray code counter, simpler",
        "the state representation significant impact overall design system affects way system behaves interacts environment well-chosen state representation simplify design system make efficient",
        "the states fsm act like counter, value fsm set whenever state changes timer set state changes, duration state determined value timer fsm also set conditions, signal f calculated",
        "a good state representation important help reduce number logic gates needed design, thus save chip area additionally, good state representation help improve performance design reducing number logic operations needed",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor power consumption cases, two metrics may strongly correlated, meaning design good one metrics frequently also good metric",
        "a good state representation important help reduce number transistors needed design, thus save space energy additionally, help improve performance design making easier computer manipulate logic expressions",
        "the common types memory used digital systems sram dram sram used high-speed applications processor caches embedded designs dram used applications less demanding speed requirements",
        "tri-state buffers used provide logical disconnection tri-state buffer output logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "memory chips combined provide larger wider memories using multiple chips example, two 2-bit memories used implement 4-bit memory one address bits used drive decoder determines two chips active (cs=1) decoder enabled chip select signal larger memory, neither chip enabled external cs low, desired",
        "the two common types memory used digital systems static random access memory (sram) dynamic random access memory (dram) sram used high-speed applications processor caches embedded designs, dram used applications less demanding speed requirements, main memory computers",
        "one build memories using logic creating tri-state buffer logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "a tri-state buffer type digital logic device used either connect disconnect signal line power source ground achieved using two transistors, one connect signal line power source, connect signal line ground buffer enabled, transistors turned on, signal line connected either power source ground, depending value input signal buffer disabled, transistors turned off, effectively disconnecting signal line power source ground",
        "a tri-state buffer logic circuit used disconnect output logic circuit achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "one way combine memory chips use create larger memory done using one address bit drive decoder determines two chips active address bits, well external data inputs write enable signal, delivered memories external data outputs also connected memories another way combine memory chips use create wider memory case, chips either active inactive time, external address, write enable, chip select inputs routed chips however, data inputs outputs separate, chip handling different part data",
        "random access memories (rams) memories support two operations: writing data element, reading data element memories also volatile, means data held memory erased electrical power turned fails static random access memory (sram) used high-speed applications processor caches embedded designs",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors, dram cell uses one transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "to write data memory element, external circuit sends signal memory indicating address element written data written sent memory, memory stores data element specified address",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context element memory assigned unique name, called address, allows external circuit identify particular element interest addresses unlike street addresses use send letter unlike street addresses, however, memory addresses usually little redundancy; possible combination bits address identifies distinct set bits memory",
        "sram faster dram, dram denser (has bits per chip area) substantial part dram density due transistor count: typical sram cells use six transistors (two inverter, two connect inverters bit lines), dram cells use single transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "static random access memory used high-speed applications processor caches embedded designs sram bit density significantly lower dram bit density, applications less demanding speed requirements use dram",
        "a tri-state buffer achieves logical disconnection using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "tri-state buffers used reduce number pins needed chips combining inputs outputs allowed chip designers halve number pins needed",
        "a tri-state buffer type digital logic circuit used either connect disconnect signal line power supply ground done using two transistors, one connect signal line power supply, connect signal line ground buffer enabled, transistors turned on, signal line connected either power supply ground, depending value input signal buffer disabled, transistors turned off, signal line effectively disconnected power supply ground",
        "a tri-state buffer digital circuit used either connect disconnect output signal line buffer three states: high, low, high impedance buffer high state, output connected signal line copies signal input buffer low state, output disconnected signal line buffer high impedance state, output effectively disconnected signal line",
        "a tri-state buffer digital circuit used either connect disconnect signal circuit buffer three states: high, low, high impedance high impedance state effectively disconnects signal circuit allows multiple memories share output line without need additional multiplexers",
        "a tri-state buffer used create electrical connection tri-state buffer output logical disconnection achieved using outer transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "tri-state buffers used reduce number pins needed chip combining inputs outputs example, data inputs outputs memory combined single set data wires, bidirectional signals reduces number pins needed still allowing amount data transferred",
        "one way construct larger memory use multiple chips one address bits drive decoder determines two chips active decoder enabled chip select signal larger memory way, neither chip enabled external cs low",
        "a sense amplifier circuit used read data stored memory cell sense amplifier amplifies small signal memory cell converts digital signal read processor",
        "a row natural basis refresh cycle dram data pins provide bidirectional signals reading writing elements dram output enable input, oe, controls tri-state buffers dram determine whether dram drives data pins we input, controls type operation, also present",
        "there several disadvantages using dram first, dram slower sram second, dram less dense sram, requires chip area store amount data finally, dram cells complex sram cells, difficult design manufacture",
        "dram type memory slower sram denser (has bits per chip area) dram cells use single transistor, sram cells use six transistors dram designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor count",
        "a sense amplifier device used amplify signal sensor typically used amplify signal small sensor, pressure sensor, level read larger device, computer",
        "the ras signal indicates row component address available raising ras signal row destructively reads contents cells row, forcing cells rewritten effecting refresh row thus natural basis refresh cycle",
        "the vending machine application fsm designed team engineers fsm designed control simple vending machine accepts us coins payment offers choice three items sale machine adjustable item prices, fsm needs keep track much money inserted order decide whether user purchase one items",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "prof doug jones designed vending machine application fsm first identifying different states machine could in created state diagram showed machine would transition one state another finally, implemented fsm hardware using altera quartus software",
        "prof chris schmitz prototyped constructed physical elements help ece shop designed vending machine application fsm, prof doug jones created wiki documentation altera quartus portions lab casey smith, head guru ece instructional labs, developed new debounce design made changes improve robustness",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab based lab earlier mentor graphics work prof herman prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "prof kindratenko helped scale design way made possible deliver 400 students entering ece every semester creating wiki documentation altera quartus portions lab also helped improve robustness lab identifying common failure modes making changes design",
        "a signal used set timer f 0, timer set state changes",
        "the signal indicates interrupt occurred interrupt could generated external device, disk drive keyboard, error program executed, undefined instruction attempt divide zero",
        "the significance rising edge signal second sensor indicates presence object field view sensor rising edge signal indicates sensor detected change intensity light receiving",
        "there two optical sensors positioned different heights device first sensor positioned high enough slope dime passes beneath sensor, allowing signal produced sensor tell us whether coin dime quarter second sensor positioned coins pass front it signal second sensor used clock fsm",
        "the device uses two optical sensors differentiate dime quarter first sensor positioned dime passes beneath it, second sensor positioned coins pass front it rising edge clock signal second sensor occurs, signal first sensor indicates whether coin dime quarter",
        "the device uses sensors generate clock signal alternating 0 1 regular period clock 0, one set latches holds bit values fixed, combinational logic uses latches inputs produce bits copied second set latches clock 1, second set latches stops storing data inputs retains bit values order drive combinational logic, results copied third set latches",
        "the fsm uses signal determine whether accept reject coin checking rising edge signal second sensor rising edge occurs, signal first sensor indicates whether coin quarter (t=1) dime (t=0) sample timing diagram lab appears right clock signal generated lab square wave---in words, high low portions equal---but also unlikely periodic instead, ``cycle'' defined time coin insertions",
        "the possible outputs fsm a=1 p=1 f signal used set timer, either 0 1 f=0, timer set state changes f=1, timer set state changes light one roads green",
        "the 'quarter' state refers fact addition unit 4-bit examples closed addition means value n, easily find two 4-bit unsigned numbers that, added together, cannot represented 4-bit unsigned number n=4, example, add 12 (1100) 6 (0110) obtain 18 since 18 outside range [0,2^4-1] representable using 4-bit unsigned representation, representation breaks try represent sum using representation",
        "the meaning assigned bit patterns makes easier understand behavior fsm example, paid state, last coin inserted may either type, type all, since decided start fsm state well however, four states, meanings provide clear understanding state fsm",
        "prof jones assigns bit patterns way makes easy humans understand meaning states example, paid state, last coin inserted may either type, type all, since fsm starts state however, four states, meanings clear easy apply",
        "one reason try leverage fact next-state patterns two states relevant may simplify design system next-state patterns needed, system designed without them, may make design process simpler faster additionally, eliminating next-state patterns may also reduce cost system",
        "the input sequence 111010010001 significant determines duration state fsm",
        "the design easy test two-level logic design means inputs outputs easily tested nand nor gate additionally, design easy test sop expression means inputs outputs easily tested or gate",
        "scan-based testing type testing used test functionality design type testing typically used test digital designs",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "an fsm finite state machine, model computation used design computer programs hardware fsm defined set states, set inputs, set outputs, set transitions states",
        "an encoder device converts signal message code code usually binary code, sequence 0s 1s code used represent signal message form read machine, computer",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "an encoder helps implement fsm design translating user's input signal used fsm encoder produces signal p indicating user trying make purchase, two-bit signal indicating item user wants decoder takes signal produces individual item release signals r_1, r_2, r_3",
        "a decoder used fsm design generate release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "a digital fsm used control stoplights intersection two roads fsm two inputs, f, two outputs, l1 l0 output fsm used control stoplights fsm designed stoplights red one roads times road green light, controller show yellow light showing red light give drivers warning allow slow down finally, fairness, controller alternate green lights two roads",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "one could design game controller logic puzzle would buttons corresponding different operations could performed logic puzzle example, could button add new element puzzle, button remove element puzzle, button change value element puzzle game controller could also display would show current state puzzle player's progress",
        "the fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the state fsm split two pieces: 3-bit register 6-bit timer timer simply binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the vending machine fsm designed control release items vending machine based user's purchase request fsm uses priority encoder determine item user requested, decoder generate individual item release signals",
        "the transitions states well-defined fsm timer counts produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the output fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "a priority encoder type encoder generates signal whenever input lines active, encodes index highest active input two-bit unsigned number priority encoder used determine input lines highest priority",
        "a decoder type logic circuit takes input signal produces one output possible value signal decoder similar multiplexer number inputs outputs however, decoder one input signal, multiplexer multiple input signals",
        "the main difference mux decoder mux multiple inputs one output, decoder one input multiple outputs mux used select one several input signals send output, decoder used interpret input signal produce several output signals",
        "a decoder logic circuit converts binary code set signals used operate device decoder takes input signal, typically one coded binary number, produces one output possible value signal decoder enabled (en=1), and gates produces one minterm input signal s decoder enabled (en=0), decoder produces 0 bits",
        "how multi-metric optimization useful engineering multi-metric optimization useful engineering allows engineers identify important metrics balance design effectively according them multi-metric optimization also allows engineers get rid many metrics possible focus important ones",
        "a decoder device converts coded signals usable information decoders used variety applications, error detection correction",
        "a decoder similar mux allows one digital signal select several others forwarded output decoder one input multiple outputs, mux multiple inputs one output decoder thought special case mux",
        "a decoder logic device converts binary information form one code another, usually natural binary code multiplexer device selects one several analog digital input signals forwards selected input single output line",
        "a priority encoder type encoder assigns priority certain input signals used determine input signal given priority multiple input signals present",
        "a priority encoder type encoder assigns priority certain input signals priority encoder takes signal produces output signal indicates input signal highest priority output signal typically binary number used select one input signals",
        "a decoder logic circuit converts signals one form another binary form, decoder used convert binary number decimal number",
        "a priority encoder circuit takes number input signals, outputs code represents highest priority input signal output code usually binary number",
        "a mux logic block allows us use one digital signal select several others forwarded output decoder logic block converts binary code set signals",
        "the decoder generates release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "what significance demorgan's law demorgan's law popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "the output or gate 1 signal f 1 f 1 state fsm s_0s_1s_2=001 s_0s_1s_2=011",
        "the vending machine uses sensors detect coin inserted first sensor positioned dime pass beneath it, second sensor positioned coins pass front it signal second sensor used clock fsm, signal first sensor indicates whether coin dime quarter",
        "the vending machine releases item using decoder generate three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the vending machine knows purchase requested user pushes one item selection buttons causes priority encoder produce signal p indicating user trying make purchase",
        "the input fsm reset button r, four buttons b_f, b_x, b_g, b_c fsm produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs",
        "the output fsm sequence red, yellow, green lights alternate two roads duration state determined signal f f 0, timer set state changes f 1, timer set state changes light one roads green",
        "the priority encoder used determine item user wants purchase, generate signal indicating user trying make purchase output priority encoder used select value one price registers, subtracted current number nickels stored register purchase successful, price subtracted number nickels item released",
        "the inputs fsm states two roads, timer, signal f",
        "the signal f 1 timer reaches 0 state changes",
        "the state fsm split two pieces: {3-bit} register {6-bit} timer timer simply binary counter counts downward produces output z=1 reaches 0 notice register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle we thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the fsm shows yellow light showing red light setting timer specific value state fsm changes value set signal f, calculated bottom fsm logic diagram",
        "the signal f used set timer certain conditions particular, used set timer state changes",
        "the stoplight controller 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the signal f allows timer set conditions, addition state changes allows flexibility duration state",
        "starting human-based design process typically results design efficient effective one mapped high-level programming language human designers easily optimize design specific metrics, power consumption performance additionally, human designers easily impose constraints design, limits chip area minimum performance, order guide design process",
        "mapping bits gates means design circuit performs operation single bit passes necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "the control structure code maps high-level fsm design breaking program simple steps mapping step state fsm number states fsm depend number steps program",
        "the two approaches fsm design state-transition table state diagram state-transition table lists possible states system in, state diagram shows sequence states system goes through state-transition table compact easier use comparing functions, state diagram intuitive easier understand",
        "the purpose notes introduce important abstraction logic design, use abstraction design ripple-carry adder ripple-carry adder adder adds single bit passes necessary information another copy itself design less efficient designs optimized specific purpose, simplicity approach makes tradeoff interesting one",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "the control structure code maps high-level fsm design breaking program simple steps, one step flow chart may sometimes require one state fsm similarly, one fsm state may able implement several steps flow chart, steps performed simultaneously",
        "one design fsm executes simple pieces flow chart breaking program smaller steps mapping step state fsm one also use registers counters implement variables program, use comparator implement test statement",
        "the idx variable used keep track number operations logic expression metric used estimate number transistors needed design, turn estimate area required design",
        "the flow chart represents steps taken designing new product first step think carefully metrics possible interest second step get rid many metrics possible third step identify metrics practical impact current technology fourth step set threshold values metrics simplify reasoning them fifth step eliminate redundant metrics sixth step calculate linear sums reduce count metrics seventh step make use notion pareto optimality"
    ],
    "17": [
        "the third step design process identify metrics practical impact current technology, set threshold values metrics simplify reasoning them, eliminate redundant metrics, calculate linear sums reduce count metrics, and, finally, make use notion pareto optimality",
        "the third step design process evaluate design using multiple metrics includes identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "the transition diagram two-bit gray code counter loop counter moving one state next cycle state diagram marked internal state value s_1s_0 (before ``/'') output z_1z_0 (after ``/''), always equal counter",
        "the implementation gray code counter developed first filling k-maps next-state values, deriving algebraic expressions next-state logic used develop implementation",
        "the inputs counter coins inserted machine machine track value coins terms nickels reject coins inserted would cause value exceed maximum value machine track",
        "the timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle states thus act like counter",
        "a gray code counter type counter cycles possible bit patterns certain length states transition diagram gray code counter form loop, counter moving one state next cycle state diagram marked internal state value output value, always equal counter",
        "a gray code counter used applications digital value must changed incrementally least number steps gray code counter changes one bit time, minimizes number digital values must changed",
        "a gray code counter designed first creating transition diagram shows states outputs counter next, next-state logic developed creating k-maps next-state values deriving algebraic expressions finally, next-state logic implemented diagram",
        "the internal state value third bit gray code counter s_2s_1s_0=001 hold=1, next-state logic s_1^+ s_0^+ reduces s_1^+=s_1 s_0^+=s_0; words, counter stops counting simply stays current state hold=0, equations become s_1^+=s_0 s_0^+={{s_1}}, produces repeating sequence s_1s_0 00, 01, 11, 10, desired",
        "the next state value s2 0 timer set state changes, find duration state analyzing muxes bottom mux selects s_2=0, selects output top mux s_2=1",
        "the next state value s1 1 value s1 determined value s0, value s0 1",
        "the next state value s0 0 timer set state changes, find duration state analyzing muxes bottom mux selects s_2=0, selects output top mux s_2=1 top mux selects b s_0=1, selects c s_0=0",
        "the fully-specified transition diagram three-bit gray code counter follows: the states counter form loop, counter moving one state next cycle each state diagram marked internal state value s_2s_1s_0 (before \" / \") output z_2z_1z_0 (after \" / \") based transition diagram, next-state values s_2^+, s_1^+, s_0^+ filled shown",
        "the next-state values three-bit gray code counter follows: s_2^+=0, s_1^+=s_0, s_0^+={{s_1}}",
        "the vertical lines carrying current state values inverses back next state logic inputs ordered left right (on left side figure) {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2",
        "the purpose vertical lines carrying current state values inverses back next state logic inputs ensure state fsm always consistent necessary safety reasons, fsm must always ensure lights one roads red times",
        "the next-state values s_2, s_1, s_0 given table right states act like counter, examining connections, derive equations next state draw transition diagram six states loop defined next-state logic, two remaining states converging loop single cycle",
        "yes, choose use counter's internal state directly output values colors need produce outputs unique bit patterns using counter's internal state directly output values, simplify design",
        "a karnaugh map graphical representation boolean function helps simplify function map consists grid squares, corresponds possible combination input values map used find groups product terms implicants function",
        "the color mapping three-bit rgb encoding system colors produced unique bit patterns states form loop, marked internal state value s_2s_1s_0 output rgb",
        "the next-state values s_2, s_1, s_0 1",
        "there four halted states: halt a, halt b, halt c, halt d states, counter retains current value user presses \"go\" button",
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "the output behavior add3 procedure takes three integers arguments, adds together, returns sum procedure called constants 10, 20, 30, result printed calling convention, call made, r0 must contain value 10, r1 value 20, r2 value 30",
        "one important reason consider possible input conditions possible states help ensure design correct example, design ever receives input values within certain range, possible design actually correct input values considering possible input conditions help catch errors like this another reason consider possible input conditions help optimize design example, design ever receives input values within certain range, possible simplify design make efficient considering possible input conditions help identify opportunities optimization",
        "hold = h + s_2 when counter halt state s_2=1, hold = 1 counter stop (move halted state without changing value) h true, halted states, s_2=1, counter stops (stays halted state) h+ true",
        "the value s_2 counter count state hold=0 undefined because, passage states, overflow occurs either operands negative operands positive operands negative, resulting sum equal c however, operands positive, resulting sum less c thus, impossible determine value s_2 without knowing values operands",
        "s_2 1 counter halt state hold=1 s_2=1, counter halted, hold=1, counter retain current value",
        "the value s_1s_0 counter count state hold=1 01",
        "the value hold counter counting 0 value hold counter halted 1",
        "the value hold counter halted value last input given machine",
        "the value hold determines whether counter counts determining whether counter hold current value (stop counting) ``halt'' button pressed counter already halted ``go'' button pressed",
        "the states fsm act like counter, value fsm set whenever state changes timer set state changes, duration state determined value timer fsm also set conditions, signal f calculated",
        "tri-state buffers used provide logical disconnection tri-state buffer output logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "one build memories using logic creating tri-state buffer logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "a tri-state buffer type digital logic device used either connect disconnect signal line power source ground achieved using two transistors, one connect signal line power source, connect signal line ground buffer enabled, transistors turned on, signal line connected either power source ground, depending value input signal buffer disabled, transistors turned off, effectively disconnecting signal line power source ground",
        "one builds memories (static rams) using logic connecting dual-inverter loop opposing bit lines transistors controlled select line select high, transistors connect inverter loop bit lines writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "a tri-state buffer logic circuit used disconnect output logic circuit achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "data elements computer memory stored either static random access memory (sram) dynamic random access memory (dram) sram uses active logic form two-inverter loop maintain stored values, dram uses charged capacitor store bit",
        "sram cells store data using dual-inverter loop writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "a tri-state buffer achieves logical disconnection using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "a tri-state buffer type digital logic circuit used either connect disconnect signal line power supply ground done using two transistors, one connect signal line power supply, connect signal line ground buffer enabled, transistors turned on, signal line connected either power supply ground, depending value input signal buffer disabled, transistors turned off, signal line effectively disconnected power supply ground",
        "a tri-state buffer used create electrical connection tri-state buffer output logical disconnection achieved using outer transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "a dram cell stores bit using charged capacitor charge capacitor drains time must replaced order maintain stored value",
        "a input operand and function and function evaluates 1 input operands equal 1 input operand or function or function evaluates 1 input operand equal 1",
        "the device uses sensors generate clock signal alternating 0 1 regular period clock 0, one set latches holds bit values fixed, combinational logic uses latches inputs produce bits copied second set latches clock 1, second set latches stops storing data inputs retains bit values order drive combinational logic, results copied third set latches",
        "the output depend input function and evaluate 1 input values 1 input value 0, function evaluate 0",
        "the 'quarter' state refers fact addition unit 4-bit examples closed addition means value n, easily find two 4-bit unsigned numbers that, added together, cannot represented 4-bit unsigned number n=4, example, add 12 (1100) 6 (0110) obtain 18 since 18 outside range [0,2^4-1] representable using 4-bit unsigned representation, representation breaks try represent sum using representation",
        "our machine accept pennies, let's fsm keep track much money inserted multiple 5 cents (one nickel) table right shows five types coins, value dollars, value terms nickels expensive item machine might cost dollar two, fsm must track least 20 40 nickels value let's decide use six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "the k-map represents domain function form hypercube hypercube divided regions, corresponds product literals function evaluated point hypercube, product literals implicant function function evaluates 1 point",
        "the s_2 value specifies number inputs must satisfied order output 1 cuts number possible choices four two case two possible combinations inputs satisfy condition",
        "the outputs needed observe state check output logic values state register timer outputs used determine duration state order states occur",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "the input sequence initialization is: 1) value r0 10, 2) value r1 20, 3) value r2 30",
        "the input sequence testing follows: first, user prompted input two integers decimal form, converted 2's complement stored variables 'a' 'b' next, user prompted input ascii character, value hexadecimal, double-precision floating-point number, stored variables 'c', 'u', 'd', respectively finally, user prompted input two real numbers decimal form, converted single- double-precision floating-point numbers stored variables 'f' 'd', respectively",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "one could design game controller logic puzzle would buttons corresponding different operations could performed logic puzzle example, could button add new element puzzle, button remove element puzzle, button change value element puzzle game controller could also display would show current state puzzle player's progress",
        "what ideas used reduce number metrics some ideas used reduce number metrics include: identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "the fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the state fsm split two pieces: 3-bit register 6-bit timer timer simply binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "1 three ranges possible measurement values given metric the three ranges possible measurement values given metric values equivalently useful, ordered interesting respect one another, impossible use practice",
        "the transitions states well-defined fsm timer counts produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the numeric representation money held used track value money inserted machine allows machine keep track much money inserted reject coins value high",
        "the fsm needs keep track loop index, current minimum value, progress serial comparator",
        "the output fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "what three ranges given metric the first range measurement values equivalently useful second range possible values ordered interesting respect one another values third range impossible use practice",
        "a decoder type logic circuit takes input signal produces one output possible value signal decoder similar multiplexer number inputs outputs however, decoder one input signal, multiplexer multiple input signals",
        "a decoder logic circuit converts binary code set signals used operate device decoder takes input signal, typically one coded binary number, produces one output possible value signal decoder enabled (en=1), and gates produces one minterm input signal s decoder enabled (en=0), decoder produces 0 bits",
        "the value register price1 price first item machine, determined owner machine",
        "the value register price2 number nickels machine multiplied price item question way, machine keep track much money inserted much owed item",
        "the value register price3 price third item machine, determined owner machine",
        "the value register n corresponds number nickels inserted machine user inserts quarter, machine transition state n+5, indicating 5 nickels inserted user attempts purchase item without inserting enough money first, machine remain state reject request",
        "the value register equivalence class sum two 4-bit numbers case, sum 18, equivalent 2 (mod 16)",
        "the value register price2 number nickels inserted machine",
        "the value v 10 cents dime inserted dime worth 10 cents, machine tracks value money inserted terms nickels therefore, dime inserted, machine records 2 nickels",
        "the and gate left used determine input values 1 input values 1, output and gate 1 input values 0, output and gate 0",
        "the vending machine knows much item costs owner machine sets prices dynamically machine keeps track much money inserted multiple 5 cents (one nickel) expensive item machine might cost dollar two, fsm must track least 20 40 nickels value",
        "the priority encoder used determine item user wants purchase, generate signal indicating user trying make purchase output priority encoder used select value one price registers, subtracted current number nickels stored register purchase successful, price subtracted number nickels item released",
        "the state fsm split two pieces: {3-bit} register {6-bit} timer timer simply binary counter counts downward produces output z=1 reaches 0 notice register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle we thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the fsm shows yellow light showing red light setting timer specific value state fsm changes value set signal f, calculated bottom fsm logic diagram",
        "the fsm alternates green lights two roads setting timer different value state fsm changes causes lights change color cycle-by-cycle basis, green light alternating two roads",
        "the fsm initialized state \"000\" order ensure lights one roads red times timer set \"a\" order maintain new value number cycles",
        "the stoplight controller 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the stoplight controller alternates green lights two roads changing value register s value changed timer reaches 0, timer set enters new state duration state determined value register s",
        "the flow chart represents steps taken designing new product first step think carefully metrics possible interest second step get rid many metrics possible third step identify metrics practical impact current technology fourth step set threshold values metrics simplify reasoning them fifth step eliminate redundant metrics sixth step calculate linear sums reduce count metrics seventh step make use notion pareto optimality",
        "there three variables used code, x, y, z value x initialized 42, value initialized x value z initialized"
    ],
    "18": [
        "the third step design process identify metrics practical impact current technology, set threshold values metrics simplify reasoning them, eliminate redundant metrics, calculate linear sums reduce count metrics, and, finally, make use notion pareto optimality",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "abstraction process simplifying complex system identifying important aspects system ignoring rest context implementation, abstraction used simplify design identifying important features design ignoring rest make design manageable easier understand",
        "there reasons important make implicit assumptions clear design process first, assumptions made clear, lead confusion misunderstanding among team members working design second, making assumptions explicit help ensure everyone page working towards goal finally, explicit assumptions help prevent errors mistakes design process",
        "there benefits using gray code counter first, easy design implement second, easy check correctness logic third, easy read understand logic",
        "one way reduce design complexity make use common algebraic terms sub-expressions help simplify design make easier understand another way reduce complexity use demorgan's laws simplify expression help reduce number gates needed make design efficient",
        "it important reasonable order designing logic diagram help simplify design process make easier understand function logic diagram additionally, help ensure logic diagram compatible products may used system",
        "the counter's implementation diagram simplifies understanding diagram breaking smaller, manageable pieces this, easier see various parts diagram interact other additionally, makes easier identify potential problems areas improvement",
        "a fully-specified transition diagram diagram specifies states system in, well transitions states allows clear understanding behavior system",
        "the next-state logic equations functions describe relationship current state system next state system functions represented either sop pos form demorgan's law used simplify functions replacing or gates nand gates, and gates nor gates",
        "the purpose adding and gates input create logic function efficient terms area power done reducing number variables expression",
        "an abstract model simplified representation system, typically used aid understanding system context logic optimization, abstract model used help understand tradeoffs different logic expressions",
        "there disadvantages using fsm first, fsm designed carefully, hard understand debug second, fsm use resources simpler design, state machine finally, fsm difficult change extend simpler design",
        "one reason often best start selecting representation makes sense human easier understand work with additionally, starting representation makes sense human help ensure final product also easy understand use",
        "the number state bits affects design complexity determines number possible states fsm in larger number state bits means possible states design must able handle them",
        "one reason important start representation makes sense human humans must supply logic functions interest, must program acceptable transformations equivalent forms second reason complexity problem good way introduce real engineering finally, contextual information help develop better understanding finite state machines higher-level abstractions form core digital systems still defined directly humans today",
        "the value s_2 counter count state hold=0 undefined because, passage states, overflow occurs either operands negative operands positive operands negative, resulting sum equal c however, operands positive, resulting sum less c thus, impossible determine value s_2 without knowing values operands",
        "the similarity equations s_1^+s_0^+ equations {2-to-1} mux used represent logic function two-level logic popular way expressing logic functions simple map expression cmos gates using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate",
        "a good state representation easy understand able capture relevant information problem bad state representation may difficult understand may able capture relevant information",
        "the common types memory used digital systems sram dram sram used high-speed applications processor caches embedded designs dram used applications less demanding speed requirements",
        "the two common types memory used digital systems static random access memory (sram) dynamic random access memory (dram) sram used high-speed applications processor caches embedded designs, dram used applications less demanding speed requirements, main memory computers",
        "one way combine memory chips use multiple chips implement larger memory done using one address bit drive decoder determines two chips active another way combine memory chips use multiple chips implement wider memory done routing external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way combine memory chips use create larger memory done using one address bit drive decoder determines two chips active address bits, well external data inputs write enable signal, delivered memories external data outputs also connected memories another way combine memory chips use create wider memory case, chips either active inactive time, external address, write enable, chip select inputs routed chips however, data inputs outputs separate, chip handling different part data",
        "random access memories (rams) memories support two operations: writing data element, reading data element memories also volatile, means data held memory erased electrical power turned fails static random access memory (sram) used high-speed applications processor caches embedded designs",
        "a ram type memory used store data volatile memory, means data stored memory erased power turned fails ram random access memory, means time required access element memory independent element accessed",
        "data elements computer memory stored either static random access memory (sram) dynamic random access memory (dram) sram uses active logic form two-inverter loop maintain stored values, dram uses charged capacitor store bit",
        "a random access memory (ram) type memory allows data stored retrieved order ram volatile, means loses data power supply removed two types ram: static ram (sram) dynamic ram (dram)",
        "static random access memory used high-speed applications processor caches embedded designs sram bit density significantly lower dram bit density, applications less demanding speed requirements use dram",
        "multiple chips used construct wider memories connecting address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used construct larger memories using multiple chips connecting external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way construct wider memory use multiple chips connect data inputs outputs chip separately way, left chip handles high n bits input writes produces high n bits output reads, right chip handles low n bits input produces low n bits output",
        "the lab simulates two-level logic used map expression cmos gates also shows graphically manipulate expressions understand gate diagrams",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "a input operand and function and function evaluates 1 input operands equal 1 input operand or function or function evaluates 1 input operand equal 1",
        "the output depend input function and evaluate 1 input values 1 input value 0, function evaluate 0",
        "the rejectd rejectq states used handle user mistakes user enters second dime dime state, fsm reject coin rejectd state rejects dime (a=0) continues wait quarter (p=0) rejectq state used handle user inserts one quarter",
        "the meaning assigned bit patterns makes easier understand behavior fsm example, paid state, last coin inserted may either type, type all, since decided start fsm state well however, four states, meanings provide clear understanding state fsm",
        "prof jones assigns bit patterns way makes easy humans understand meaning states example, paid state, last coin inserted may either type, type all, since fsm starts state however, four states, meanings clear easy apply",
        "this particular example tricky requires reader understand concept bit-sliced addition order understand passage furthermore, passage provide clear explanation bit-sliced adder circuit works, making difficult reader follow along",
        "the design easy test two-level logic design means inputs outputs easily tested nand nor gate additionally, design easy test sop expression means inputs outputs easily tested or gate",
        "a digital fsm model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called { transition rule} fsm comprises five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "passage - compact approaches comparing functions, solutions subject later class (such ece 462) {two-level logic} { two-level logic} popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams begin one demorgan's laws, illustrate algebraically graphically: c = b+a = {file=part2/figs/demorgan-nandeps,width=095in} let's say function expressed sop form, z=abc+de+fghj diagram left shows function constructed three and gates or gate using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate invert point along wire, slide bubble wire output first column",
        "why two-level logic popular two-level logic popular simple map expressions cmos gates additionally, easy understand gate diagrams",
        "what difference sop pos sop (sum products) boolean algebra expression or anded terms, pos (product sums) expression and ored terms",
        "a decoder logic circuit converts binary code set signals used operate device decoder takes input signal, typically one coded binary number, produces one output possible value signal decoder enabled (en=1), and gates produces one minterm input signal s decoder enabled (en=0), decoder produces 0 bits",
        "a decoder used context simplify expression logic function using decoder, function expressed two-level logic function, easier understand manipulate",
        "what significance demorgan's law demorgan's law popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "what difference two-level logic forms logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "passage - two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams question - what two levels two-level logic",
        "the and gate left used determine input values 1 input values 1, output and gate 1 input values 0, output and gate 0",
        "the fsm handles multiple input events single clock cycle first storing input events queue fsm ready process input event, dequeues event queue processes it",
        "the two approaches fsm design state-transition table state diagram state-transition table lists possible states system in, state diagram shows sequence states system goes through state-transition table compact easier use comparing functions, state diagram intuitive easier understand",
        "a finite state machine model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called transition rule",
        "the first examples passage two-level logic, demorgan's law, sop form two-level logic popular way expressing logic functions, demorgan's law way simplify expressions sop form way representing logic function",
        "the design process involves manipulation logic expressions order optimize specific metrics, cost, power, performance today, manipulation performed almost entirely computers, human engineers supplying logic functions interest imposing constraints process",
        "an fsm must initialized ensure starts known state allows fsm function correctly avoid potential problems could arise unknown starting state",
        "one important reason compatibility components digital system helps ensure system function correctly components compatible, system may work correctly, may work all additionally, compatibility among components help reduce cost manufacturing system, well cost maintaining repairing system",
        "a gray code counter device used count number operations logic expression device works counting number variables expression adding number operations device used optimize logic expressions reducing number operations needed implement logic function",
        "the output counter number successful conversions made scanf function",
        "from passage, inferred logical completeness necessarily help efficient design logic functions words, single boolean logic function expressed many different ways therefore, important engineers learn develop efficient implementation function, well determine whether two logic expressions identical without actually writing truth tables",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills students learn coming months",
        "a karnaugh map graphical representation boolean function helps simplify function map consists grid squares, corresponds possible combination input values map used find groups product terms implicants function",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways, learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills start learn coming months",
        "there several benefits using fsm one benefit fsm used implement wide range logic functions another benefit fsm used construct larger memories multiple smaller memories finally, fsm used reduce number pins needed chip",
        "the ``halt'' button ice cream dispenser stops machine dispensing ice cream useful user wants stop machine dispensing ice cream, machine malfunctioning needs stopped",
        "if use gray code, would compare two expressions determine whether represent logic function would test logical equivalence, important part hardware design however, tools today provide help problem, necessary use gray code",
        "the k-map represents domain function form hypercube hypercube divided regions, corresponds product literals function evaluated point hypercube, product literals implicant function function evaluates 1 point",
        "we test circuit build lab see correctly implements fsm outlined notes this, input known sequence 0s 1s see circuit outputs correct responses does, confident circuit functioning correctly",
        "scan-based testing type testing used test functionality design type testing typically used test digital designs",
        "what reason popularity two-level logic the reason popularity two-level logic simple way express logic functions two-level logic popular way expressing logic functions simple way express logic functions",
        "the purpose process find best formulation specific logic function given metric done using heuristic approaches find solutions strike balance various metrics cost, power, performance",
        "1 difference two-level three-level logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic three-level logic way expressing logic functions using three levels three levels refer number functions input passes reach output, sop pos forms examples three-level logic",
        "the min variable heuristic metric used estimate time needed compute function metric based longest chain operations performed instance variable rationale metric gate outputs change instantaneously inputs change",
        "what reason popularity two-level logic the popularity two-level logic due fact simple way express logic functions additionally, two-level logic easy map cmos gates"
    ],
    "19": [
        "the design process digital fsm includes six steps: developing abstract model, specifying i/o behavior, completing specification, choosing state representation, calculating logic expressions, implementing flip-flops gates",
        "the first examples passage two-level logic, demorgan's law, sop form two-level logic popular way expressing logic functions, demorgan's law way simplify expressions sop form way representing logic function",
        "an fsm must initialized ensure starts known state avoid undefined behavior without initialization, fsm may produce incorrect results may work all",
        "a multiplexer digital logic block allows one digital signal select several others forwarded output simplest form multiplexer 2-to-1 multiplexer, two inputs left one top top input allows us choose left inputs forwarded output",
        "the design process digital fsm typically consists six steps: (1) developing abstract model, (2) specifying i/o behavior, (3) completing specification, (4) choosing state representation, (5) calculating logic expressions, (6) implementing flip-flops gates",
        "the design process involves manipulation logic expressions order optimize specific metrics, cost, power, performance today, manipulation performed almost entirely computers, human engineers supplying logic functions interest imposing constraints process",
        "an fsm must initialized ensure starts known state allows fsm function correctly avoid potential problems could arise unknown starting state",
        "a multiplexer device allows multiple signals routed onto single channel done selecting one several input signals connecting output multiplexers used variety applications, telecommunications computer networking",
        "the design process counter number states power two choose representation states makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "the first step design process develop abstract model model translation human language description model states desired behavior model particularly thorough exact stage",
        "the fourth step design process choose particular design set possible designs making choice, engineers typically consider variety factors, including cost, performance, manufacturability, reliability",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "the first step design process develop abstract model model captures intent description particularly thorough exact",
        "the fourth step design process choose particular design set possible designs choice made based number factors, including objectives design, constraints problem, preferences designer",
        "abstraction process simplifying complex system identifying important aspects system ignoring rest context implementation, abstraction used simplify design identifying important features design ignoring rest make design manageable easier understand",
        "there reasons important make implicit assumptions clear design process first, assumptions made clear, lead confusion misunderstanding among team members working design second, making assumptions explicit help ensure everyone page working towards goal finally, explicit assumptions help prevent errors mistakes design process",
        "the choice state representation affects implementation fsm terms number gates inverters required, well delay overall design serial comparator design based 2-bit slice variant, example, requires 24 gates 10 inverters, much larger earlier serial design terms gate delays, however, new design identical, meaning comparisons finished half time realistic area timing metrics show slightly difference two designs differences dominate results design carefully considered",
        "the choice fsm's input output behavior affects design process determining set possible states set possible outputs set possible states determined set possible inputs, set possible outputs determined set possible outputs",
        "one important reason compatibility components digital system helps ensure system function correctly components compatible, system may work correctly, may work all additionally, compatibility among components help reduce cost manufacturing system, well cost maintaining repairing system",
        "a gray code sequence n-bit patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit construct gray code recursively follows: (n+1)-bit gray code, write sequence n-bit gray code, add 0 front patterns sequence, append second copy n-bit gray code reverse order, put 1 front patterns second copy",
        "a gray code counter device used count number operations logic expression device works counting number variables expression adding number operations device used optimize logic expressions reducing number operations needed implement logic function",
        "the transition diagram two-bit gray code counter loop counter moving one state next cycle state diagram marked internal state value s_1s_0 (before ``/'') output z_1z_0 (after ``/''), always equal counter",
        "a gray code counter type digital counter used count number clock pulses named frank gray, invented code 1953 main advantage gray code counter types counters less likely produce errors counting",
        "the timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle states thus act like counter",
        "a gray code counter type counter cycles possible bit patterns certain length states transition diagram gray code counter form loop, counter moving one state next cycle state diagram marked internal state value output value, always equal counter",
        "there benefits using gray code counter first, easy design implement second, easy check correctness logic third, easy read understand logic",
        "the internal state value third bit gray code counter s_2s_1s_0=001 hold=1, next-state logic s_1^+ s_0^+ reduces s_1^+=s_1 s_0^+=s_0; words, counter stops counting simply stays current state hold=0, equations become s_1^+=s_0 s_0^+={{s_1}}, produces repeating sequence s_1s_0 00, 01, 11, 10, desired",
        "the fully-specified transition diagram three-bit gray code counter follows: the states counter form loop, counter moving one state next cycle each state diagram marked internal state value s_2s_1s_0 (before \" / \") output z_2z_1z_0 (after \" / \") based transition diagram, next-state values s_2^+, s_1^+, s_0^+ filled shown",
        "the implementation diagram three-bit gray code counter logic diagram shows inputs, outputs, next-state logic counter diagram ordered left right {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2, makes easy read check correctness",
        "the vertical lines carrying current state values inverses back next state logic inputs ordered left right (on left side figure) {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2",
        "one way reduce design complexity make use common algebraic terms sub-expressions help simplify design make easier understand another way reduce complexity use demorgan's laws simplify expression help reduce number gates needed make design efficient",
        "it important reasonable order designing logic diagram help simplify design process make easier understand function logic diagram additionally, help ensure logic diagram compatible products may used system",
        "the color mapping three-bit rgb encoding system system colors represented combination red, green, blue light color mapping system shown right imagine charged creating counter drive light sequence colors",
        "from passage, inferred logical completeness necessarily help efficient design logic functions words, single boolean logic function expressed many different ways therefore, important engineers learn develop efficient implementation function, well determine whether two logic expressions identical without actually writing truth tables",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills students learn coming months",
        "yes, choose use counter's internal state directly output values colors need produce outputs unique bit patterns using counter's internal state directly output values, simplify design",
        "a fully-specified transition diagram diagram specifies states system in, well transitions states allows clear understanding behavior system",
        "a karnaugh map graphical representation boolean function helps simplify function map consists grid squares, corresponds possible combination input values map used find groups product terms implicants function",
        "the next-state logic equations functions describe relationship current state system next state system functions represented either sop pos form demorgan's law used simplify functions replacing or gates nand gates, and gates nor gates",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways, learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills start learn coming months",
        "the color mapping three-bit rgb encoding system colors produced unique bit patterns states form loop, marked internal state value s_2s_1s_0 output rgb",
        "the transition diagram color sequencer loop six states, two remaining states converging loop single cycle lights red states, necessary safety timer set state changes, duration state calculated analyzing muxes",
        "the initial state three flip-flops implementation 0s 1s use init input choose normal operation (init=0) fsm forcing fsm next state given i_2i_1i_0 (when init=1)",
        "the timer set 0, state fsm changed next state sequence new state fsm determines duration next state, timer set accordingly",
        "the passage states power consumption important metric engineers must take account designs however, cases, desktop high-end server processors, metrics (such performance) may important always want operate edge interesting range could going wrong, engineers taking power consumption account much be",
        "the initial state three flip-flops implementation 0 state explicit mechanism initialization forces flip-flop 0 state alternatively, could add extra logic design would allow us force fsm specific state next cycle",
        "the first approach use flip-flop design add single bit pass necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "interrupts powerful exceptions occur asynchronously respect program means processor check interrupts instructions, allows flexibility design processor",
        "the initial state three flip-flops unknown unless explicit mechanism initialization initialization work two ways first approach makes use flip-flop design know, flip-flop built pair latches, make use internal reset lines latches force flip-flop 0 state (or 1 state) using additional input alternatively, add extra logic design",
        "one way make use internal reset lines latches force flip-flop 0 state done connecting reset lines latches 0 voltage source",
        "the passage discusses design serial comparator using bit-sliced approach approach leads design 24 gates 10 inverters, much larger earlier serial design however, new design identical terms gate delays, meaning comparison finished half time",
        "a next-state table lists possible states fsm in, well inputs outputs state transition diagram shows order states visited, based inputs outputs",
        "there several benefits using fsm one benefit fsm used implement wide range logic functions another benefit fsm used construct larger memories multiple smaller memories finally, fsm used reduce number pins needed chip",
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "the input behavior machine based type coin inserted selection item purchase user inserts coin nickel, machine reject coin remain state user inserts nickel, machine transition next state accept coin user selects item purchase, machine release item user inserted enough money otherwise, machine remain state",
        "the output behavior add3 procedure takes three integers arguments, adds together, returns sum procedure called constants 10, 20, 30, result printed calling convention, call made, r0 must contain value 10, r1 value 20, r2 value 30",
        "the \"go\" button initiates system call causes processor enter kernel mode execute instructions associated system call instructions part operating system used perform desired action, printing character console",
        "there two control buttons: one east-west road one north-south road",
        "the states transition diagram represent different colors stoplight first two states red, followed yellow, green last two states red",
        "system calls initiated trap instruction, system calls also known traps many architectures, system call places processor privileged kernel mode, instructions implement call considered part operating system",
        "the design continues choosing state representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "if use gray code, would compare two expressions determine whether represent logic function would test logical equivalence, important part hardware design however, tools today provide help problem, necessary use gray code",
        "there explicit answer question passage however, based information given, seems user presses ``halt'' button state { count a}, system reset state { halt a}",
        "if user presses \"go\" button (hg=01), ice cream cup overflow outputs c_l=11 c_m=10, means dispenser release full serving flavor, two servings total",
        "if user presses buttons (hg=11), ice cream cup overflows outputs c_l=11 c_m=10, dispenser releases full serving flavor, two servings total",
        "if \"halt\" button pressed (hg=10), logic outputs c_l=00 c_m=00, dispenser gives ice cream buttons pressed (hg=11), outputs c_l=11 c_m=11, dispenser gives two servings flavor, four servings total",
        "one important reason consider possible input conditions possible states help ensure design correct example, design ever receives input values within certain range, possible design actually correct input values considering possible input conditions help catch errors like this another reason consider possible input conditions help optimize design example, design ever receives input values within certain range, possible simplify design make efficient considering possible input conditions help identify opportunities optimization",
        "a transition diagram help process helping identify important metrics helping balance design effectively according metrics",
        "the state table form specification make missing parts specification obvious showing different states system transitions states help identify parts specification missing needs added order complete specification",
        "the fsm needs least three states order eight states three possible items purchased, item purchased one two ways (with without enough money)",
        "the right strategy start selecting representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "one reason often best start selecting representation makes sense human easier understand work with additionally, starting representation makes sense human help ensure final product also easy understand use",
        "abstraction powerful tool help simplify complex problems selecting state representation, abstraction help identify important aspects problem ignore irrelevant details make easier find solution effective efficient",
        "abstraction selecting state representation lead better design allowing engineer focus important aspects problem ignoring details important help simplify problem make easier find solution",
        "abstraction important selecting state representation allows designer select representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "one reason important start representation makes sense human humans must supply logic functions interest, must program acceptable transformations equivalent forms second reason complexity problem good way introduce real engineering finally, contextual information help develop better understanding finite state machines higher-level abstractions form core digital systems still defined directly humans today",
        "the hold variable used save energy chip finishes work, turn off, saving energy variable allows chip turn finished, saving energy",
        "the similarity equations s_1^+s_0^+ equations {2-to-1} mux used represent logic function two-level logic popular way expressing logic functions simple map expression cmos gates using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate",
        "there several benefits good state representation first, help reduce number pins needed chip second, improve density memory chip third, improve speed memory chip",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor performance cases, bad state representation also lead increased costs fabrication testing",
        "one way verify implementation correct test known set inputs compare results expected results results match, implementation likely correct another way verify implementation examine code look errors done manually help software tool",
        "a good state representation easy understand able capture relevant information problem bad state representation may difficult understand may able capture relevant information",
        "a good state representation important help reduce number logic gates needed design, thus save chip area additionally, good state representation help improve performance design reducing number logic operations needed",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor power consumption cases, two metrics may strongly correlated, meaning design good one metrics frequently also good metric",
        "a bad state representation lead number problems, including wasted engineering effort, poor performance, even product cancellations",
        "a bad state representation fixed using code larger hamming distance enable system detect correct errors",
        "there best state representation fsm important factor representation complete, meaning states represented inputs accounted for considerations include size state space number inputs outputs",
        "a good state representation important help reduce number transistors needed design, thus save space energy additionally, help improve performance design making easier computer manipulate logic expressions",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context",
        "the common types memory used digital systems sram dram sram used high-speed applications processor caches embedded designs dram used applications less demanding speed requirements",
        "one build static rams using logic using tri-state buffers tri-state buffers used create larger memories using multiple chips wider memories also created using multiple chips",
        "tri-state buffers used provide logical disconnection tri-state buffer output logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "memory chips combined provide larger wider memories using multiple chips example, two 2-bit memories used implement 4-bit memory one address bits used drive decoder determines two chips active (cs=1) decoder enabled chip select signal larger memory, neither chip enabled external cs low, desired",
        "the two common types memory used digital systems static random access memory (sram) dynamic random access memory (dram) sram used high-speed applications processor caches embedded designs, dram used applications less demanding speed requirements, main memory computers",
        "one build memories using logic creating tri-state buffer logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "a tri-state buffer type digital logic device used either connect disconnect signal line power source ground achieved using two transistors, one connect signal line power source, connect signal line ground buffer enabled, transistors turned on, signal line connected either power source ground, depending value input signal buffer disabled, transistors turned off, effectively disconnecting signal line power source ground",
        "one way combine memory chips use multiple chips implement larger memory done using one address bit drive decoder determines two chips active another way combine memory chips use multiple chips implement wider memory done routing external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one builds memories (static rams) using logic connecting dual-inverter loop opposing bit lines transistors controlled select line select high, transistors connect inverter loop bit lines writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "a tri-state buffer logic circuit used disconnect output logic circuit achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "one way combine memory chips use create larger memory done using one address bit drive decoder determines two chips active address bits, well external data inputs write enable signal, delivered memories external data outputs also connected memories another way combine memory chips use create wider memory case, chips either active inactive time, external address, write enable, chip select inputs routed chips however, data inputs outputs separate, chip handling different part data",
        "dynamic rams memories use charged capacitor store bit charge drains time must replaced, giving rise qualifier ``dynamic'' dram also unavailable recharging capacitors, problem applications stringent real-time needs",
        "random access memories (rams) memories support two operations: writing data element, reading data element memories also volatile, means data held memory erased electrical power turned fails static random access memory (sram) used high-speed applications processor caches embedded designs",
        "the addressability computer memory number bits stored element memory size elements memory vary single binary digit, bit, byte (8 bits) more typically, data elements larger byte referred words, size word depends context",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors, dram cell uses one transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "to write data memory element, external circuit sends signal memory indicating address element written data written sent memory, memory stores data element specified address",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context element memory assigned unique name, called address, allows external circuit identify particular element interest addresses unlike street addresses use send letter unlike street addresses, however, memory addresses usually little redundancy; possible combination bits address identifies distinct set bits memory",
        "a word context computer memory sequence bits represents unit data words represent numbers, characters, data types size word typically determined computer's word size, number bits computer process time",
        "non-volatile memories include magnetic optical storage media dvds, cd-roms, disks, tapes, capacitive storage media flash drives, programmable logic devices",
        "a ram type memory used store data volatile memory, means data stored memory erased power turned fails ram random access memory, means time required access element memory independent element accessed",
        "sram faster dram, dram denser (has bits per chip area) substantial part dram density due transistor count: typical sram cells use six transistors (two inverter, two connect inverters bit lines), dram cells use single transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "a computer memory storage device data two main types memory: sram dram sram faster expensive, dram slower cheaper dram commonly used main memory computers",
        "data elements computer memory stored either static random access memory (sram) dynamic random access memory (dram) sram uses active logic form two-inverter loop maintain stored values, dram uses charged capacitor store bit",
        "the addressability computer memory number bits stored element memory size elements memory vary single bit byte more typically, data elements larger byte referred words, size word depends context",
        "words computer memory stored bits, either 0 1 group bits makes byte, smallest unit data stored computer memory group bytes makes word, smallest unit data read written computer memory",
        "a random access memory (ram) type memory allows data stored retrieved order ram volatile, means loses data power supply removed two types ram: static ram (sram) dynamic ram (dram)",
        "static random access memory used high-speed applications processor caches embedded designs sram bit density significantly lower dram bit density, applications less demanding speed requirements use dram",
        "an sram cell flip-flop made two cross-coupled inverters output one inverter connected input other, vice versa power applied, sram cell one two stable states, represent 0 1 state cell changed applying correct sequence voltages inputs",
        "sram cells combined bit slice sharing bit lines analog read write logic bit slice figure thought 16-address, 1-bit-addressable memory (2^4b) cells bit slice share bit lines analog read write logic, appears right figure",
        "the main advantage sram dram speed sram faster dram need refresh memory cells often dram denser sram, store data given area",
        "sram cells store data using dual-inverter loop writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "a read operation performed sram cell first bringing bit line intermediate voltage level, raising select line allows capacitor either pull small amount charge bit line push small amount charge onto bit line resulting change voltage detected sense amplifier",
        "a write operation sram cell performed charging charging capacitor capacitor attached bit line transistor controlled select line select low, capacitor isolated holds charge however, select high write operation, logic driving bit line forces charge onto capacitor removes charge it",
        "sram type memory used computers made number transistors store data way easy computer access sram faster types memory, also expensive",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors (two inverter, two connect inverters bit lines), dram cell uses single transistor",
        "a sram cell organized flip-flop, one transistor one capacitor per bit capacitor stores data bit, transistor controls access bit",
        "sram cells combined bit slice sharing bit lines analog read write logic decoder sets one cell's select line high enable read write operation cell chip select input cs drives enable input decoder, none memory cells active chip select low (cs=0), exactly one memory cells active chip select high (cs=1)",
        "a write operation sram cell performed bringing bit line intermediate voltage level, raising select line, allows capacitor either pull small amount charge bit line push small amount charge onto bit line resulting change voltage detected sense amplifier end bit line",
        "the main benefit using tri-state buffer allows logical disconnection buffer output means multiple memories share output line without need additional multiplexers",
        "a tri-state buffer achieves logical disconnection using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "the decoder memory chip responsible translating memory address correct location memory chip necessary ensure correct data read written correct location memory chip",
        "multiple chips used construct wider memories connecting address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "a tri-state buffer type digital logic circuit used either connect disconnect signal line power supply ground done using two transistors, one connect signal line power supply, connect signal line ground buffer enabled, transistors turned on, signal line connected either power supply ground, depending value input signal buffer disabled, transistors turned off, signal line effectively disconnected power supply ground",
        "the benefit using tri-state buffer allows logical disconnection tri-state buffer output means output shared one memory without need additional multiplexers useful creating larger memories combining multiple chips",
        "tri-state buffers used construct larger memories using multiple chips connecting external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used construct wider memories connecting data inputs outputs multiple memories together allows output line shared one memory without need additional multiplexers",
        "a tri-state buffer digital circuit used either connect disconnect signal circuit buffer three states: high, low, high impedance high impedance state effectively disconnects signal circuit allows multiple memories share output line without need additional multiplexers",
        "a tri-state buffer used create electrical connection tri-state buffer output logical disconnection achieved using outer transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "tri-state buffers used reduce number pins needed chip combining inputs outputs example, data inputs outputs memory combined single set data wires, bidirectional signals reduces number pins needed still allowing amount data transferred",
        "one way construct wider memory use multiple chips connect data inputs outputs chip separately way, left chip handles high n bits input writes produces high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way construct larger memory use multiple chips one address bits drive decoder determines two chips active decoder enabled chip select signal larger memory way, neither chip enabled external cs low",
        "the main difference sram dram sram faster uses transistors, dram slower uses fewer transistors dram also denser sram, meaning bits stored given area",
        "a dram cell stores bit using charged capacitor charge capacitor drains time must replaced order maintain stored value",
        "a sense amplifier circuit used read data stored memory cell sense amplifier amplifies small signal memory cell converts digital signal read processor",
        "sdram type dram used main memory computers ddr4 sdram newer type dram faster sdram",
        "dram used storing data capacitor capacitor attached bit line transistor controlled select line select line low, capacitor isolated holds charge however, transistor's resistance finite, charge leaks onto bit line",
        "dram type memory uses capacitors store data row dram selected, cells row read written back, refreshes data cells dram said destructive reads read operation brings voltage capacitor closer intermediate voltage level, effectively destroys data cell",
        "the benefits using dram denser sram uses fewer transistors makes dram ideal applications size important speed",
        "there several disadvantages using dram first, dram slower sram second, dram less dense sram, requires chip area store amount data finally, dram cells complex sram cells, difficult design manufacture",
        "dram type memory slower sram denser (has bits per chip area) dram cells use single transistor, sram cells use six transistors dram designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor count",
        "dram type capacitive storage, bit stored charging charging capacitor capacitor attached bit line transistor controlled select line select line high, capacitor isolated holds charge however, transistor's resistance finite, charge leaks onto bit line charge also leaks substrate transistor constructed",
        "a dram cell refreshed reading contents writing back active logic process necessary avoid data loss due charge leakage capacitor",
        "a sense amplifier device used amplify signal sensor typically used amplify signal small sensor, pressure sensor, level read larger device, computer",
        "the ras signal indicates row component address available raising ras signal row destructively reads contents cells row, forcing cells rewritten effecting refresh row thus natural basis refresh cycle",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, problem solved",
        "the vending machine application fsm designed team engineers fsm designed control simple vending machine accepts us coins payment offers choice three items sale machine adjustable item prices, fsm needs keep track much money inserted order decide whether user purchase one items",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, servo held place, desired",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "prof chris schmitz prototyped constructed physical elements help ece shop designed vending machine application fsm, prof doug jones created wiki documentation altera quartus portions lab casey smith, head guru ece instructional labs, developed new debounce design made changes improve robustness",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab based lab earlier mentor graphics work prof herman prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "prof kindratenko helped scale design way made possible deliver 400 students entering ece every semester creating wiki documentation altera quartus portions lab also helped improve robustness lab identifying common failure modes making changes design",
        "the first optical sensor used detect presence chip chip present, sensor turns chip used chip present, sensor turns chip cannot used sensor used save energy turning chip needed",
        "the second optical sensor used detect chip finishes work chip turn save energy metric used guide process optimizing logic expressions balance struck different metrics involved",
        "if rise fall rising clock edge, processor would able recognize interrupts instructions would cause program terminate unexpectedly",
        "the device used turn save energy done using heuristic approaches find solutions strike balance different metrics, cost, power, performance human engineer impose constraints, limits chip area limits minimum performance, order guide process",
        "the signal indicates interrupt occurred interrupt could generated external device, disk drive keyboard, error program executed, undefined instruction attempt divide zero",
        "the significance rising edge signal second sensor indicates presence object field view sensor rising edge signal indicates sensor detected change intensity light receiving",
        "a input operand and function and function evaluates 1 input operands equal 1 input operand or function or function evaluates 1 input operand equal 1",
        "there two optical sensors positioned different heights device first sensor positioned high enough slope dime passes beneath sensor, allowing signal produced sensor tell us whether coin dime quarter second sensor positioned coins pass front it signal second sensor used clock fsm",
        "the device uses two optical sensors differentiate dime quarter first sensor positioned dime passes beneath it, second sensor positioned coins pass front it rising edge clock signal second sensor occurs, signal first sensor indicates whether coin dime quarter",
        "the device uses sensors generate clock signal alternating 0 1 regular period clock 0, one set latches holds bit values fixed, combinational logic uses latches inputs produce bits copied second set latches clock 1, second set latches stops storing data inputs retains bit values order drive combinational logic, results copied third set latches",
        "the fsm uses signal determine whether accept reject coin checking rising edge signal second sensor rising edge occurs, signal first sensor indicates whether coin quarter (t=1) dime (t=0) sample timing diagram lab appears right clock signal generated lab square wave---in words, high low portions equal---but also unlikely periodic instead, ``cycle'' defined time coin insertions",
        "the start state initial state fsm state, money deposited yet fsm needs keep track much money inserted order decide whether user purchase one items information alone enough simplest machine, let's create machine adjustable item prices",
        "the 'rejectd' state state processor interrupts program due error unexpected behavior state usually causes program terminate",
        "based passage, least 33 bits internal state needed fsm needs track number cycles needed serial comparator execute comparison, least 32 cycles additionally, fsm needs track whether loop done, requires least one additional bit",
        "the meaning assigned bit patterns makes easier understand behavior fsm example, paid state, last coin inserted may either type, type all, since decided start fsm state well however, four states, meanings provide clear understanding state fsm",
        "our machine accept pennies, let's fsm keep track much money inserted multiple 5 cents (one nickel) table right shows five types coins, value dollars, value terms nickels expensive item machine might cost dollar two, fsm must track least 20 40 nickels value let's decide use six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "the k-map represents domain function form hypercube hypercube divided regions, corresponds product literals function evaluated point hypercube, product literals implicant function function evaluates 1 point",
        "there 63 possible states paid state machine track 315 dollars worth nickels, 63 nickels",
        "this particular example tricky requires reader understand concept bit-sliced addition order understand passage furthermore, passage provide clear explanation bit-sliced adder circuit works, making difficult reader follow along",
        "the s_2 value specifies number inputs must satisfied order output 1 cuts number possible choices four two case two possible combinations inputs satisfy condition",
        "the design easy test two-level logic design means inputs outputs easily tested nand nor gate additionally, design easy test sop expression means inputs outputs easily tested or gate",
        "scan-based testing method testing input scanned converted appropriate result programmer responsible ensuring number conversions format string matches number arguments provided programmer must also ensure type information produced conversion stored address passed conversion",
        "we test circuit build lab see correctly implements fsm outlined notes this, input known sequence 0s 1s see circuit outputs correct responses does, confident circuit functioning correctly",
        "the input sequence used initialize fsm sequence 0s 1s input fsm order set state fsm desired state",
        "the outputs needed observe state check output logic values state register timer outputs used determine duration state order states occur",
        "it difficult test sequential logic difficult predict behavior system sequential logic difficult test difficult determine whether system halt finite number steps not",
        "scan-based testing type testing input scanned errors processed type testing often used test software errors",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "the input sequence testing follows: first, user prompted input two integers decimal form, converted 2's complement stored variables 'a' 'b' next, user prompted input ascii character, value hexadecimal, double-precision floating-point number, stored variables 'c', 'u', 'd', respectively finally, user prompted input two real numbers decimal form, converted single- double-precision floating-point numbers stored variables 'f' 'd', respectively",
        "an encoder device converts signal message code code usually binary code, sequence 0s 1s code used represent signal message form read machine, computer",
        "a decoder logic circuit converts binary code corresponding decimal code decoders used variety applications, including data storage transmission, error detection correction, address decoding",
        "a digital fsm model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called { transition rule} fsm comprises five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs",
        "a decoder used fsm design generate release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "the game revolves around old logic problem farmer must cross river order reach market farmer traveling market sell fox, goose, corn farmer boat, boat large enough carry fox, goose, corn time fox cannot left alone goose, fox eat goose goose cannot left alone corn, goose eat corn farmer get three items market",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "one could design game controller logic puzzle would buttons corresponding different operations could performed logic puzzle example, could button add new element puzzle, button remove element puzzle, button change value element puzzle game controller could also display would show current state puzzle player's progress",
        "passage - compact approaches comparing functions, solutions subject later class (such ece 462) {two-level logic} { two-level logic} popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams begin one demorgan's laws, illustrate algebraically graphically: c = b+a = {file=part2/figs/demorgan-nandeps,width=095in} let's say function expressed sop form, z=abc+de+fghj diagram left shows function constructed three and gates or gate using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate invert point along wire, slide bubble wire output first column",
        "the inputs fsm states two roads, outputs colors lights two roads fsm ensures lights one roads red times, lights road green fsm also alternates green lights two roads",
        "the fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the state fsm split two pieces: 3-bit register 6-bit timer timer simply binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "1 three ranges possible measurement values given metric the three ranges possible measurement values given metric values equivalently useful, ordered interesting respect one another, impossible use practice",
        "interrupts priority exceptions interrupts generated external devices, exceptions generated processor itself interrupts also asynchronous, exceptions not",
        "the vending machine fsm designed control release items vending machine based user's purchase request fsm uses priority encoder determine item user requested, decoder generate individual item release signals",
        "the fsm five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs class, focus clocked synchronous fsm implementations, fsm's internal state bits stored flip-flops",
        "the transitions states well-defined fsm timer counts produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the fsm needs keep track loop index, current minimum value, progress serial comparator",
        "the output fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "a priority encoder type encoder generates signal whenever input lines active, encodes index highest active input two-bit unsigned number priority encoder used determine input lines highest priority",
        "what three ranges given metric the first range measurement values equivalently useful second range possible values ordered interesting respect one another values third range impossible use practice",
        "what difference sop pos sop (sum products) boolean algebra expression or anded terms, pos (product sums) expression and ored terms",
        "how multi-metric optimization useful engineering multi-metric optimization useful engineering allows engineers identify important metrics balance design effectively according them multi-metric optimization also allows engineers get rid many metrics possible focus important ones",
        "a decoder device converts coded signals usable information decoders used variety applications, error detection correction",
        "a decoder logic circuit converts coded inputs coded outputs, usually one output code input code decoders used variety applications, including data storage transmission, error detection correction, data compression",
        "a decoder similar mux allows one digital signal select several others forwarded output decoder one input multiple outputs, mux multiple inputs one output decoder thought special case mux",
        "a decoder logic device converts binary information form one code another, usually natural binary code multiplexer device selects one several analog digital input signals forwards selected input single output line",
        "a priority encoder type encoder assigns priority certain input signals used determine input signal given priority multiple input signals present",
        "a priority encoder type encoder assigns priority certain input signals priority encoder takes signal produces output signal indicates input signal highest priority output signal typically binary number used select one input signals",
        "a decoder logic circuit converts signals one form another binary form, decoder used convert binary number decimal number",
        "a priority encoder circuit takes number input signals, outputs code represents highest priority input signal output code usually binary number",
        "a mux logic block allows us use one digital signal select several others forwarded output decoder logic block converts binary code set signals",
        "the decoder generates release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "the value register n corresponds number nickels inserted machine user inserts quarter, machine transition state n+5, indicating 5 nickels inserted user attempts purchase item without inserting enough money first, machine remain state reject request",
        "what significance demorgan's law demorgan's law popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "what difference two-level logic forms logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "the output or gate 1 signal f 1 f 1 state fsm s_0s_1s_2=001 s_0s_1s_2=011",
        "what difference sop pos sop form two-level logic, pos form multi-level logic sop popular simpler manipulate expressions algebraically graphically",
        "the value v 10 cents dime inserted dime worth 10 cents, machine tracks value money inserted terms nickels therefore, dime inserted, machine records 2 nickels",
        "passage - two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams question - what two levels two-level logic",
        "the vending machine keeps track much money inserted multiple 5 cents (one nickel) six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "the vending machine uses sensors detect coin inserted first sensor positioned dime pass beneath it, second sensor positioned coins pass front it signal second sensor used clock fsm, signal first sensor indicates whether coin dime quarter",
        "the vending machine releases item using decoder generate three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the vending machine knows purchase requested user pushes one item selection buttons causes priority encoder produce signal p indicating user trying make purchase",
        "the output fsm position farmer, fox, goose, corn output either left bank right bank river game also two indicators: w reaching winning state, l reaching losing state",
        "the state represented fxgc, f position farmer, x position fox, g position goose, c position corn game five buttons: reset, cross alone, cross fox, cross goose, cross corn game stops player wins loses",
        "the next state fxgc=0101 farmer bank fox, corn, b_x b_c buttons ignored, leading next-state table right notice b_g accepted even b_c pressed farmer bank corn",
        "the player wins game getting four entities (farmer, fox, goose, corn) right bank river player makes mistake, game lose",
        "the player loses game able correctly answer question player gets question wrong, start game beginning",
        "the input fsm 3-bit register 6-bit timer timer used count produce output z=1 reaches 0 register used store state fsm",
        "the priority encoder used determine item user wants purchase, generate signal indicating user trying make purchase output priority encoder used select value one price registers, subtracted current number nickels stored register purchase successful, price subtracted number nickels item released",
        "the player loses game able get correct answer question player gets correct answer, win game",
        "the fsm handles multiple input events single clock cycle first storing input events queue fsm ready process input event, dequeues event queue processes it",
        "the state fsm split two pieces: {3-bit} register {6-bit} timer timer simply binary counter counts downward produces output z=1 reaches 0 notice register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle we thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the fsm alternates green lights two roads setting timer different value state fsm changes causes lights change color cycle-by-cycle basis, green light alternating two roads",
        "the fsm initialized state \"000\" order ensure lights one roads red times timer set \"a\" order maintain new value number cycles",
        "the stoplight controller 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the stoplight controller shows yellow light showing red light order give drivers warning allow slow down",
        "starting human-based design process typically results design efficient effective one mapped high-level programming language human designers easily optimize design specific metrics, power consumption performance additionally, human designers easily impose constraints design, limits chip area minimum performance, order guide design process",
        "mapping bits gates means design circuit performs operation single bit passes necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "the general model computer system execute set instructions, called program, store resulting data system set registers hold data instructions, set memory locations store data programs system also set input output devices allow interact outside world",
        "the purpose process find best formulation specific logic function given metric done using heuristic approaches find solutions strike balance various metrics cost, power, performance",
        "the purpose notes introduce important abstraction logic design, use abstraction design ripple-carry adder ripple-carry adder adder adds single bit passes necessary information another copy itself design less efficient designs optimized specific purpose, simplicity approach makes tradeoff interesting one",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "a finite state machine model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called transition rule",
        "a computer machine programmed carry set arithmetic logical operations automatically fsm model behavior composed finite set states, transitions states, actions",
        "one way transform code written high-level language fsm use compiler compiler program translates code written high-level language code run computer another way transform code written high-level language fsm use interpreter interpreter program executes code written high-level language",
        "the control structure code maps high-level fsm design breaking program simple steps, one step flow chart may sometimes require one state fsm similarly, one fsm state may able implement several steps flow chart, steps performed simultaneously",
        "one design fsm executes simple pieces flow chart breaking program smaller steps mapping step state fsm one also use registers counters implement variables program, use comparator implement test statement",
        "what difference sop pos sop pos two forms two-level logic sop, output true inputs true pos, output true inputs true",
        "the array notation code means code trying convert input user appropriate result, store result memory address given next argument",
        "1 difference two-level three-level logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic three-level logic way expressing logic functions using three levels three levels refer number functions input passes reach output, sop pos forms examples three-level logic",
        "the idx variable used keep track number operations logic expression metric used estimate number transistors needed design, turn estimate area required design",
        "the min variable heuristic metric used estimate time needed compute function metric based longest chain operations performed instance variable rationale metric gate outputs change instantaneously inputs change",
        "the output counter number successful conversions made scanf function",
        "the purpose adding and gates input create logic function efficient terms area power done reducing number variables expression",
        "the ``halt'' button ice cream dispenser stops machine dispensing ice cream useful user wants stop machine dispensing ice cream, machine malfunctioning needs stopped",
        "the output depend input function and evaluate 1 input values 1 input value 0, function evaluate 0",
        "scan-based testing type testing used test functionality design type testing typically used test digital designs",
        "a decoder used context simplify expression logic function using decoder, function expressed two-level logic function, easier understand manipulate",
        "what reason popularity two-level logic the reason popularity two-level logic simple way express logic functions two-level logic popular way expressing logic functions simple way express logic functions",
        "the two approaches fsm design state-transition table state diagram state-transition table lists possible states system in, state diagram shows sequence states system goes through state-transition table compact easier use comparing functions, state diagram intuitive easier understand",
        "what reason popularity two-level logic the popularity two-level logic due fact simple way express logic functions additionally, two-level logic easy map cmos gates"
    ],
    "20": [
        "from passage, seems digital fsm designed abstract model first identifying finite set states, set possible inputs, set possible outputs, set transition rules then, fsm implemented digital system representing states patterns using fixed number bits, translating inputs bits, translating outputs bits finally, transition rules defined given state fsm pattern input bits, transition defined state another state",
        "a fsm implemented digital system, states represented patterns using fixed number bits, inputs translated bits, outputs translated bits transition rules must complete, meaning given state fsm pattern input bits, transition must defined state another state outputs digital fsm calculated using boolean logic expressions",
        "the third step design process identify metrics practical impact current technology, set threshold values metrics simplify reasoning them, eliminate redundant metrics, calculate linear sums reduce count metrics, and, finally, make use notion pareto optimality",
        "the third step design process evaluate design using multiple metrics includes identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "one way reduce design complexity make use common algebraic terms sub-expressions help simplify design make easier understand another way reduce complexity use demorgan's laws simplify expression help reduce number gates needed make design efficient",
        "one possibility fsm resetting properly, starts unexpected state another possibility race condition fsm, get unexpected state inputs change quickly",
        "the first approach use flip-flop design add single bit pass necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "one possibility fsm resetting properly, start expected initial state another possibility race condition fsm, reach unexpected state inputs change quickly",
        "pressing ``halt'' button nothing counter halted counter remains state ``go'' button pressed",
        "there several benefits using fsm one benefit fsm used implement wide range logic functions another benefit fsm used construct larger memories multiple smaller memories finally, fsm used reduce number pins needed chip",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "there possible ways answer question one way would say user presses ``halt'' button state { halt a}, system reset state { count a} another way answer question would say user presses ``halt'' button state { halt a}, system remain state { halt a}",
        "if ``halt'' button pressed (hg=10), counter remains halted state { halt a} buttons pressed (hg=11), ``halt'' overrides ``go,'' nothing special alone pressed counter halted thus, input patterns hg=10 hg=11 also take state { halt a} back itself",
        "one important reason consider possible input conditions possible states help ensure design correct example, design ever receives input values within certain range, possible design actually correct input values considering possible input conditions help catch errors like this another reason consider possible input conditions help optimize design example, design ever receives input values within certain range, possible simplify design make efficient considering possible input conditions help identify opportunities optimization",
        "when turing machine given input, either finishes finite number steps, not finish finite number steps, machine said \"halted\"",
        "one way verify implementation correct test known set inputs compare results expected results results match, implementation likely correct another way verify implementation examine code look errors done manually help software tool",
        "one way improve bad state representation make compact done using two-level logic instead three-level logic another way improve bad state representation make readable done using clear consistent naming conventions",
        "one way combine memory chips use multiple chips implement larger memory done using one address bit drive decoder determines two chips active another way combine memory chips use multiple chips implement wider memory done routing external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way combine memory chips use create larger memory done using one address bit drive decoder determines two chips active address bits, well external data inputs write enable signal, delivered memories external data outputs also connected memories another way combine memory chips use create wider memory case, chips either active inactive time, external address, write enable, chip select inputs routed chips however, data inputs outputs separate, chip handling different part data",
        "prof doug jones designed vending machine application fsm first identifying different states machine could in created state diagram showed machine would transition one state another finally, implemented fsm hardware using altera quartus software",
        "the first optical sensor used detect presence chip chip present, sensor turns chip used chip present, sensor turns chip cannot used sensor used save energy turning chip needed",
        "the dime quarter states used represent user inserted one coin purpose states output a=1 p=0, indicating user yet paid full price another coin needed",
        "the 'quarter' state refers fact addition unit 4-bit examples closed addition means value n, easily find two 4-bit unsigned numbers that, added together, cannot represented 4-bit unsigned number n=4, example, add 12 (1100) 6 (0110) obtain 18 since 18 outside range [0,2^4-1] representable using 4-bit unsigned representation, representation breaks try represent sum using representation",
        "we test circuit build lab see correctly implements fsm outlined notes this, input known sequence 0s 1s see circuit outputs correct responses does, confident circuit functioning correctly",
        "it difficult test sequential logic difficult predict behavior system sequential logic difficult test difficult determine whether system halt finite number steps not",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "a digital fsm model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called { transition rule} fsm comprises five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs",
        "a digital fsm finite state machine implemented digital system means states must represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits addition, transition rules must complete, meaning given state fsm pattern input bits, transition must defined another state",
        "the game revolves around old logic problem farmer must cross river order reach market farmer traveling market sell fox, goose, corn farmer boat, boat large enough carry fox, goose, corn time fox cannot left alone goose, fox eat goose goose cannot left alone corn, goose eat corn farmer get three items market",
        "what ideas used reduce number metrics some ideas used reduce number metrics include: identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "1 three ranges possible measurement values given metric the three ranges possible measurement values given metric values equivalently useful, ordered interesting respect one another, impossible use practice",
        "interrupts priority exceptions interrupts generated external devices, exceptions generated processor itself interrupts also asynchronous, exceptions not",
        "what three ranges given metric the first range measurement values equivalently useful second range possible values ordered interesting respect one another values third range impossible use practice",
        "a decoder logic device converts binary information form one code another, usually natural binary code multiplexer device selects one several analog digital input signals forwards selected input single output line",
        "a decoder logic circuit converts signals one form another binary form, decoder used convert binary number decimal number",
        "the next state fxgc=0101 farmer bank fox, corn, b_x b_c buttons ignored, leading next-state table right notice b_g accepted even b_c pressed farmer bank corn",
        "the state fsm split two pieces: {3-bit} register {6-bit} timer timer simply binary counter counts downward produces output z=1 reaches 0 notice register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle we thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "mapping bits gates means design circuit performs operation single bit passes necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "the purpose notes introduce important abstraction logic design, use abstraction design ripple-carry adder ripple-carry adder adder adds single bit passes necessary information another copy itself design less efficient designs optimized specific purpose, simplicity approach makes tradeoff interesting one",
        "a finite state machine model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called transition rule",
        "one way transform code written high-level language fsm use compiler compiler program translates code written high-level language code run computer another way transform code written high-level language fsm use interpreter interpreter program executes code written high-level language",
        "one way build fsm allows pieces executed specified fsm built use state machine output routed different inputs allows fsm configured execute different pieces code based input another way build fsm allows pieces executed specified fsm built use state machine multiple states executed parallel allows fsm configured execute different pieces code parallel based input",
        "the problem code trying solve halting problem halting problem problem cannot solved turing machine problem given turing machine input turing machine, possible determine whether machine finish computing finite number steps",
        "the array notation code means code trying convert input user appropriate result, store result memory address given next argument",
        "the flow chart represents steps taken designing new product first step think carefully metrics possible interest second step get rid many metrics possible third step identify metrics practical impact current technology fourth step set threshold values metrics simplify reasoning them fifth step eliminate redundant metrics sixth step calculate linear sums reduce count metrics seventh step make use notion pareto optimality",
        "the first examples passage two-level logic, demorgan's law, sop form two-level logic popular way expressing logic functions, demorgan's law way simplify expressions sop form way representing logic function",
        "the design process involves manipulation logic expressions order optimize specific metrics, cost, power, performance today, manipulation performed almost entirely computers, human engineers supplying logic functions interest imposing constraints process",
        "an fsm must initialized ensure starts known state allows fsm function correctly avoid potential problems could arise unknown starting state",
        "one important reason compatibility components digital system helps ensure system function correctly components compatible, system may work correctly, may work all additionally, compatibility among components help reduce cost manufacturing system, well cost maintaining repairing system",
        "a gray code counter device used count number operations logic expression device works counting number variables expression adding number operations device used optimize logic expressions reducing number operations needed implement logic function",
        "the output counter number successful conversions made scanf function",
        "it important reasonable order designing logic diagram help simplify design process make easier understand function logic diagram additionally, help ensure logic diagram compatible products may used system",
        "from passage, inferred logical completeness necessarily help efficient design logic functions words, single boolean logic function expressed many different ways therefore, important engineers learn develop efficient implementation function, well determine whether two logic expressions identical without actually writing truth tables",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills students learn coming months",
        "a karnaugh map graphical representation boolean function helps simplify function map consists grid squares, corresponds possible combination input values map used find groups product terms implicants function",
        "the next-state logic equations functions describe relationship current state system next state system functions represented either sop pos form demorgan's law used simplify functions replacing or gates nand gates, and gates nor gates",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways, learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills start learn coming months",
        "the purpose adding and gates input create logic function efficient terms area power done reducing number variables expression",
        "the ``halt'' button ice cream dispenser stops machine dispensing ice cream useful user wants stop machine dispensing ice cream, machine malfunctioning needs stopped",
        "if use gray code, would compare two expressions determine whether represent logic function would test logical equivalence, important part hardware design however, tools today provide help problem, necessary use gray code",
        "one reason important start representation makes sense human humans must supply logic functions interest, must program acceptable transformations equivalent forms second reason complexity problem good way introduce real engineering finally, contextual information help develop better understanding finite state machines higher-level abstractions form core digital systems still defined directly humans today",
        "the similarity equations s_1^+s_0^+ equations {2-to-1} mux used represent logic function two-level logic popular way expressing logic functions simple map expression cmos gates using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate",
        "a input operand and function and function evaluates 1 input operands equal 1 input operand or function or function evaluates 1 input operand equal 1",
        "the output depend input function and evaluate 1 input values 1 input value 0, function evaluate 0",
        "the k-map represents domain function form hypercube hypercube divided regions, corresponds product literals function evaluated point hypercube, product literals implicant function function evaluates 1 point",
        "scan-based testing type testing used test functionality design type testing typically used test digital designs",
        "passage - compact approaches comparing functions, solutions subject later class (such ece 462) {two-level logic} { two-level logic} popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams begin one demorgan's laws, illustrate algebraically graphically: c = b+a = {file=part2/figs/demorgan-nandeps,width=095in} let's say function expressed sop form, z=abc+de+fghj diagram left shows function constructed three and gates or gate using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate invert point along wire, slide bubble wire output first column",
        "a decoder used context simplify expression logic function using decoder, function expressed two-level logic function, easier understand manipulate",
        "what significance demorgan's law demorgan's law popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "what difference two-level logic forms logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "what reason popularity two-level logic the reason popularity two-level logic simple way express logic functions two-level logic popular way expressing logic functions simple way express logic functions",
        "passage - two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams question - what two levels two-level logic",
        "the purpose process find best formulation specific logic function given metric done using heuristic approaches find solutions strike balance various metrics cost, power, performance",
        "the two approaches fsm design state-transition table state diagram state-transition table lists possible states system in, state diagram shows sequence states system goes through state-transition table compact easier use comparing functions, state diagram intuitive easier understand",
        "1 difference two-level three-level logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic three-level logic way expressing logic functions using three levels three levels refer number functions input passes reach output, sop pos forms examples three-level logic",
        "the min variable heuristic metric used estimate time needed compute function metric based longest chain operations performed instance variable rationale metric gate outputs change instantaneously inputs change",
        "what reason popularity two-level logic the popularity two-level logic due fact simple way express logic functions additionally, two-level logic easy map cmos gates"
    ],
    "21": [
        "the first examples passage two-level logic, demorgan's law, sop form two-level logic popular way expressing logic functions, demorgan's law way simplify expressions sop form way representing logic function",
        "the design process involves manipulation logic expressions order optimize specific metrics, cost, power, performance today, manipulation performed almost entirely computers, human engineers supplying logic functions interest imposing constraints process",
        "an fsm must initialized ensure starts known state allows fsm function correctly avoid potential problems could arise unknown starting state",
        "one important reason compatibility components digital system helps ensure system function correctly components compatible, system may work correctly, may work all additionally, compatibility among components help reduce cost manufacturing system, well cost maintaining repairing system",
        "a gray code counter device used count number operations logic expression device works counting number variables expression adding number operations device used optimize logic expressions reducing number operations needed implement logic function",
        "the output counter number successful conversions made scanf function",
        "it important reasonable order designing logic diagram help simplify design process make easier understand function logic diagram additionally, help ensure logic diagram compatible products may used system",
        "from passage, inferred logical completeness necessarily help efficient design logic functions words, single boolean logic function expressed many different ways therefore, important engineers learn develop efficient implementation function, well determine whether two logic expressions identical without actually writing truth tables",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills students learn coming months",
        "a karnaugh map graphical representation boolean function helps simplify function map consists grid squares, corresponds possible combination input values map used find groups product terms implicants function",
        "the next-state logic equations functions describe relationship current state system next state system functions represented either sop pos form demorgan's law used simplify functions replacing or gates nand gates, and gates nor gates",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways, learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills start learn coming months",
        "the purpose adding and gates input create logic function efficient terms area power done reducing number variables expression",
        "there several benefits using fsm one benefit fsm used implement wide range logic functions another benefit fsm used construct larger memories multiple smaller memories finally, fsm used reduce number pins needed chip",
        "the ``halt'' button ice cream dispenser stops machine dispensing ice cream useful user wants stop machine dispensing ice cream, machine malfunctioning needs stopped",
        "if use gray code, would compare two expressions determine whether represent logic function would test logical equivalence, important part hardware design however, tools today provide help problem, necessary use gray code",
        "one reason important start representation makes sense human humans must supply logic functions interest, must program acceptable transformations equivalent forms second reason complexity problem good way introduce real engineering finally, contextual information help develop better understanding finite state machines higher-level abstractions form core digital systems still defined directly humans today",
        "the similarity equations s_1^+s_0^+ equations {2-to-1} mux used represent logic function two-level logic popular way expressing logic functions simple map expression cmos gates using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate",
        "a input operand and function and function evaluates 1 input operands equal 1 input operand or function or function evaluates 1 input operand equal 1",
        "the output depend input function and evaluate 1 input values 1 input value 0, function evaluate 0",
        "the k-map represents domain function form hypercube hypercube divided regions, corresponds product literals function evaluated point hypercube, product literals implicant function function evaluates 1 point",
        "we test circuit build lab see correctly implements fsm outlined notes this, input known sequence 0s 1s see circuit outputs correct responses does, confident circuit functioning correctly",
        "scan-based testing type testing used test functionality design type testing typically used test digital designs",
        "passage - compact approaches comparing functions, solutions subject later class (such ece 462) {two-level logic} { two-level logic} popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams begin one demorgan's laws, illustrate algebraically graphically: c = b+a = {file=part2/figs/demorgan-nandeps,width=095in} let's say function expressed sop form, z=abc+de+fghj diagram left shows function constructed three and gates or gate using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate invert point along wire, slide bubble wire output first column",
        "a decoder used context simplify expression logic function using decoder, function expressed two-level logic function, easier understand manipulate",
        "what significance demorgan's law demorgan's law popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "what difference two-level logic forms logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "what reason popularity two-level logic the reason popularity two-level logic simple way express logic functions two-level logic popular way expressing logic functions simple way express logic functions",
        "passage - two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams question - what two levels two-level logic",
        "the purpose process find best formulation specific logic function given metric done using heuristic approaches find solutions strike balance various metrics cost, power, performance",
        "the two approaches fsm design state-transition table state diagram state-transition table lists possible states system in, state diagram shows sequence states system goes through state-transition table compact easier use comparing functions, state diagram intuitive easier understand",
        "1 difference two-level three-level logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic three-level logic way expressing logic functions using three levels three levels refer number functions input passes reach output, sop pos forms examples three-level logic",
        "the min variable heuristic metric used estimate time needed compute function metric based longest chain operations performed instance variable rationale metric gate outputs change instantaneously inputs change",
        "what reason popularity two-level logic the popularity two-level logic due fact simple way express logic functions additionally, two-level logic easy map cmos gates"
    ],
    "22": [
        "one way reduce design complexity make use common algebraic terms sub-expressions help simplify design make easier understand another way reduce complexity use demorgan's laws simplify expression help reduce number gates needed make design efficient",
        "passage - compact approaches comparing functions, solutions subject later class (such ece 462) {two-level logic} { two-level logic} popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams begin one demorgan's laws, illustrate algebraically graphically: c = b+a = {file=part2/figs/demorgan-nandeps,width=095in} let's say function expressed sop form, z=abc+de+fghj diagram left shows function constructed three and gates or gate using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate invert point along wire, slide bubble wire output first column",
        "DeMorgan's Laws are logical laws",
        "DeMorgan's Laws are laws of logic",
        "DeMorgan's Laws are laws of mathematics"
    ],
    "23": [
        "the issue fsm getting unexpected states cause output circuit glitch problematic applications stable output required",
        "the first approach use flip-flop design add single bit pass necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "an fsm finite state machine, mathematical model computation used design computer programs digital logic circuits abstract machine one finite number states",
        "abstraction used build three-bit gray code counter two-bit design using copies bit-sliced adder circuit approach less efficient designing circuit specifically three-bit gray code counter, simpler",
        "a tri-state buffer logic circuit used disconnect output logic circuit achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "to write data memory element, external circuit sends signal memory indicating address element written data written sent memory, memory stores data element specified address",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context element memory assigned unique name, called address, allows external circuit identify particular element interest addresses unlike street addresses use send letter unlike street addresses, however, memory addresses usually little redundancy; possible combination bits address identifies distinct set bits memory",
        "a tri-state buffer type digital logic circuit used either connect disconnect signal line power supply ground done using two transistors, one connect signal line power supply, connect signal line ground buffer enabled, transistors turned on, signal line connected either power supply ground, depending value input signal buffer disabled, transistors turned off, signal line effectively disconnected power supply ground",
        "a tri-state buffer digital circuit used either connect disconnect output signal line buffer three states: high, low, high impedance buffer high state, output connected signal line copies signal input buffer low state, output disconnected signal line buffer high impedance state, output effectively disconnected signal line",
        "a tri-state buffer digital circuit used either connect disconnect signal circuit buffer three states: high, low, high impedance high impedance state effectively disconnects signal circuit allows multiple memories share output line without need additional multiplexers",
        "a sense amplifier circuit used read data stored memory cell sense amplifier amplifies small signal memory cell converts digital signal read processor",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "this particular example tricky requires reader understand concept bit-sliced addition order understand passage furthermore, passage provide clear explanation bit-sliced adder circuit works, making difficult reader follow along",
        "we test circuit build lab see correctly implements fsm outlined notes this, input known sequence 0s 1s see circuit outputs correct responses does, confident circuit functioning correctly",
        "a decoder logic circuit converts binary code corresponding decimal code decoders used variety applications, including data storage transmission, error detection correction, address decoding",
        "a decoder type logic circuit takes input signal produces one output possible value signal decoder similar multiplexer number inputs outputs however, decoder one input signal, multiplexer multiple input signals",
        "a decoder logic circuit converts binary code set signals used operate device decoder takes input signal, typically one coded binary number, produces one output possible value signal decoder enabled (en=1), and gates produces one minterm input signal s decoder enabled (en=0), decoder produces 0 bits",
        "a decoder logic circuit converts coded inputs coded outputs, usually one output code input code decoders used variety applications, including data storage transmission, error detection correction, data compression",
        "a decoder logic circuit converts signals one form another binary form, decoder used convert binary number decimal number",
        "a priority encoder circuit takes number input signals, outputs code represents highest priority input signal output code usually binary number",
        "mapping bits gates means design circuit performs operation single bit passes necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size"
    ],
    "24": [
        "the design process digital fsm includes six steps: developing abstract model, specifying i/o behavior, completing specification, choosing state representation, calculating logic expressions, implementing flip-flops gates",
        "the design process digital fsm typically consists six steps: (1) developing abstract model, (2) specifying i/o behavior, (3) completing specification, (4) choosing state representation, (5) calculating logic expressions, (6) implementing flip-flops gates",
        "the design process involves manipulation logic expressions order optimize specific metrics, cost, power, performance today, manipulation performed almost entirely computers, human engineers supplying logic functions interest imposing constraints process",
        "from passage, seems digital fsm designed abstract model first identifying finite set states, set possible inputs, set possible outputs, set transition rules then, fsm implemented digital system representing states patterns using fixed number bits, translating inputs bits, translating outputs bits finally, transition rules defined given state fsm pattern input bits, transition defined state another state",
        "the design process counter number states power two choose representation states makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "the first step design process develop abstract model model translation human language description model states desired behavior model particularly thorough exact stage",
        "the second step design process think carefully metrics possible interest set metrics feel complete, next step get rid many can",
        "the third step design process identify metrics practical impact current technology, set threshold values metrics simplify reasoning them, eliminate redundant metrics, calculate linear sums reduce count metrics, and, finally, make use notion pareto optimality",
        "the fourth step design process choose particular design set possible designs making choice, engineers typically consider variety factors, including cost, performance, manufacturability, reliability",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "the first step design process develop abstract model model captures intent description particularly thorough exact",
        "the third step design process evaluate design using multiple metrics includes identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "the fourth step design process choose particular design set possible designs choice made based number factors, including objectives design, constraints problem, preferences designer",
        "abstraction process simplifying complex system identifying important aspects system ignoring rest context implementation, abstraction used simplify design identifying important features design ignoring rest make design manageable easier understand",
        "there reasons important make implicit assumptions clear design process first, assumptions made clear, lead confusion misunderstanding among team members working design second, making assumptions explicit help ensure everyone page working towards goal finally, explicit assumptions help prevent errors mistakes design process",
        "the choice state representation affects implementation fsm terms number gates inverters required, well delay overall design serial comparator design based 2-bit slice variant, example, requires 24 gates 10 inverters, much larger earlier serial design terms gate delays, however, new design identical, meaning comparisons finished half time realistic area timing metrics show slightly difference two designs differences dominate results design carefully considered",
        "the choice fsm's input output behavior affects design process determining set possible states set possible outputs set possible states determined set possible inputs, set possible outputs determined set possible outputs",
        "there benefits using gray code counter first, easy design implement second, easy check correctness logic third, easy read understand logic",
        "a gray code counter designed first creating transition diagram shows states outputs counter next, next-state logic developed creating k-maps next-state values deriving algebraic expressions finally, next-state logic implemented diagram",
        "adding third bit gray code counter increases design complexity requires additional carry bit carry bit must propagated adder bit slice logic, increases number logic gates required overall complexity design",
        "one way reduce design complexity make use common algebraic terms sub-expressions help simplify design make easier understand another way reduce complexity use demorgan's laws simplify expression help reduce number gates needed make design efficient",
        "it important reasonable order designing logic diagram help simplify design process make easier understand function logic diagram additionally, help ensure logic diagram compatible products may used system",
        "from passage, inferred logical completeness necessarily help efficient design logic functions words, single boolean logic function expressed many different ways therefore, important engineers learn develop efficient implementation function, well determine whether two logic expressions identical without actually writing truth tables",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills students learn coming months",
        "yes, choose use counter's internal state directly output values colors need produce outputs unique bit patterns using counter's internal state directly output values, simplify design",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways, learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills start learn coming months",
        "the passage states power consumption important metric engineers must take account designs however, cases, desktop high-end server processors, metrics (such performance) may important always want operate edge interesting range could going wrong, engineers taking power consumption account much be",
        "the initial state three flip-flops implementation 0 state explicit mechanism initialization forces flip-flop 0 state alternatively, could add extra logic design would allow us force fsm specific state next cycle",
        "the first approach use flip-flop design add single bit pass necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "interrupts powerful exceptions occur asynchronously respect program means processor check interrupts instructions, allows flexibility design processor",
        "the initial state three flip-flops unknown unless explicit mechanism initialization initialization work two ways first approach makes use flip-flop design know, flip-flop built pair latches, make use internal reset lines latches force flip-flop 0 state (or 1 state) using additional input alternatively, add extra logic design",
        "the passage discusses design serial comparator using bit-sliced approach approach leads design 24 gates 10 inverters, much larger earlier serial design however, new design identical terms gate delays, meaning comparison finished half time",
        "the design counter includes eight states, three state bits used keep track current state choice representation fsm's states dramatically affect design complexity right strategy thus often start selecting representation makes sense human, even requires bits strictly necessary",
        "an fsm finite state machine, mathematical model computation used design computer programs digital logic circuits abstract machine one finite number states",
        "there disadvantages using fsm first, fsm designed carefully, hard understand debug second, fsm use resources simpler design, state machine finally, fsm difficult change extend simpler design",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "the design continues choosing state representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "if use gray code, would compare two expressions determine whether represent logic function would test logical equivalence, important part hardware design however, tools today provide help problem, necessary use gray code",
        "the design counter completed applying decisions made { count a} state counting states, decisions made { halt a} state halted states results design states labeled internal state outputs (s_2s_1s_0/z_1z_0)",
        "one important reason consider possible input conditions possible states help ensure design correct example, design ever receives input values within certain range, possible design actually correct input values considering possible input conditions help catch errors like this another reason consider possible input conditions help optimize design example, design ever receives input values within certain range, possible simplify design make efficient considering possible input conditions help identify opportunities optimization",
        "a transition diagram help process helping identify important metrics helping balance design effectively according metrics",
        "the choice representation fsm's states affect design complexity determines many bits needed represent state bits needed represent state, design complex",
        "the right strategy choosing representation start selecting representation makes sense human, even requires bits strictly necessary make design process simpler efficient long run",
        "the choice state representation affects design complexity ways first, affect number bits needed represent states second, affect number possible states represented third, affect number transitions need considered designing state machine",
        "the right strategy start selecting representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "abstraction selecting state representation lead better design allowing engineer focus important aspects problem ignoring details important help simplify problem make easier find solution",
        "the number state bits affects design complexity determines number possible states fsm in larger number state bits means possible states design must able handle them",
        "abstraction important selecting state representation allows designer select representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "different state representations lead different fsm designs example, states represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits fsm implemented digital system, states must represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits",
        "abstraction selecting representation impact design metrics reducing number metrics need considered simplify process designing solution make easier find optimal solution",
        "the hold variable simplifies design allowing designer separate logic deciding whether advance counter fairly cleanly logic advancing counter itself hold bit diagram used determine whether counter advance current cycle",
        "abstraction used build three-bit gray code counter two-bit design using copies bit-sliced adder circuit approach less efficient designing circuit specifically three-bit gray code counter, simpler",
        "the state representation significant impact overall design system affects way system behaves interacts environment well-chosen state representation simplify design system make efficient",
        "a good state representation important help reduce number logic gates needed design, thus save chip area additionally, good state representation help improve performance design reducing number logic operations needed",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor power consumption cases, two metrics may strongly correlated, meaning design good one metrics frequently also good metric",
        "a good state representation important help reduce number transistors needed design, thus save space energy additionally, help improve performance design making easier computer manipulate logic expressions",
        "the common types memory used digital systems sram dram sram used high-speed applications processor caches embedded designs dram used applications less demanding speed requirements",
        "the two common types memory used digital systems static random access memory (sram) dynamic random access memory (dram) sram used high-speed applications processor caches embedded designs, dram used applications less demanding speed requirements, main memory computers",
        "random access memories (rams) memories support two operations: writing data element, reading data element memories also volatile, means data held memory erased electrical power turned fails static random access memory (sram) used high-speed applications processor caches embedded designs",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors, dram cell uses one transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "sram faster dram, dram denser (has bits per chip area) substantial part dram density due transistor count: typical sram cells use six transistors (two inverter, two connect inverters bit lines), dram cells use single transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "static random access memory used high-speed applications processor caches embedded designs sram bit density significantly lower dram bit density, applications less demanding speed requirements use dram",
        "tri-state buffers used reduce number pins needed chips combining inputs outputs allowed chip designers halve number pins needed",
        "there several disadvantages using dram first, dram slower sram second, dram less dense sram, requires chip area store amount data finally, dram cells complex sram cells, difficult design manufacture",
        "dram type memory slower sram denser (has bits per chip area) dram cells use single transistor, sram cells use six transistors dram designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor count",
        "the vending machine application fsm designed team engineers fsm designed control simple vending machine accepts us coins payment offers choice three items sale machine adjustable item prices, fsm needs keep track much money inserted order decide whether user purchase one items",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "prof doug jones designed vending machine application fsm first identifying different states machine could in created state diagram showed machine would transition one state another finally, implemented fsm hardware using altera quartus software",
        "prof chris schmitz prototyped constructed physical elements help ece shop designed vending machine application fsm, prof doug jones created wiki documentation altera quartus portions lab casey smith, head guru ece instructional labs, developed new debounce design made changes improve robustness",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab based lab earlier mentor graphics work prof herman prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "prof kindratenko helped scale design way made possible deliver 400 students entering ece every semester creating wiki documentation altera quartus portions lab also helped improve robustness lab identifying common failure modes making changes design",
        "one reason try leverage fact next-state patterns two states relevant may simplify design system next-state patterns needed, system designed without them, may make design process simpler faster additionally, eliminating next-state patterns may also reduce cost system",
        "the design easy test two-level logic design means inputs outputs easily tested nand nor gate additionally, design easy test sop expression means inputs outputs easily tested or gate",
        "scan-based testing type testing used test functionality design type testing typically used test digital designs",
        "an fsm finite state machine, model computation used design computer programs hardware fsm defined set states, set inputs, set outputs, set transitions states",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "an encoder helps implement fsm design translating user's input signal used fsm encoder produces signal p indicating user trying make purchase, two-bit signal indicating item user wants decoder takes signal produces individual item release signals r_1, r_2, r_3",
        "a decoder used fsm design generate release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "a digital fsm used control stoplights intersection two roads fsm two inputs, f, two outputs, l1 l0 output fsm used control stoplights fsm designed stoplights red one roads times road green light, controller show yellow light showing red light give drivers warning allow slow down finally, fairness, controller alternate green lights two roads",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "one could design game controller logic puzzle would buttons corresponding different operations could performed logic puzzle example, could button add new element puzzle, button remove element puzzle, button change value element puzzle game controller could also display would show current state puzzle player's progress",
        "the vending machine fsm designed control release items vending machine based user's purchase request fsm uses priority encoder determine item user requested, decoder generate individual item release signals",
        "how multi-metric optimization useful engineering multi-metric optimization useful engineering allows engineers identify important metrics balance design effectively according them multi-metric optimization also allows engineers get rid many metrics possible focus important ones",
        "starting human-based design process typically results design efficient effective one mapped high-level programming language human designers easily optimize design specific metrics, power consumption performance additionally, human designers easily impose constraints design, limits chip area minimum performance, order guide design process",
        "mapping bits gates means design circuit performs operation single bit passes necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "the control structure code maps high-level fsm design breaking program simple steps mapping step state fsm number states fsm depend number steps program",
        "the two approaches fsm design state-transition table state diagram state-transition table lists possible states system in, state diagram shows sequence states system goes through state-transition table compact easier use comparing functions, state diagram intuitive easier understand",
        "the purpose notes introduce important abstraction logic design, use abstraction design ripple-carry adder ripple-carry adder adder adds single bit passes necessary information another copy itself design less efficient designs optimized specific purpose, simplicity approach makes tradeoff interesting one",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "the control structure code maps high-level fsm design breaking program simple steps, one step flow chart may sometimes require one state fsm similarly, one fsm state may able implement several steps flow chart, steps performed simultaneously",
        "one design fsm executes simple pieces flow chart breaking program smaller steps mapping step state fsm one also use registers counters implement variables program, use comparator implement test statement",
        "the idx variable used keep track number operations logic expression metric used estimate number transistors needed design, turn estimate area required design",
        "the flow chart represents steps taken designing new product first step think carefully metrics possible interest second step get rid many metrics possible third step identify metrics practical impact current technology fourth step set threshold values metrics simplify reasoning them fifth step eliminate redundant metrics sixth step calculate linear sums reduce count metrics seventh step make use notion pareto optimality"
    ],
    "25": [
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context",
        "the addressability computer memory number bits stored element memory size elements memory vary single binary digit, bit, byte (8 bits) more typically, data elements larger byte referred words, size word depends context",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context element memory assigned unique name, called address, allows external circuit identify particular element interest addresses unlike street addresses use send letter unlike street addresses, however, memory addresses usually little redundancy; possible combination bits address identifies distinct set bits memory",
        "the addressability computer memory number bits stored element memory size elements memory vary single bit byte more typically, data elements larger byte referred words, size word depends context",
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "there several benefits good state representation first, help reduce number pins needed chip second, improve density memory chip third, improve speed memory chip",
        "the common types memory used digital systems sram dram sram used high-speed applications processor caches embedded designs dram used applications less demanding speed requirements",
        "memory chips combined provide larger wider memories using multiple chips example, two 2-bit memories used implement 4-bit memory one address bits used drive decoder determines two chips active (cs=1) decoder enabled chip select signal larger memory, neither chip enabled external cs low, desired",
        "the two common types memory used digital systems static random access memory (sram) dynamic random access memory (dram) sram used high-speed applications processor caches embedded designs, dram used applications less demanding speed requirements, main memory computers",
        "one way combine memory chips use multiple chips implement larger memory done using one address bit drive decoder determines two chips active another way combine memory chips use multiple chips implement wider memory done routing external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way combine memory chips use create larger memory done using one address bit drive decoder determines two chips active address bits, well external data inputs write enable signal, delivered memories external data outputs also connected memories another way combine memory chips use create wider memory case, chips either active inactive time, external address, write enable, chip select inputs routed chips however, data inputs outputs separate, chip handling different part data",
        "random access memories (rams) memories support two operations: writing data element, reading data element memories also volatile, means data held memory erased electrical power turned fails static random access memory (sram) used high-speed applications processor caches embedded designs",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors, dram cell uses one transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "to write data memory element, external circuit sends signal memory indicating address element written data written sent memory, memory stores data element specified address",
        "a word context computer memory sequence bits represents unit data words represent numbers, characters, data types size word typically determined computer's word size, number bits computer process time",
        "a ram type memory used store data volatile memory, means data stored memory erased power turned fails ram random access memory, means time required access element memory independent element accessed",
        "sram faster dram, dram denser (has bits per chip area) substantial part dram density due transistor count: typical sram cells use six transistors (two inverter, two connect inverters bit lines), dram cells use single transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "a computer memory storage device data two main types memory: sram dram sram faster expensive, dram slower cheaper dram commonly used main memory computers",
        "data elements computer memory stored either static random access memory (sram) dynamic random access memory (dram) sram uses active logic form two-inverter loop maintain stored values, dram uses charged capacitor store bit",
        "words computer memory stored bits, either 0 1 group bits makes byte, smallest unit data stored computer memory group bytes makes word, smallest unit data read written computer memory",
        "a random access memory (ram) type memory allows data stored retrieved order ram volatile, means loses data power supply removed two types ram: static ram (sram) dynamic ram (dram)",
        "static random access memory used high-speed applications processor caches embedded designs sram bit density significantly lower dram bit density, applications less demanding speed requirements use dram",
        "sram cells combined bit slice sharing bit lines analog read write logic bit slice figure thought 16-address, 1-bit-addressable memory (2^4b) cells bit slice share bit lines analog read write logic, appears right figure",
        "the main advantage sram dram speed sram faster dram need refresh memory cells often dram denser sram, store data given area",
        "sram type memory used computers made number transistors store data way easy computer access sram faster types memory, also expensive",
        "sram cells combined bit slice sharing bit lines analog read write logic decoder sets one cell's select line high enable read write operation cell chip select input cs drives enable input decoder, none memory cells active chip select low (cs=0), exactly one memory cells active chip select high (cs=1)",
        "the decoder memory chip responsible translating memory address correct location memory chip necessary ensure correct data read written correct location memory chip",
        "the benefit using tri-state buffer allows logical disconnection tri-state buffer output means output shared one memory without need additional multiplexers useful creating larger memories combining multiple chips",
        "tri-state buffers used construct wider memories connecting data inputs outputs multiple memories together allows output line shared one memory without need additional multiplexers",
        "tri-state buffers used reduce number pins needed chip combining inputs outputs example, data inputs outputs memory combined single set data wires, bidirectional signals reduces number pins needed still allowing amount data transferred",
        "one way construct wider memory use multiple chips connect data inputs outputs chip separately way, left chip handles high n bits input writes produces high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way construct larger memory use multiple chips one address bits drive decoder determines two chips active decoder enabled chip select signal larger memory way, neither chip enabled external cs low",
        "a sense amplifier circuit used read data stored memory cell sense amplifier amplifies small signal memory cell converts digital signal read processor",
        "sdram type dram used main memory computers ddr4 sdram newer type dram faster sdram",
        "dram type memory uses capacitors store data row dram selected, cells row read written back, refreshes data cells dram said destructive reads read operation brings voltage capacitor closer intermediate voltage level, effectively destroys data cell",
        "dram type memory slower sram denser (has bits per chip area) dram cells use single transistor, sram cells use six transistors dram designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor count",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "the general model computer system execute set instructions, called program, store resulting data system set registers hold data instructions, set memory locations store data programs system also set input output devices allow interact outside world",
        "the array notation code means code trying convert input user appropriate result, store result memory address given next argument"
    ],
    "26": [
        "one important reason compatibility components digital system helps ensure system function correctly components compatible, system may work correctly, may work all additionally, compatibility among components help reduce cost manufacturing system, well cost maintaining repairing system",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "the column address strobe (cas) input used indicate address components available used control type operation (read write)",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "system calls initiated trap instruction, system calls also known traps many architectures, system call places processor privileged kernel mode, instructions implement call considered part operating system",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions"
    ],
    "27": [
        "the purpose adding and gates input create logic function efficient terms area power done reducing number variables expression",
        "the purpose using gray code create sequence patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit",
        "one build static rams using logic using tri-state buffers tri-state buffers used create larger memories using multiple chips wider memories also created using multiple chips",
        "one way combine memory chips use create larger memory done using one address bit drive decoder determines two chips active address bits, well external data inputs write enable signal, delivered memories external data outputs also connected memories another way combine memory chips use create wider memory case, chips either active inactive time, external address, write enable, chip select inputs routed chips however, data inputs outputs separate, chip handling different part data",
        "a tri-state buffer used create electrical connection tri-state buffer output logical disconnection achieved using outer transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab",
        "juan jos'e jaramillo identified common failure modes, including variability caused sunshine windows eceb, made changes improve robustness also created powerpoint slides typically used describe lab lecture",
        "prof doug jones designed vending machine application fsm first identifying different states machine could in created state diagram showed machine would transition one state another finally, implemented fsm hardware using altera quartus software",
        "prof chris schmitz prototyped constructed physical elements help ece shop designed vending machine application fsm, prof doug jones created wiki documentation altera quartus portions lab casey smith, head guru ece instructional labs, developed new debounce design made changes improve robustness",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab based lab earlier mentor graphics work prof herman prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "jaramillo later identified common failure modes, including variability caused sunshine windows eceb, made changes improve robustness also created powerpoint slides typically used describe lab lecture",
        "the start state initial state fsm state, money deposited yet fsm needs keep track much money inserted order decide whether user purchase one items information alone enough simplest machine, let's create machine adjustable item prices",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "system calls initiated trap instruction, system calls also known traps many architectures, system call places processor privileged kernel mode, instructions implement call considered part operating system",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions"
    ],
    "28": [
        "system calls initiated trap instruction, system calls also known traps many architectures, system call places processor privileged kernel mode, instructions implement call considered part operating system",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "interrupts powerful exceptions occur asynchronously respect program means processor check interrupts instructions, allows flexibility design processor",
        "the \"go\" button initiates system call causes processor enter kernel mode execute instructions associated system call instructions part operating system used perform desired action, printing character console",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "prof chris schmitz prototyped constructed physical elements help ece shop designed vending machine application fsm, prof doug jones created wiki documentation altera quartus portions lab casey smith, head guru ece instructional labs, developed new debounce design made changes improve robustness",
        "if rise fall rising clock edge, processor would able recognize interrupts instructions would cause program terminate unexpectedly",
        "the signal indicates interrupt occurred interrupt could generated external device, disk drive keyboard, error program executed, undefined instruction attempt divide zero",
        "the general model computer system execute set instructions, called program, store resulting data system set registers hold data instructions, set memory locations store data programs system also set input output devices allow interact outside world"
    ],
    "29": [
        "the desired pattern one represents number 2's complement representation 2's complement representation defined choosing set integers balanced around zero groups so, want represent number 2's complement representation, need choose pattern represents number representation",
        "the output behavior add3 procedure takes three integers arguments, adds together, returns sum procedure called constants 10, 20, 30, result printed calling convention, call made, r0 must contain value 10, r1 value 20, r2 value 30",
        "the input sequence testing follows: first, user prompted input two integers decimal form, converted 2's complement stored variables 'a' 'b' next, user prompted input ascii character, value hexadecimal, double-precision floating-point number, stored variables 'c', 'u', 'd', respectively finally, user prompted input two real numbers decimal form, converted single- double-precision floating-point numbers stored variables 'f' 'd', respectively",
        "the third step design process identify metrics practical impact current technology, set threshold values metrics simplify reasoning them, eliminate redundant metrics, calculate linear sums reduce count metrics, and, finally, make use notion pareto optimality",
        "the third step design process evaluate design using multiple metrics includes identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "the implementation gray code counter developed first filling k-maps next-state values, deriving algebraic expressions next-state logic used develop implementation",
        "a gray code counter used applications digital value must changed incrementally least number steps gray code counter changes one bit time, minimizes number digital values must changed",
        "a gray code counter designed first creating transition diagram shows states outputs counter next, next-state logic developed creating k-maps next-state values deriving algebraic expressions finally, next-state logic implemented diagram",
        "the fully-specified transition diagram three-bit gray code counter follows: the states counter form loop, counter moving one state next cycle each state diagram marked internal state value s_2s_1s_0 (before \" / \") output z_2z_1z_0 (after \" / \") based transition diagram, next-state values s_2^+, s_1^+, s_0^+ filled shown",
        "the next-state values three-bit gray code counter follows: s_2^+=0, s_1^+=s_0, s_0^+={{s_1}}",
        "the vertical lines carrying current state values inverses back next state logic inputs ordered left right (on left side figure) {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2",
        "the purpose vertical lines carrying current state values inverses back next state logic inputs ensure state fsm always consistent necessary safety reasons, fsm must always ensure lights one roads red times",
        "the next-state values s_2, s_1, s_0 given table right states act like counter, examining connections, derive equations next state draw transition diagram six states loop defined next-state logic, two remaining states converging loop single cycle",
        "yes, choose use counter's internal state directly output values colors need produce outputs unique bit patterns using counter's internal state directly output values, simplify design",
        "a karnaugh map graphical representation boolean function helps simplify function map consists grid squares, corresponds possible combination input values map used find groups product terms implicants function",
        "the next-state values s_2, s_1, s_0 1",
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "one important reason consider possible input conditions possible states help ensure design correct example, design ever receives input values within certain range, possible design actually correct input values considering possible input conditions help catch errors like this another reason consider possible input conditions help optimize design example, design ever receives input values within certain range, possible simplify design make efficient considering possible input conditions help identify opportunities optimization",
        "the value s_2 counter count state hold=0 undefined because, passage states, overflow occurs either operands negative operands positive operands negative, resulting sum equal c however, operands positive, resulting sum less c thus, impossible determine value s_2 without knowing values operands",
        "one builds memories (static rams) using logic connecting dual-inverter loop opposing bit lines transistors controlled select line select high, transistors connect inverter loop bit lines writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "data elements computer memory stored either static random access memory (sram) dynamic random access memory (dram) sram uses active logic form two-inverter loop maintain stored values, dram uses charged capacitor store bit",
        "sram cells store data using dual-inverter loop writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "the device uses sensors generate clock signal alternating 0 1 regular period clock 0, one set latches holds bit values fixed, combinational logic uses latches inputs produce bits copied second set latches clock 1, second set latches stops storing data inputs retains bit values order drive combinational logic, results copied third set latches",
        "the output depend input function and evaluate 1 input values 1 input value 0, function evaluate 0",
        "the outputs needed observe state check output logic values state register timer outputs used determine duration state order states occur",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "what ideas used reduce number metrics some ideas used reduce number metrics include: identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "1 three ranges possible measurement values given metric the three ranges possible measurement values given metric values equivalently useful, ordered interesting respect one another, impossible use practice",
        "what three ranges given metric the first range measurement values equivalently useful second range possible values ordered interesting respect one another values third range impossible use practice",
        "the and gate left used determine input values 1 input values 1, output and gate 1 input values 0, output and gate 0",
        "the flow chart represents steps taken designing new product first step think carefully metrics possible interest second step get rid many metrics possible third step identify metrics practical impact current technology fourth step set threshold values metrics simplify reasoning them fifth step eliminate redundant metrics sixth step calculate linear sums reduce count metrics seventh step make use notion pareto optimality"
    ],
    "30": [
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "interrupts powerful exceptions occur asynchronously respect program means processor check interrupts instructions, allows flexibility design processor",
        "the \"go\" button initiates system call causes processor enter kernel mode execute instructions associated system call instructions part operating system used perform desired action, printing character console",
        "system calls initiated trap instruction, system calls also known traps many architectures, system call places processor privileged kernel mode, instructions implement call considered part operating system",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "prof chris schmitz prototyped constructed physical elements help ece shop designed vending machine application fsm, prof doug jones created wiki documentation altera quartus portions lab casey smith, head guru ece instructional labs, developed new debounce design made changes improve robustness",
        "if rise fall rising clock edge, processor would able recognize interrupts instructions would cause program terminate unexpectedly",
        "the signal indicates interrupt occurred interrupt could generated external device, disk drive keyboard, error program executed, undefined instruction attempt divide zero",
        "the general model computer system execute set instructions, called program, store resulting data system set registers hold data instructions, set memory locations store data programs system also set input output devices allow interact outside world",
        "a gray code sequence n-bit patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit construct gray code recursively follows: (n+1)-bit gray code, write sequence n-bit gray code, add 0 front patterns sequence, append second copy n-bit gray code reverse order, put 1 front patterns second copy",
        "the transition diagram two-bit gray code counter loop counter moving one state next cycle state diagram marked internal state value s_1s_0 (before ``/'') output z_1z_0 (after ``/''), always equal counter",
        "a gray code counter type counter uses gray code, cycle bit patterns certain length consecutive patterns differ exactly one bit regular counter type counter use gray code",
        "the timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle states thus act like counter",
        "a gray code counter type counter cycles possible bit patterns certain length states transition diagram gray code counter form loop, counter moving one state next cycle state diagram marked internal state value output value, always equal counter",
        "the fully-specified transition diagram three-bit gray code counter follows: the states counter form loop, counter moving one state next cycle each state diagram marked internal state value s_2s_1s_0 (before \" / \") output z_2z_1z_0 (after \" / \") based transition diagram, next-state values s_2^+, s_1^+, s_0^+ filled shown",
        "the next-state values s_2, s_1, s_0 given table right states act like counter, examining connections, derive equations next state draw transition diagram six states loop defined next-state logic, two remaining states converging loop single cycle",
        "the transition diagram color sequencer loop six states, two remaining states converging loop single cycle lights red states, necessary safety timer set state changes, duration state calculated analyzing muxes",
        "the initial state three flip-flops implementation 0 state explicit mechanism initialization forces flip-flop 0 state alternatively, could add extra logic design would allow us force fsm specific state next cycle",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "the two-bit gray code sequence two-bit patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit",
        "a gray code sequence patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit construct gray code recursively follows: (n+1)-bit gray code, write sequence n-bit gray code, add 0 front patterns",
        "the uninterrupted counting cycle represents duration state fsm used calculate duration state fsm f=0",
        "the purpose using gray code create sequence patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit",
        "the hold variable simplifies design allowing designer separate logic deciding whether advance counter fairly cleanly logic advancing counter itself hold bit diagram used determine whether counter advance current cycle",
        "a row natural basis refresh cycle dram data pins provide bidirectional signals reading writing elements dram output enable input, oe, controls tri-state buffers dram determine whether dram drives data pins we input, controls type operation, also present",
        "the ras signal indicates row component address available raising ras signal row destructively reads contents cells row, forcing cells rewritten effecting refresh row thus natural basis refresh cycle",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the fsm uses signal determine whether accept reject coin checking rising edge signal second sensor rising edge occurs, signal first sensor indicates whether coin quarter (t=1) dime (t=0) sample timing diagram lab appears right clock signal generated lab square wave---in words, high low portions equal---but also unlikely periodic instead, ``cycle'' defined time coin insertions",
        "based passage, least 33 bits internal state needed fsm needs track number cycles needed serial comparator execute comparison, least 32 cycles additionally, fsm needs track whether loop done, requires least one additional bit",
        "the state table represents six states loop defined next-state logic, two remaining states converging loop single cycle lights red states, necessary safety",
        "the final state table state transition diagram appear follows: the final state table lists six states loop defined next-state logic, two remaining states converging loop single cycle table also includes states outside desired loop lights red states, necessary safety the state transition diagram shows six states loop defined next-state logic, two remaining states converging loop single cycle diagram also shows duration state",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "the fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the state fsm split two pieces: 3-bit register 6-bit timer timer simply binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the transitions states well-defined fsm timer counts produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the output fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the vending machine releases item using decoder generate three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the fsm handles multiple input events single clock cycle first storing input events queue fsm ready process input event, dequeues event queue processes it",
        "the state fsm split two pieces: {3-bit} register {6-bit} timer timer simply binary counter counts downward produces output z=1 reaches 0 notice register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle we thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the fsm alternates green lights two roads setting timer different value state fsm changes causes lights change color cycle-by-cycle basis, green light alternating two roads",
        "the fsm initialized state \"000\" order ensure lights one roads red times timer set \"a\" order maintain new value number cycles",
        "the stoplight controller 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle"
    ],
    "31": [
        "a gray code counter device used count number operations logic expression device works counting number variables expression adding number operations device used optimize logic expressions reducing number operations needed implement logic function",
        "one way reduce design complexity make use common algebraic terms sub-expressions help simplify design make easier understand another way reduce complexity use demorgan's laws simplify expression help reduce number gates needed make design efficient",
        "yes, choose use counter's internal state directly output values colors need produce outputs unique bit patterns using counter's internal state directly output values, simplify design",
        "the desired pattern one represents number 2's complement representation 2's complement representation defined choosing set integers balanced around zero groups so, want represent number 2's complement representation, need choose pattern represents number representation",
        "there several benefits using fsm one benefit fsm used implement wide range logic functions another benefit fsm used construct larger memories multiple smaller memories finally, fsm used reduce number pins needed chip",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "the ``halt'' button ice cream dispenser stops machine dispensing ice cream useful user wants stop machine dispensing ice cream, machine malfunctioning needs stopped",
        "the state table form specification make missing parts specification obvious showing different states system transitions states help identify parts specification missing needs added order complete specification",
        "the fsm needs least three states order eight states three possible items purchased, item purchased one two ways (with without enough money)",
        "the choice representation fsm's states affect design complexity determines many bits needed represent state bits needed represent state, design complex",
        "the choice state representation affects design complexity ways first, affect number bits needed represent states second, affect number possible states represented third, affect number transitions need considered designing state machine",
        "abstraction selecting representation impact design metrics reducing number metrics need considered simplify process designing solution make easier find optimal solution",
        "the similarity equations s_1^+s_0^+ equations {2-to-1} mux used represent logic function two-level logic popular way expressing logic functions simple map expression cmos gates using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate",
        "there several benefits good state representation first, help reduce number pins needed chip second, improve density memory chip third, improve speed memory chip",
        "a good state representation important help reduce number logic gates needed design, thus save chip area additionally, good state representation help improve performance design reducing number logic operations needed",
        "a good state representation important help reduce number transistors needed design, thus save space energy additionally, help improve performance design making easier computer manipulate logic expressions",
        "dynamic rams memories use charged capacitor store bit charge drains time must replaced, giving rise qualifier ``dynamic'' dram also unavailable recharging capacitors, problem applications stringent real-time needs",
        "a chip select input input chip allows chip turned off input used save energy turning chip needed",
        "a chip select input used enable disable chip input used save power turning chip needed",
        "the main advantage sram dram speed sram faster dram need refresh memory cells often dram denser sram, store data given area",
        "the main benefit using tri-state buffer allows logical disconnection buffer output means multiple memories share output line without need additional multiplexers",
        "tri-state buffers used reduce number pins needed chips combining inputs outputs allowed chip designers halve number pins needed",
        "the benefit using tri-state buffer allows logical disconnection tri-state buffer output means output shared one memory without need additional multiplexers useful creating larger memories combining multiple chips",
        "tri-state buffers used construct wider memories connecting data inputs outputs multiple memories together allows output line shared one memory without need additional multiplexers",
        "a tri-state buffer digital circuit used either connect disconnect signal circuit buffer three states: high, low, high impedance high impedance state effectively disconnects signal circuit allows multiple memories share output line without need additional multiplexers",
        "tri-state buffers used reduce number pins needed chip combining inputs outputs example, data inputs outputs memory combined single set data wires, bidirectional signals reduces number pins needed still allowing amount data transferred",
        "the vending machine application fsm designed team engineers fsm designed control simple vending machine accepts us coins payment offers choice three items sale machine adjustable item prices, fsm needs keep track much money inserted order decide whether user purchase one items",
        "the first optical sensor used detect presence chip chip present, sensor turns chip used chip present, sensor turns chip cannot used sensor used save energy turning chip needed",
        "the start state initial state fsm state, money deposited yet fsm needs keep track much money inserted order decide whether user purchase one items information alone enough simplest machine, let's create machine adjustable item prices",
        "the dime quarter states used represent user inserted one coin purpose states output a=1 p=0, indicating user yet paid full price another coin needed",
        "based passage, least 33 bits internal state needed fsm needs track number cycles needed serial comparator execute comparison, least 32 cycles additionally, fsm needs track whether loop done, requires least one additional bit",
        "one reason try leverage fact next-state patterns two states relevant may simplify design system next-state patterns needed, system designed without them, may make design process simpler faster additionally, eliminating next-state patterns may also reduce cost system",
        "the outputs needed observe state check output logic values state register timer outputs used determine duration state order states occur",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "passage - compact approaches comparing functions, solutions subject later class (such ece 462) {two-level logic} { two-level logic} popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams begin one demorgan's laws, illustrate algebraically graphically: c = b+a = {file=part2/figs/demorgan-nandeps,width=095in} let's say function expressed sop form, z=abc+de+fghj diagram left shows function constructed three and gates or gate using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate invert point along wire, slide bubble wire output first column",
        "the fsm needs keep track loop index, current minimum value, progress serial comparator",
        "the fsm needs track state stoplight duration state",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "the idx variable used keep track number operations logic expression metric used estimate number transistors needed design, turn estimate area required design",
        "the min variable heuristic metric used estimate time needed compute function metric based longest chain operations performed instance variable rationale metric gate outputs change instantaneously inputs change",
        "system calls initiated trap instruction, system calls also known traps many architectures, system call places processor privileged kernel mode, instructions implement call considered part operating system"
    ],
    "32": [
        "the design process digital fsm includes six steps: developing abstract model, specifying i/o behavior, completing specification, choosing state representation, calculating logic expressions, implementing flip-flops gates",
        "the design process digital fsm typically consists six steps: (1) developing abstract model, (2) specifying i/o behavior, (3) completing specification, (4) choosing state representation, (5) calculating logic expressions, (6) implementing flip-flops gates",
        "the choice state representation affects implementation fsm terms number gates inverters required, well delay overall design serial comparator design based 2-bit slice variant, example, requires 24 gates 10 inverters, much larger earlier serial design terms gate delays, however, new design identical, meaning comparisons finished half time realistic area timing metrics show slightly difference two designs differences dominate results design carefully considered",
        "adding third bit gray code counter increases design complexity requires additional carry bit carry bit must propagated adder bit slice logic, increases number logic gates required overall complexity design",
        "one way reduce design complexity make use common algebraic terms sub-expressions help simplify design make easier understand another way reduce complexity use demorgan's laws simplify expression help reduce number gates needed make design efficient",
        "the next-state logic equations functions describe relationship current state system next state system functions represented either sop pos form demorgan's law used simplify functions replacing or gates nand gates, and gates nor gates",
        "the purpose adding and gates input create logic function efficient terms area power done reducing number variables expression",
        "the passage discusses design serial comparator using bit-sliced approach approach leads design 24 gates 10 inverters, much larger earlier serial design however, new design identical terms gate delays, meaning comparison finished half time",
        "the similarity equations s_1^+s_0^+ equations {2-to-1} mux used represent logic function two-level logic popular way expressing logic functions simple map expression cmos gates using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate",
        "a good state representation important help reduce number logic gates needed design, thus save chip area additionally, good state representation help improve performance design reducing number logic operations needed",
        "the lab simulates two-level logic used map expression cmos gates also shows graphically manipulate expressions understand gate diagrams",
        "the design easy test two-level logic design means inputs outputs easily tested nand nor gate additionally, design easy test sop expression means inputs outputs easily tested or gate",
        "passage - compact approaches comparing functions, solutions subject later class (such ece 462) {two-level logic} { two-level logic} popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams begin one demorgan's laws, illustrate algebraically graphically: c = b+a = {file=part2/figs/demorgan-nandeps,width=095in} let's say function expressed sop form, z=abc+de+fghj diagram left shows function constructed three and gates or gate using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate invert point along wire, slide bubble wire output first column",
        "why two-level logic popular two-level logic popular simple map expressions cmos gates additionally, easy understand gate diagrams",
        "a decoder logic circuit converts binary code set signals used operate device decoder takes input signal, typically one coded binary number, produces one output possible value signal decoder enabled (en=1), and gates produces one minterm input signal s decoder enabled (en=0), decoder produces 0 bits",
        "what significance demorgan's law demorgan's law popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "what difference two-level logic forms logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "the output or gate 1 signal f 1 f 1 state fsm s_0s_1s_2=001 s_0s_1s_2=011",
        "passage - two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams question - what two levels two-level logic",
        "the and gate left used determine input values 1 input values 1, output and gate 1 input values 0, output and gate 0",
        "mapping bits gates means design circuit performs operation single bit passes necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "the min variable heuristic metric used estimate time needed compute function metric based longest chain operations performed instance variable rationale metric gate outputs change instantaneously inputs change",
        "what reason popularity two-level logic the popularity two-level logic due fact simple way express logic functions additionally, two-level logic easy map cmos gates",
        "a multiplexer device allows multiple signals routed onto single channel done selecting one several input signals connecting output multiplexers used variety applications, telecommunications computer networking",
        "tri-state buffers used reduce number pins needed chip combining inputs outputs example, data inputs outputs memory combined single set data wires, bidirectional signals reduces number pins needed still allowing amount data transferred",
        "a row natural basis refresh cycle dram data pins provide bidirectional signals reading writing elements dram output enable input, oe, controls tri-state buffers dram determine whether dram drives data pins we input, controls type operation, also present",
        "an encoder helps implement fsm design translating user's input signal used fsm encoder produces signal p indicating user trying make purchase, two-bit signal indicating item user wants decoder takes signal produces individual item release signals r_1, r_2, r_3",
        "a decoder used fsm design generate release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "the vending machine fsm designed control release items vending machine based user's purchase request fsm uses priority encoder determine item user requested, decoder generate individual item release signals",
        "a decoder type logic circuit takes input signal produces one output possible value signal decoder similar multiplexer number inputs outputs however, decoder one input signal, multiplexer multiple input signals",
        "the main difference mux decoder mux multiple inputs one output, decoder one input multiple outputs mux used select one several input signals send output, decoder used interpret input signal produce several output signals",
        "a decoder device converts coded signals usable information decoders used variety applications, error detection correction",
        "a decoder logic device converts binary information form one code another, usually natural binary code multiplexer device selects one several analog digital input signals forwards selected input single output line",
        "a priority encoder type encoder assigns priority certain input signals used determine input signal given priority multiple input signals present",
        "a priority encoder type encoder assigns priority certain input signals priority encoder takes signal produces output signal indicates input signal highest priority output signal typically binary number used select one input signals",
        "a decoder logic circuit converts signals one form another binary form, decoder used convert binary number decimal number",
        "a priority encoder circuit takes number input signals, outputs code represents highest priority input signal output code usually binary number",
        "a mux logic block allows us use one digital signal select several others forwarded output decoder logic block converts binary code set signals",
        "the decoder generates release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine"
    ],
    "33": [
        "a multiplexer device allows multiple signals routed onto single channel done selecting one several input signals connecting output multiplexers used variety applications, telecommunications computer networking",
        "tri-state buffers used reduce number pins needed chip combining inputs outputs example, data inputs outputs memory combined single set data wires, bidirectional signals reduces number pins needed still allowing amount data transferred",
        "a row natural basis refresh cycle dram data pins provide bidirectional signals reading writing elements dram output enable input, oe, controls tri-state buffers dram determine whether dram drives data pins we input, controls type operation, also present",
        "an encoder helps implement fsm design translating user's input signal used fsm encoder produces signal p indicating user trying make purchase, two-bit signal indicating item user wants decoder takes signal produces individual item release signals r_1, r_2, r_3",
        "a decoder used fsm design generate release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "the vending machine fsm designed control release items vending machine based user's purchase request fsm uses priority encoder determine item user requested, decoder generate individual item release signals",
        "a decoder type logic circuit takes input signal produces one output possible value signal decoder similar multiplexer number inputs outputs however, decoder one input signal, multiplexer multiple input signals",
        "the main difference mux decoder mux multiple inputs one output, decoder one input multiple outputs mux used select one several input signals send output, decoder used interpret input signal produce several output signals",
        "a decoder logic circuit converts binary code set signals used operate device decoder takes input signal, typically one coded binary number, produces one output possible value signal decoder enabled (en=1), and gates produces one minterm input signal s decoder enabled (en=0), decoder produces 0 bits",
        "a decoder device converts coded signals usable information decoders used variety applications, error detection correction",
        "a decoder logic device converts binary information form one code another, usually natural binary code multiplexer device selects one several analog digital input signals forwards selected input single output line",
        "a priority encoder type encoder assigns priority certain input signals used determine input signal given priority multiple input signals present",
        "a priority encoder type encoder assigns priority certain input signals priority encoder takes signal produces output signal indicates input signal highest priority output signal typically binary number used select one input signals",
        "a decoder logic circuit converts signals one form another binary form, decoder used convert binary number decimal number",
        "a priority encoder circuit takes number input signals, outputs code represents highest priority input signal output code usually binary number",
        "a mux logic block allows us use one digital signal select several others forwarded output decoder logic block converts binary code set signals",
        "the decoder generates release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine"
    ],
    "34": [
        "if use gray code, would compare two expressions determine whether represent logic function would test logical equivalence, important part hardware design however, tools today provide help problem, necessary use gray code",
        "an fsm finite state machine, mathematical model computation used design computer programs digital logic circuits abstract machine one finite number states",
        "an fsm finite state machine, model computation used design computer programs hardware fsm defined set states, set inputs, set outputs, set transitions states",
        "the general model computer system execute set instructions, called program, store resulting data system set registers hold data instructions, set memory locations store data programs system also set input output devices allow interact outside world",
        "interrupts powerful exceptions occur asynchronously respect program means processor check interrupts instructions, allows flexibility design processor",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "one reason important start representation makes sense human humans must supply logic functions interest, must program acceptable transformations equivalent forms second reason complexity problem good way introduce real engineering finally, contextual information help develop better understanding finite state machines higher-level abstractions form core digital systems still defined directly humans today",
        "non-volatile memories include magnetic optical storage media dvds, cd-roms, disks, tapes, capacitive storage media flash drives, programmable logic devices",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "if rise fall rising clock edge, processor would able recognize interrupts instructions would cause program terminate unexpectedly",
        "the signal indicates interrupt occurred interrupt could generated external device, disk drive keyboard, error program executed, undefined instruction attempt divide zero",
        "the 'rejectd' state state processor interrupts program due error unexpected behavior state usually causes program terminate",
        "scan-based testing method testing input scanned converted appropriate result programmer responsible ensuring number conversions format string matches number arguments provided programmer must also ensure type information produced conversion stored address passed conversion",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "starting human-based design process typically results design efficient effective one mapped high-level programming language human designers easily optimize design specific metrics, power consumption performance additionally, human designers easily impose constraints design, limits chip area minimum performance, order guide design process",
        "the control structure code maps high-level fsm design breaking program simple steps mapping step state fsm number states fsm depend number steps program",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "a computer machine programmed carry set arithmetic logical operations automatically fsm model behavior composed finite set states, transitions states, actions",
        "one way transform code written high-level language fsm use compiler compiler program translates code written high-level language code run computer another way transform code written high-level language fsm use interpreter interpreter program executes code written high-level language",
        "the control structure code maps high-level fsm design breaking program simple steps, one step flow chart may sometimes require one state fsm similarly, one fsm state may able implement several steps flow chart, steps performed simultaneously",
        "one design fsm executes simple pieces flow chart breaking program smaller steps mapping step state fsm one also use registers counters implement variables program, use comparator implement test statement"
    ],
    "35": [
        "an fsm must initialized ensure starts known state allows fsm function correctly avoid potential problems could arise unknown starting state",
        "the fourth step design process choose particular design set possible designs choice made based number factors, including objectives design, constraints problem, preferences designer",
        "the counter's implementation diagram simplifies understanding diagram breaking smaller, manageable pieces this, easier see various parts diagram interact other additionally, makes easier identify potential problems areas improvement",
        "the issue fsm getting unexpected states cause output circuit glitch problematic applications stable output required",
        "if use gray code, would compare two expressions determine whether represent logic function would test logical equivalence, important part hardware design however, tools today provide help problem, necessary use gray code",
        "abstraction powerful tool help simplify complex problems selecting state representation, abstraction help identify important aspects problem ignore irrelevant details make easier find solution effective efficient",
        "abstraction selecting state representation lead better design allowing engineer focus important aspects problem ignoring details important help simplify problem make easier find solution",
        "one reason important start representation makes sense human humans must supply logic functions interest, must program acceptable transformations equivalent forms second reason complexity problem good way introduce real engineering finally, contextual information help develop better understanding finite state machines higher-level abstractions form core digital systems still defined directly humans today",
        "a good state representation easy understand able capture relevant information problem bad state representation may difficult understand may able capture relevant information",
        "a bad state representation lead number problems, including wasted engineering effort, poor performance, even product cancellations",
        "dynamic rams memories use charged capacitor store bit charge drains time must replaced, giving rise qualifier ``dynamic'' dram also unavailable recharging capacitors, problem applications stringent real-time needs",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, problem solved",
        "each bit pattern represents column addition problem carry bit (c_) added b bits produce sum bit (s_) carry bit (c_)",
        "the game revolves around old logic problem farmer must cross river order reach market farmer traveling market sell fox, goose, corn farmer boat, boat large enough carry fox, goose, corn time fox cannot left alone goose, fox eat goose goose cannot left alone corn, goose eat corn farmer get three items market",
        "the problem code trying solve halting problem halting problem problem cannot solved turing machine problem given turing machine input turing machine, possible determine whether machine finish computing finite number steps",
        "interrupts powerful exceptions occur asynchronously respect program means processor check interrupts instructions, allows flexibility design processor",
        "an fsm finite state machine, mathematical model computation used design computer programs digital logic circuits abstract machine one finite number states",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "non-volatile memories include magnetic optical storage media dvds, cd-roms, disks, tapes, capacitive storage media flash drives, programmable logic devices",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "if rise fall rising clock edge, processor would able recognize interrupts instructions would cause program terminate unexpectedly",
        "the signal indicates interrupt occurred interrupt could generated external device, disk drive keyboard, error program executed, undefined instruction attempt divide zero",
        "the 'rejectd' state state processor interrupts program due error unexpected behavior state usually causes program terminate",
        "scan-based testing method testing input scanned converted appropriate result programmer responsible ensuring number conversions format string matches number arguments provided programmer must also ensure type information produced conversion stored address passed conversion",
        "an fsm finite state machine, model computation used design computer programs hardware fsm defined set states, set inputs, set outputs, set transitions states",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "starting human-based design process typically results design efficient effective one mapped high-level programming language human designers easily optimize design specific metrics, power consumption performance additionally, human designers easily impose constraints design, limits chip area minimum performance, order guide design process",
        "the control structure code maps high-level fsm design breaking program simple steps mapping step state fsm number states fsm depend number steps program",
        "the general model computer system execute set instructions, called program, store resulting data system set registers hold data instructions, set memory locations store data programs system also set input output devices allow interact outside world",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "a computer machine programmed carry set arithmetic logical operations automatically fsm model behavior composed finite set states, transitions states, actions",
        "one way transform code written high-level language fsm use compiler compiler program translates code written high-level language code run computer another way transform code written high-level language fsm use interpreter interpreter program executes code written high-level language",
        "the control structure code maps high-level fsm design breaking program simple steps, one step flow chart may sometimes require one state fsm similarly, one fsm state may able implement several steps flow chart, steps performed simultaneously",
        "one design fsm executes simple pieces flow chart breaking program smaller steps mapping step state fsm one also use registers counters implement variables program, use comparator implement test statement"
    ],
    "36": [
        "the first step design process develop abstract model model translation human language description model states desired behavior model particularly thorough exact stage",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "starting human-based design process typically results design efficient effective one mapped high-level programming language human designers easily optimize design specific metrics, power consumption performance additionally, human designers easily impose constraints design, limits chip area minimum performance, order guide design process",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "one way transform code written high-level language fsm use compiler compiler program translates code written high-level language code run computer another way transform code written high-level language fsm use interpreter interpreter program executes code written high-level language"
    ],
    "37": [
        "the first step design process develop abstract model model translation human language description model states desired behavior model particularly thorough exact stage",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "starting human-based design process typically results design efficient effective one mapped high-level programming language human designers easily optimize design specific metrics, power consumption performance additionally, human designers easily impose constraints design, limits chip area minimum performance, order guide design process",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "one way transform code written high-level language fsm use compiler compiler program translates code written high-level language code run computer another way transform code written high-level language fsm use interpreter interpreter program executes code written high-level language"
    ],
    "38": [
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context",
        "one way combine memory chips use multiple chips implement larger memory done using one address bit drive decoder determines two chips active another way combine memory chips use multiple chips implement wider memory done routing external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way combine memory chips use create larger memory done using one address bit drive decoder determines two chips active address bits, well external data inputs write enable signal, delivered memories external data outputs also connected memories another way combine memory chips use create wider memory case, chips either active inactive time, external address, write enable, chip select inputs routed chips however, data inputs outputs separate, chip handling different part data",
        "random access memories (rams) memories support two operations: writing data element, reading data element memories also volatile, means data held memory erased electrical power turned fails static random access memory (sram) used high-speed applications processor caches embedded designs",
        "the addressability computer memory number bits stored element memory size elements memory vary single binary digit, bit, byte (8 bits) more typically, data elements larger byte referred words, size word depends context",
        "to write data memory element, external circuit sends signal memory indicating address element written data written sent memory, memory stores data element specified address",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context element memory assigned unique name, called address, allows external circuit identify particular element interest addresses unlike street addresses use send letter unlike street addresses, however, memory addresses usually little redundancy; possible combination bits address identifies distinct set bits memory",
        "a word context computer memory sequence bits represents unit data words represent numbers, characters, data types size word typically determined computer's word size, number bits computer process time",
        "a ram type memory used store data volatile memory, means data stored memory erased power turned fails ram random access memory, means time required access element memory independent element accessed",
        "a computer memory storage device data two main types memory: sram dram sram faster expensive, dram slower cheaper dram commonly used main memory computers",
        "data elements computer memory stored either static random access memory (sram) dynamic random access memory (dram) sram uses active logic form two-inverter loop maintain stored values, dram uses charged capacitor store bit",
        "the addressability computer memory number bits stored element memory size elements memory vary single bit byte more typically, data elements larger byte referred words, size word depends context",
        "words computer memory stored bits, either 0 1 group bits makes byte, smallest unit data stored computer memory group bytes makes word, smallest unit data read written computer memory",
        "a random access memory (ram) type memory allows data stored retrieved order ram volatile, means loses data power supply removed two types ram: static ram (sram) dynamic ram (dram)",
        "the main advantage sram dram speed sram faster dram need refresh memory cells often dram denser sram, store data given area",
        "sram cells store data using dual-inverter loop writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "sram type memory used computers made number transistors store data way easy computer access sram faster types memory, also expensive",
        "a sram cell organized flip-flop, one transistor one capacitor per bit capacitor stores data bit, transistor controls access bit",
        "the decoder memory chip responsible translating memory address correct location memory chip necessary ensure correct data read written correct location memory chip",
        "multiple chips used construct wider memories connecting address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used construct larger memories using multiple chips connecting external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used construct wider memories connecting data inputs outputs multiple memories together allows output line shared one memory without need additional multiplexers",
        "tri-state buffers used reduce number pins needed chip combining inputs outputs example, data inputs outputs memory combined single set data wires, bidirectional signals reduces number pins needed still allowing amount data transferred",
        "one way construct wider memory use multiple chips connect data inputs outputs chip separately way, left chip handles high n bits input writes produces high n bits output reads, right chip handles low n bits input produces low n bits output",
        "a sense amplifier circuit used read data stored memory cell sense amplifier amplifies small signal memory cell converts digital signal read processor",
        "a row natural basis refresh cycle dram data pins provide bidirectional signals reading writing elements dram output enable input, oe, controls tri-state buffers dram determine whether dram drives data pins we input, controls type operation, also present",
        "dram used storing data capacitor capacitor attached bit line transistor controlled select line select line low, capacitor isolated holds charge however, transistor's resistance finite, charge leaks onto bit line",
        "dram type memory uses capacitors store data row dram selected, cells row read written back, refreshes data cells dram said destructive reads read operation brings voltage capacitor closer intermediate voltage level, effectively destroys data cell",
        "there several disadvantages using dram first, dram slower sram second, dram less dense sram, requires chip area store amount data finally, dram cells complex sram cells, difficult design manufacture",
        "a dram cell refreshed reading contents writing back active logic process necessary avoid data loss due charge leakage capacitor",
        "the device uses sensors generate clock signal alternating 0 1 regular period clock 0, one set latches holds bit values fixed, combinational logic uses latches inputs produce bits copied second set latches clock 1, second set latches stops storing data inputs retains bit values order drive combinational logic, results copied third set latches",
        "a decoder logic circuit converts binary code corresponding decimal code decoders used variety applications, including data storage transmission, error detection correction, address decoding",
        "a decoder logic circuit converts coded inputs coded outputs, usually one output code input code decoders used variety applications, including data storage transmission, error detection correction, data compression",
        "the general model computer system execute set instructions, called program, store resulting data system set registers hold data instructions, set memory locations store data programs system also set input output devices allow interact outside world",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, problem solved",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, servo held place, desired"
    ],
    "39": [
        "from passage, seems digital fsm designed abstract model first identifying finite set states, set possible inputs, set possible outputs, set transition rules then, fsm implemented digital system representing states patterns using fixed number bits, translating inputs bits, translating outputs bits finally, transition rules defined given state fsm pattern input bits, transition defined state another state",
        "a fsm implemented digital system, states represented patterns using fixed number bits, inputs translated bits, outputs translated bits transition rules must complete, meaning given state fsm pattern input bits, transition must defined state another state outputs digital fsm calculated using boolean logic expressions",
        "the design process counter number states power two choose representation states makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "the design counter includes eight states, three state bits used keep track current state choice representation fsm's states dramatically affect design complexity right strategy thus often start selecting representation makes sense human, even requires bits strictly necessary",
        "there two input bits",
        "the design continues choosing state representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "the choice representation fsm's states affect design complexity determines many bits needed represent state bits needed represent state, design complex",
        "the right strategy choosing representation start selecting representation makes sense human, even requires bits strictly necessary make design process simpler efficient long run",
        "the choice state representation affects design complexity ways first, affect number bits needed represent states second, affect number possible states represented third, affect number transitions need considered designing state machine",
        "the right strategy start selecting representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "the number state bits affects design complexity determines number possible states fsm in larger number state bits means possible states design must able handle them",
        "abstraction important selecting state representation allows designer select representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "different state representations lead different fsm designs example, states represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits fsm implemented digital system, states must represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context",
        "memory chips combined provide larger wider memories using multiple chips example, two 2-bit memories used implement 4-bit memory one address bits used drive decoder determines two chips active (cs=1) decoder enabled chip select signal larger memory, neither chip enabled external cs low, desired",
        "one way combine memory chips use multiple chips implement larger memory done using one address bit drive decoder determines two chips active another way combine memory chips use multiple chips implement wider memory done routing external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way combine memory chips use create larger memory done using one address bit drive decoder determines two chips active address bits, well external data inputs write enable signal, delivered memories external data outputs also connected memories another way combine memory chips use create wider memory case, chips either active inactive time, external address, write enable, chip select inputs routed chips however, data inputs outputs separate, chip handling different part data",
        "the addressability computer memory number bits stored element memory size elements memory vary single binary digit, bit, byte (8 bits) more typically, data elements larger byte referred words, size word depends context",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors, dram cell uses one transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context element memory assigned unique name, called address, allows external circuit identify particular element interest addresses unlike street addresses use send letter unlike street addresses, however, memory addresses usually little redundancy; possible combination bits address identifies distinct set bits memory",
        "a word context computer memory sequence bits represents unit data words represent numbers, characters, data types size word typically determined computer's word size, number bits computer process time",
        "sram faster dram, dram denser (has bits per chip area) substantial part dram density due transistor count: typical sram cells use six transistors (two inverter, two connect inverters bit lines), dram cells use single transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "the addressability computer memory number bits stored element memory size elements memory vary single bit byte more typically, data elements larger byte referred words, size word depends context",
        "words computer memory stored bits, either 0 1 group bits makes byte, smallest unit data stored computer memory group bytes makes word, smallest unit data read written computer memory",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors (two inverter, two connect inverters bit lines), dram cell uses single transistor",
        "multiple chips used construct wider memories connecting address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used construct larger memories using multiple chips connecting external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way construct wider memory use multiple chips connect data inputs outputs chip separately way, left chip handles high n bits input writes produces high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way construct larger memory use multiple chips one address bits drive decoder determines two chips active decoder enabled chip select signal larger memory way, neither chip enabled external cs low",
        "the main difference sram dram sram faster uses transistors, dram slower uses fewer transistors dram also denser sram, meaning bits stored given area",
        "dram type memory slower sram denser (has bits per chip area) dram cells use single transistor, sram cells use six transistors dram designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor count",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the device uses sensors generate clock signal alternating 0 1 regular period clock 0, one set latches holds bit values fixed, combinational logic uses latches inputs produce bits copied second set latches clock 1, second set latches stops storing data inputs retains bit values order drive combinational logic, results copied third set latches",
        "based passage, least 33 bits internal state needed fsm needs track number cycles needed serial comparator execute comparison, least 32 cycles additionally, fsm needs track whether loop done, requires least one additional bit",
        "each bit pattern represents column addition problem carry bit (c_) added b bits produce sum bit (s_) carry bit (c_)",
        "our machine accept pennies, let's fsm keep track much money inserted multiple 5 cents (one nickel) table right shows five types coins, value dollars, value terms nickels expensive item machine might cost dollar two, fsm must track least 20 40 nickels value let's decide use six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "a digital fsm finite state machine implemented digital system means states must represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits addition, transition rules must complete, meaning given state fsm pattern input bits, transition must defined another state",
        "the fsm five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs class, focus clocked synchronous fsm implementations, fsm's internal state bits stored flip-flops",
        "the coin accept bit item release bits used indicate whether coin accepted whether item released, respectively",
        "a decoder logic circuit converts binary code set signals used operate device decoder takes input signal, typically one coded binary number, produces one output possible value signal decoder enabled (en=1), and gates produces one minterm input signal s decoder enabled (en=0), decoder produces 0 bits",
        "the register price1 six bits allows machine keep track 315 (63 nickels)",
        "the vending machine keeps track much money inserted multiple 5 cents (one nickel) six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "the vending machine releases item using decoder generate three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "mapping bits gates means design circuit performs operation single bit passes necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "the design process digital fsm includes six steps: developing abstract model, specifying i/o behavior, completing specification, choosing state representation, calculating logic expressions, implementing flip-flops gates",
        "the design process digital fsm typically consists six steps: (1) developing abstract model, (2) specifying i/o behavior, (3) completing specification, (4) choosing state representation, (5) calculating logic expressions, (6) implementing flip-flops gates"
    ],
    "40": [
        "the choice state representation affects implementation fsm terms number gates inverters required, well delay overall design serial comparator design based 2-bit slice variant, example, requires 24 gates 10 inverters, much larger earlier serial design terms gate delays, however, new design identical, meaning comparisons finished half time realistic area timing metrics show slightly difference two designs differences dominate results design carefully considered",
        "the main difference sram dram sram faster uses transistors, dram slower uses fewer transistors dram also denser sram, meaning bits stored given area",
        "what difference sop pos sop (sum products) boolean algebra expression or anded terms, pos (product sums) expression and ored terms",
        "the main difference mux decoder mux multiple inputs one output, decoder one input multiple outputs mux used select one several input signals send output, decoder used interpret input signal produce several output signals",
        "what difference two-level logic forms logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "what difference sop pos sop form two-level logic, pos form multi-level logic sop popular simpler manipulate expressions algebraically graphically",
        "what difference sop pos sop pos two forms two-level logic sop, output true inputs true pos, output true inputs true",
        "1 difference two-level three-level logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic three-level logic way expressing logic functions using three levels three levels refer number functions input passes reach output, sop pos forms examples three-level logic",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context",
        "memory chips combined provide larger wider memories using multiple chips example, two 2-bit memories used implement 4-bit memory one address bits used drive decoder determines two chips active (cs=1) decoder enabled chip select signal larger memory, neither chip enabled external cs low, desired",
        "one way combine memory chips use multiple chips implement larger memory done using one address bit drive decoder determines two chips active another way combine memory chips use multiple chips implement wider memory done routing external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way combine memory chips use create larger memory done using one address bit drive decoder determines two chips active address bits, well external data inputs write enable signal, delivered memories external data outputs also connected memories another way combine memory chips use create wider memory case, chips either active inactive time, external address, write enable, chip select inputs routed chips however, data inputs outputs separate, chip handling different part data",
        "the addressability computer memory number bits stored element memory size elements memory vary single binary digit, bit, byte (8 bits) more typically, data elements larger byte referred words, size word depends context",
        "to write data memory element, external circuit sends signal memory indicating address element written data written sent memory, memory stores data element specified address",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context element memory assigned unique name, called address, allows external circuit identify particular element interest addresses unlike street addresses use send letter unlike street addresses, however, memory addresses usually little redundancy; possible combination bits address identifies distinct set bits memory",
        "the addressability computer memory number bits stored element memory size elements memory vary single bit byte more typically, data elements larger byte referred words, size word depends context",
        "sram cells combined bit slice sharing bit lines analog read write logic bit slice figure thought 16-address, 1-bit-addressable memory (2^4b) cells bit slice share bit lines analog read write logic, appears right figure",
        "the decoder memory chip responsible translating memory address correct location memory chip necessary ensure correct data read written correct location memory chip",
        "multiple chips used construct wider memories connecting address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used construct larger memories using multiple chips connecting external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way construct larger memory use multiple chips one address bits drive decoder determines two chips active decoder enabled chip select signal larger memory way, neither chip enabled external cs low",
        "the ras signal indicates row component address available raising ras signal row destructively reads contents cells row, forcing cells rewritten effecting refresh row thus natural basis refresh cycle",
        "the column address strobe (cas) input used indicate address components available used control type operation (read write)",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "scan-based testing method testing input scanned converted appropriate result programmer responsible ensuring number conversions format string matches number arguments provided programmer must also ensure type information produced conversion stored address passed conversion",
        "a decoder logic circuit converts binary code corresponding decimal code decoders used variety applications, including data storage transmission, error detection correction, address decoding",
        "the array notation code means code trying convert input user appropriate result, store result memory address given next argument",
        "the second version table implies buttons placed ergonomic way possible buttons close together enough space buttons edge table",
        "there best state representation fsm important factor representation complete, meaning states represented inputs accounted for considerations include size state space number inputs outputs",
        "a good state representation important help reduce number transistors needed design, thus save space energy additionally, help improve performance design making easier computer manipulate logic expressions"
    ],
    "41": [
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "interrupts powerful exceptions occur asynchronously respect program means processor check interrupts instructions, allows flexibility design processor",
        "the \"go\" button initiates system call causes processor enter kernel mode execute instructions associated system call instructions part operating system used perform desired action, printing character console",
        "system calls initiated trap instruction, system calls also known traps many architectures, system call places processor privileged kernel mode, instructions implement call considered part operating system",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "prof chris schmitz prototyped constructed physical elements help ece shop designed vending machine application fsm, prof doug jones created wiki documentation altera quartus portions lab casey smith, head guru ece instructional labs, developed new debounce design made changes improve robustness",
        "if rise fall rising clock edge, processor would able recognize interrupts instructions would cause program terminate unexpectedly",
        "the signal indicates interrupt occurred interrupt could generated external device, disk drive keyboard, error program executed, undefined instruction attempt divide zero",
        "the general model computer system execute set instructions, called program, store resulting data system set registers hold data instructions, set memory locations store data programs system also set input output devices allow interact outside world",
        "a gray code sequence n-bit patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit construct gray code recursively follows: (n+1)-bit gray code, write sequence n-bit gray code, add 0 front patterns sequence, append second copy n-bit gray code reverse order, put 1 front patterns second copy",
        "the transition diagram two-bit gray code counter loop counter moving one state next cycle state diagram marked internal state value s_1s_0 (before ``/'') output z_1z_0 (after ``/''), always equal counter",
        "a gray code counter type counter uses gray code, cycle bit patterns certain length consecutive patterns differ exactly one bit regular counter type counter use gray code",
        "the timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle states thus act like counter",
        "a gray code counter type counter cycles possible bit patterns certain length states transition diagram gray code counter form loop, counter moving one state next cycle state diagram marked internal state value output value, always equal counter",
        "the fully-specified transition diagram three-bit gray code counter follows: the states counter form loop, counter moving one state next cycle each state diagram marked internal state value s_2s_1s_0 (before \" / \") output z_2z_1z_0 (after \" / \") based transition diagram, next-state values s_2^+, s_1^+, s_0^+ filled shown",
        "the next-state values s_2, s_1, s_0 given table right states act like counter, examining connections, derive equations next state draw transition diagram six states loop defined next-state logic, two remaining states converging loop single cycle",
        "the transition diagram color sequencer loop six states, two remaining states converging loop single cycle lights red states, necessary safety timer set state changes, duration state calculated analyzing muxes",
        "the initial state three flip-flops implementation 0 state explicit mechanism initialization forces flip-flop 0 state alternatively, could add extra logic design would allow us force fsm specific state next cycle",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "the two-bit gray code sequence two-bit patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit",
        "a gray code sequence patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit construct gray code recursively follows: (n+1)-bit gray code, write sequence n-bit gray code, add 0 front patterns",
        "the uninterrupted counting cycle represents duration state fsm used calculate duration state fsm f=0",
        "the purpose using gray code create sequence patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit",
        "the hold variable simplifies design allowing designer separate logic deciding whether advance counter fairly cleanly logic advancing counter itself hold bit diagram used determine whether counter advance current cycle",
        "a row natural basis refresh cycle dram data pins provide bidirectional signals reading writing elements dram output enable input, oe, controls tri-state buffers dram determine whether dram drives data pins we input, controls type operation, also present",
        "the ras signal indicates row component address available raising ras signal row destructively reads contents cells row, forcing cells rewritten effecting refresh row thus natural basis refresh cycle",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the fsm uses signal determine whether accept reject coin checking rising edge signal second sensor rising edge occurs, signal first sensor indicates whether coin quarter (t=1) dime (t=0) sample timing diagram lab appears right clock signal generated lab square wave---in words, high low portions equal---but also unlikely periodic instead, ``cycle'' defined time coin insertions",
        "based passage, least 33 bits internal state needed fsm needs track number cycles needed serial comparator execute comparison, least 32 cycles additionally, fsm needs track whether loop done, requires least one additional bit",
        "the state table represents six states loop defined next-state logic, two remaining states converging loop single cycle lights red states, necessary safety",
        "the final state table state transition diagram appear follows: the final state table lists six states loop defined next-state logic, two remaining states converging loop single cycle table also includes states outside desired loop lights red states, necessary safety the state transition diagram shows six states loop defined next-state logic, two remaining states converging loop single cycle diagram also shows duration state",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "the fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the state fsm split two pieces: 3-bit register 6-bit timer timer simply binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the transitions states well-defined fsm timer counts produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the output fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the vending machine releases item using decoder generate three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the fsm handles multiple input events single clock cycle first storing input events queue fsm ready process input event, dequeues event queue processes it",
        "the state fsm split two pieces: {3-bit} register {6-bit} timer timer simply binary counter counts downward produces output z=1 reaches 0 notice register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle we thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the fsm alternates green lights two roads setting timer different value state fsm changes causes lights change color cycle-by-cycle basis, green light alternating two roads",
        "the fsm initialized state \"000\" order ensure lights one roads red times timer set \"a\" order maintain new value number cycles",
        "the stoplight controller 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle"
    ],
    "42": [
        "the timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle states thus act like counter",
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the outputs needed observe state check output logic values state register timer outputs used determine duration state order states occur",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "the fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the state fsm split two pieces: 3-bit register 6-bit timer timer simply binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the transitions states well-defined fsm timer counts produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the output fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the value register price1 price first item machine, determined owner machine",
        "the value register price2 number nickels machine multiplied price item question way, machine keep track much money inserted much owed item",
        "the value register price3 price third item machine, determined owner machine",
        "the value register n corresponds number nickels inserted machine user inserts quarter, machine transition state n+5, indicating 5 nickels inserted user attempts purchase item without inserting enough money first, machine remain state reject request",
        "the value register equivalence class sum two 4-bit numbers case, sum 18, equivalent 2 (mod 16)",
        "the register price1 six bits allows machine keep track 315 (63 nickels)",
        "the value register price2 number nickels inserted machine",
        "the vending machine releases item using decoder generate three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the input fsm 3-bit register 6-bit timer timer used count produce output z=1 reaches 0 register used store state fsm",
        "the priority encoder used determine item user wants purchase, generate signal indicating user trying make purchase output priority encoder used select value one price registers, subtracted current number nickels stored register purchase successful, price subtracted number nickels item released",
        "the state fsm split two pieces: {3-bit} register {6-bit} timer timer simply binary counter counts downward produces output z=1 reaches 0 notice register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle we thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the stoplight controller 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the stoplight controller alternates green lights two roads changing value register s value changed timer reaches 0, timer set enters new state duration state determined value register s",
        "the general model computer system execute set instructions, called program, store resulting data system set registers hold data instructions, set memory locations store data programs system also set input output devices allow interact outside world",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "one design fsm executes simple pieces flow chart breaking program smaller steps mapping step state fsm one also use registers counters implement variables program, use comparator implement test statement"
    ],
    "43": [
        "the design process digital fsm includes six steps: developing abstract model, specifying i/o behavior, completing specification, choosing state representation, calculating logic expressions, implementing flip-flops gates",
        "the design process digital fsm typically consists six steps: (1) developing abstract model, (2) specifying i/o behavior, (3) completing specification, (4) choosing state representation, (5) calculating logic expressions, (6) implementing flip-flops gates",
        "a gray code counter used applications digital value must changed incrementally least number steps gray code counter changes one bit time, minimizes number digital values must changed",
        "when turing machine given input, either finishes finite number steps, not finish finite number steps, machine said \"halted\"",
        "it difficult test sequential logic difficult predict behavior system sequential logic difficult test difficult determine whether system halt finite number steps not",
        "the control structure code maps high-level fsm design breaking program simple steps mapping step state fsm number states fsm depend number steps program",
        "the control structure code maps high-level fsm design breaking program simple steps, one step flow chart may sometimes require one state fsm similarly, one fsm state may able implement several steps flow chart, steps performed simultaneously",
        "one design fsm executes simple pieces flow chart breaking program smaller steps mapping step state fsm one also use registers counters implement variables program, use comparator implement test statement",
        "the problem code trying solve halting problem halting problem problem cannot solved turing machine problem given turing machine input turing machine, possible determine whether machine finish computing finite number steps",
        "the flow chart represents steps taken designing new product first step think carefully metrics possible interest second step get rid many metrics possible third step identify metrics practical impact current technology fourth step set threshold values metrics simplify reasoning them fifth step eliminate redundant metrics sixth step calculate linear sums reduce count metrics seventh step make use notion pareto optimality",
        "the design process involves manipulation logic expressions order optimize specific metrics, cost, power, performance today, manipulation performed almost entirely computers, human engineers supplying logic functions interest imposing constraints process",
        "the design process counter number states power two choose representation states makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "the first step design process develop abstract model model translation human language description model states desired behavior model particularly thorough exact stage",
        "the second step design process think carefully metrics possible interest set metrics feel complete, next step get rid many can",
        "the third step design process identify metrics practical impact current technology, set threshold values metrics simplify reasoning them, eliminate redundant metrics, calculate linear sums reduce count metrics, and, finally, make use notion pareto optimality",
        "the fourth step design process choose particular design set possible designs making choice, engineers typically consider variety factors, including cost, performance, manufacturability, reliability",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "the first step design process develop abstract model model captures intent description particularly thorough exact",
        "the third step design process evaluate design using multiple metrics includes identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "the fourth step design process choose particular design set possible designs choice made based number factors, including objectives design, constraints problem, preferences designer",
        "abstraction process simplifying complex system identifying important aspects system ignoring rest context implementation, abstraction used simplify design identifying important features design ignoring rest make design manageable easier understand",
        "there reasons important make implicit assumptions clear design process first, assumptions made clear, lead confusion misunderstanding among team members working design second, making assumptions explicit help ensure everyone page working towards goal finally, explicit assumptions help prevent errors mistakes design process",
        "the choice fsm's input output behavior affects design process determining set possible states set possible outputs set possible states determined set possible inputs, set possible outputs determined set possible outputs",
        "it important reasonable order designing logic diagram help simplify design process make easier understand function logic diagram additionally, help ensure logic diagram compatible products may used system",
        "the passage states power consumption important metric engineers must take account designs however, cases, desktop high-end server processors, metrics (such performance) may important always want operate edge interesting range could going wrong, engineers taking power consumption account much be",
        "interrupts powerful exceptions occur asynchronously respect program means processor check interrupts instructions, allows flexibility design processor",
        "the \"go\" button initiates system call causes processor enter kernel mode execute instructions associated system call instructions part operating system used perform desired action, printing character console",
        "system calls initiated trap instruction, system calls also known traps many architectures, system call places processor privileged kernel mode, instructions implement call considered part operating system",
        "a transition diagram help process helping identify important metrics helping balance design effectively according metrics",
        "a counter \"counting\" process incrementing, counter \"halted\" incrementing",
        "the right strategy choosing representation start selecting representation makes sense human, even requires bits strictly necessary make design process simpler efficient long run",
        "abstraction selecting representation impact design metrics reducing number metrics need considered simplify process designing solution make easier find optimal solution",
        "the common types memory used digital systems sram dram sram used high-speed applications processor caches embedded designs dram used applications less demanding speed requirements",
        "the two common types memory used digital systems static random access memory (sram) dynamic random access memory (dram) sram used high-speed applications processor caches embedded designs, dram used applications less demanding speed requirements, main memory computers",
        "random access memories (rams) memories support two operations: writing data element, reading data element memories also volatile, means data held memory erased electrical power turned fails static random access memory (sram) used high-speed applications processor caches embedded designs",
        "a word context computer memory sequence bits represents unit data words represent numbers, characters, data types size word typically determined computer's word size, number bits computer process time",
        "static random access memory used high-speed applications processor caches embedded designs sram bit density significantly lower dram bit density, applications less demanding speed requirements use dram",
        "a sense amplifier circuit used read data stored memory cell sense amplifier amplifies small signal memory cell converts digital signal read processor",
        "a dram cell refreshed reading contents writing back active logic process necessary avoid data loss due charge leakage capacitor",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "the second optical sensor used detect chip finishes work chip turn save energy metric used guide process optimizing logic expressions balance struck different metrics involved",
        "if rise fall rising clock edge, processor would able recognize interrupts instructions would cause program terminate unexpectedly",
        "the device used turn save energy done using heuristic approaches find solutions strike balance different metrics, cost, power, performance human engineer impose constraints, limits chip area limits minimum performance, order guide process",
        "the 'rejectd' state state processor interrupts program due error unexpected behavior state usually causes program terminate",
        "one reason try leverage fact next-state patterns two states relevant may simplify design system next-state patterns needed, system designed without them, may make design process simpler faster additionally, eliminating next-state patterns may also reduce cost system",
        "scan-based testing type testing input scanned errors processed type testing often used test software errors",
        "interrupts priority exceptions interrupts generated external devices, exceptions generated processor itself interrupts also asynchronous, exceptions not",
        "the fsm handles multiple input events single clock cycle first storing input events queue fsm ready process input event, dequeues event queue processes it",
        "starting human-based design process typically results design efficient effective one mapped high-level programming language human designers easily optimize design specific metrics, power consumption performance additionally, human designers easily impose constraints design, limits chip area minimum performance, order guide design process",
        "the purpose process find best formulation specific logic function given metric done using heuristic approaches find solutions strike balance various metrics cost, power, performance"
    ],
    "44": [
        "an abstract model mathematical model used describe system usually simplified include details system",
        "a multiplexer device allows multiple signals routed onto single channel done selecting one several input signals connecting output multiplexers used variety applications, telecommunications computer networking",
        "the third step design process identify metrics practical impact current technology, set threshold values metrics simplify reasoning them, eliminate redundant metrics, calculate linear sums reduce count metrics, and, finally, make use notion pareto optimality",
        "the third step design process evaluate design using multiple metrics includes identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "abstraction process simplifying complex system identifying important aspects system ignoring rest context implementation, abstraction used simplify design identifying important features design ignoring rest make design manageable easier understand",
        "a gray code counter device used count number operations logic expression device works counting number variables expression adding number operations device used optimize logic expressions reducing number operations needed implement logic function",
        "the implementation gray code counter developed first filling k-maps next-state values, deriving algebraic expressions next-state logic used develop implementation",
        "the inputs counter coins inserted machine machine track value coins terms nickels reject coins inserted would cause value exceed maximum value machine track",
        "a gray code counter type digital counter used count number clock pulses named frank gray, invented code 1953 main advantage gray code counter types counters less likely produce errors counting",
        "a gray code counter type counter uses gray code, cycle bit patterns certain length consecutive patterns differ exactly one bit regular counter type counter use gray code",
        "a gray code counter used applications digital value must changed incrementally least number steps gray code counter changes one bit time, minimizes number digital values must changed",
        "a gray code counter type digital counter uses gray code generate output input gray code counter digital signal represents number clock pulses applied counter output gray code counter digital signal represents number clock pulses applied counter, plus one",
        "one way reduce design complexity make use common algebraic terms sub-expressions help simplify design make easier understand another way reduce complexity use demorgan's laws simplify expression help reduce number gates needed make design efficient",
        "it important reasonable order designing logic diagram help simplify design process make easier understand function logic diagram additionally, help ensure logic diagram compatible products may used system",
        "yes, choose use counter's internal state directly output values colors need produce outputs unique bit patterns using counter's internal state directly output values, simplify design",
        "a karnaugh map graphical representation boolean function helps simplify function map consists grid squares, corresponds possible combination input values map used find groups product terms implicants function",
        "the next-state logic equations functions describe relationship current state system next state system functions represented either sop pos form demorgan's law used simplify functions replacing or gates nand gates, and gates nor gates",
        "the initial state three flip-flops implementation 0s 1s use init input choose normal operation (init=0) fsm forcing fsm next state given i_2i_1i_0 (when init=1)",
        "the issue fsm getting unexpected states cause output circuit glitch problematic applications stable output required",
        "the first approach use flip-flop design add single bit pass necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "the initial state three flip-flops unknown unless explicit mechanism initialization initialization work two ways first approach makes use flip-flop design know, flip-flop built pair latches, make use internal reset lines latches force flip-flop 0 state (or 1 state) using additional input alternatively, add extra logic design",
        "one way make use internal reset lines latches force flip-flop 0 state done connecting reset lines latches 0 voltage source",
        "an abstract model simplified representation system, typically used aid understanding system context logic optimization, abstract model used help understand tradeoffs different logic expressions",
        "the design counter includes eight states, three state bits used keep track current state choice representation fsm's states dramatically affect design complexity right strategy thus often start selecting representation makes sense human, even requires bits strictly necessary",
        "there four halted states: halt a, halt b, halt c, halt d states, counter retains current value user presses \"go\" button",
        "pressing ``go'' button causes counter start counting",
        "an fsm finite state machine, mathematical model computation used design computer programs digital logic circuits abstract machine one finite number states",
        "there several benefits using fsm one benefit fsm used implement wide range logic functions another benefit fsm used construct larger memories multiple smaller memories finally, fsm used reduce number pins needed chip",
        "there disadvantages using fsm first, fsm designed carefully, hard understand debug second, fsm use resources simpler design, state machine finally, fsm difficult change extend simpler design",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "the input behavior machine based type coin inserted selection item purchase user inserts coin nickel, machine reject coin remain state user inserts nickel, machine transition next state accept coin user selects item purchase, machine release item user inserted enough money otherwise, machine remain state",
        "the ``halt'' button ice cream dispenser stops machine dispensing ice cream useful user wants stop machine dispensing ice cream, machine malfunctioning needs stopped",
        "the \"go\" button initiates system call causes processor enter kernel mode execute instructions associated system call instructions part operating system used perform desired action, printing character console",
        "the uninterrupted counting cycle represents duration state fsm used calculate duration state fsm f=0",
        "if use gray code, would compare two expressions determine whether represent logic function would test logical equivalence, important part hardware design however, tools today provide help problem, necessary use gray code",
        "if user presses \"go\" button state {count a}, outputs c_l=11 c_m=01 means user get one half servings lychee half serving mango",
        "there explicit answer question passage however, based information given, seems user presses ``halt'' button state { count a}, system reset state { halt a}",
        "there two possible outcomes user presses ``go'' button state { halt a} first outcome fsm moves state { count b}, next state sequence second outcome fsm resets state { count a}, initial state",
        "there possible ways answer question one way would say user presses ``halt'' button state { halt a}, system reset state { count a} another way answer question would say user presses ``halt'' button state { halt a}, system remain state { halt a}",
        "there two possible ways user could press buttons state { halt a} first way user could press \"halt\" button \"go\" button case, fsm would move state { halt a} state { count b} second way user could press \"go\" button \"halt\" button case, fsm would move state { count b} state { halt a}",
        "if user presses \"go\" button (hg=01), ice cream cup overflow outputs c_l=11 c_m=10, means dispenser release full serving flavor, two servings total",
        "if user presses buttons (hg=11), ice cream cup overflows outputs c_l=11 c_m=10, dispenser releases full serving flavor, two servings total",
        "if user presses \"go\" button (hg=01), machine dispense one half servings lychee half serving mango",
        "one reason often best start selecting representation makes sense human easier understand work with additionally, starting representation makes sense human help ensure final product also easy understand use",
        "the value s_2 counter count state hold=0 undefined because, passage states, overflow occurs either operands negative operands positive operands negative, resulting sum equal c however, operands positive, resulting sum less c thus, impossible determine value s_2 without knowing values operands",
        "the hold variable used save energy chip finishes work, turn off, saving energy variable allows chip turn finished, saving energy",
        "the hold variable simplifies design allowing designer separate logic deciding whether advance counter fairly cleanly logic advancing counter itself hold bit diagram used determine whether counter advance current cycle",
        "the similarity equations s_1^+s_0^+ equations {2-to-1} mux used represent logic function two-level logic popular way expressing logic functions simple map expression cmos gates using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate",
        "the use s_2 separates logic deciding whether advance counter allowing counter halted state (s_2=1) counting state (s_2=0) hold=1, counter retains state, hold=0, counts",
        "abstraction used build three-bit gray code counter two-bit design using copies bit-sliced adder circuit approach less efficient designing circuit specifically three-bit gray code counter, simpler",
        "the state representation used determine next state fsm done examining inputs fsm deriving equations next state states fsm act like counter, examining connections, next state determined",
        "the common types memory used digital systems sram dram sram used high-speed applications processor caches embedded designs dram used applications less demanding speed requirements",
        "one build static rams using logic using tri-state buffers tri-state buffers used create larger memories using multiple chips wider memories also created using multiple chips",
        "tri-state buffers used provide logical disconnection tri-state buffer output logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "memory chips combined provide larger wider memories using multiple chips example, two 2-bit memories used implement 4-bit memory one address bits used drive decoder determines two chips active (cs=1) decoder enabled chip select signal larger memory, neither chip enabled external cs low, desired",
        "the two common types memory used digital systems static random access memory (sram) dynamic random access memory (dram) sram used high-speed applications processor caches embedded designs, dram used applications less demanding speed requirements, main memory computers",
        "a tri-state buffer type digital logic device used either connect disconnect signal line power source ground achieved using two transistors, one connect signal line power source, connect signal line ground buffer enabled, transistors turned on, signal line connected either power source ground, depending value input signal buffer disabled, transistors turned off, effectively disconnecting signal line power source ground",
        "one way combine memory chips use multiple chips implement larger memory done using one address bit drive decoder determines two chips active another way combine memory chips use multiple chips implement wider memory done routing external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "a tri-state buffer logic circuit used disconnect output logic circuit achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "one way combine memory chips use create larger memory done using one address bit drive decoder determines two chips active address bits, well external data inputs write enable signal, delivered memories external data outputs also connected memories another way combine memory chips use create wider memory case, chips either active inactive time, external address, write enable, chip select inputs routed chips however, data inputs outputs separate, chip handling different part data",
        "dynamic rams memories use charged capacitor store bit charge drains time must replaced, giving rise qualifier ``dynamic'' dram also unavailable recharging capacitors, problem applications stringent real-time needs",
        "random access memories (rams) memories support two operations: writing data element, reading data element memories also volatile, means data held memory erased electrical power turned fails static random access memory (sram) used high-speed applications processor caches embedded designs",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors, dram cell uses one transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context element memory assigned unique name, called address, allows external circuit identify particular element interest addresses unlike street addresses use send letter unlike street addresses, however, memory addresses usually little redundancy; possible combination bits address identifies distinct set bits memory",
        "a chip select input input chip allows chip turned off input used save energy turning chip needed",
        "a ram type memory used store data volatile memory, means data stored memory erased power turned fails ram random access memory, means time required access element memory independent element accessed",
        "sram faster dram, dram denser (has bits per chip area) substantial part dram density due transistor count: typical sram cells use six transistors (two inverter, two connect inverters bit lines), dram cells use single transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "a computer memory storage device data two main types memory: sram dram sram faster expensive, dram slower cheaper dram commonly used main memory computers",
        "data elements computer memory stored either static random access memory (sram) dynamic random access memory (dram) sram uses active logic form two-inverter loop maintain stored values, dram uses charged capacitor store bit",
        "static random access memory used high-speed applications processor caches embedded designs sram bit density significantly lower dram bit density, applications less demanding speed requirements use dram",
        "a chip select input used enable disable chip input used save power turning chip needed",
        "sram type memory used computers made number transistors store data way easy computer access sram faster types memory, also expensive",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors (two inverter, two connect inverters bit lines), dram cell uses single transistor",
        "multiple chips used construct wider memories connecting address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used reduce number pins needed chips combining inputs outputs allowed chip designers halve number pins needed",
        "a tri-state buffer type digital logic circuit used either connect disconnect signal line power supply ground done using two transistors, one connect signal line power supply, connect signal line ground buffer enabled, transistors turned on, signal line connected either power supply ground, depending value input signal buffer disabled, transistors turned off, signal line effectively disconnected power supply ground",
        "a tri-state buffer digital circuit used either connect disconnect output signal line buffer three states: high, low, high impedance buffer high state, output connected signal line copies signal input buffer low state, output disconnected signal line buffer high impedance state, output effectively disconnected signal line",
        "the benefit using tri-state buffer allows logical disconnection tri-state buffer output means output shared one memory without need additional multiplexers useful creating larger memories combining multiple chips",
        "tri-state buffers used construct larger memories using multiple chips connecting external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used construct wider memories connecting data inputs outputs multiple memories together allows output line shared one memory without need additional multiplexers",
        "a tri-state buffer digital circuit used either connect disconnect signal circuit buffer three states: high, low, high impedance high impedance state effectively disconnects signal circuit allows multiple memories share output line without need additional multiplexers",
        "a tri-state buffer used create electrical connection tri-state buffer output logical disconnection achieved using outer transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "tri-state buffers used reduce number pins needed chip combining inputs outputs example, data inputs outputs memory combined single set data wires, bidirectional signals reduces number pins needed still allowing amount data transferred",
        "one way construct wider memory use multiple chips connect data inputs outputs chip separately way, left chip handles high n bits input writes produces high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way construct larger memory use multiple chips one address bits drive decoder determines two chips active decoder enabled chip select signal larger memory way, neither chip enabled external cs low",
        "the main difference sram dram sram faster uses transistors, dram slower uses fewer transistors dram also denser sram, meaning bits stored given area",
        "a sense amplifier circuit used read data stored memory cell sense amplifier amplifies small signal memory cell converts digital signal read processor",
        "sdram type dram used main memory computers ddr4 sdram newer type dram faster sdram",
        "dram used storing data capacitor capacitor attached bit line transistor controlled select line select line low, capacitor isolated holds charge however, transistor's resistance finite, charge leaks onto bit line",
        "dram type memory uses capacitors store data row dram selected, cells row read written back, refreshes data cells dram said destructive reads read operation brings voltage capacitor closer intermediate voltage level, effectively destroys data cell",
        "the benefits using dram denser sram uses fewer transistors makes dram ideal applications size important speed",
        "dram type memory slower sram denser (has bits per chip area) dram cells use single transistor, sram cells use six transistors dram designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor count",
        "a sense amplifier device used amplify signal sensor typically used amplify signal small sensor, pressure sensor, level read larger device, computer",
        "the column address strobe (cas) input used indicate address components available used control type operation (read write)",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, problem solved",
        "the lab simulates two-level logic used map expression cmos gates also shows graphically manipulate expressions understand gate diagrams",
        "the vending machine application fsm designed team engineers fsm designed control simple vending machine accepts us coins payment offers choice three items sale machine adjustable item prices, fsm needs keep track much money inserted order decide whether user purchase one items",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, servo held place, desired",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "juan jos'e jaramillo identified common failure modes, including variability caused sunshine windows eceb, made changes improve robustness also created powerpoint slides typically used describe lab lecture",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "jaramillo later identified common failure modes, including variability caused sunshine windows eceb, made changes improve robustness also created powerpoint slides typically used describe lab lecture",
        "a signal used set timer f 0, timer set state changes",
        "the first optical sensor used detect presence chip chip present, sensor turns chip used chip present, sensor turns chip cannot used sensor used save energy turning chip needed",
        "the second optical sensor used detect chip finishes work chip turn save energy metric used guide process optimizing logic expressions balance struck different metrics involved",
        "if rise fall rising clock edge, processor would able recognize interrupts instructions would cause program terminate unexpectedly",
        "the device used turn save energy done using heuristic approaches find solutions strike balance different metrics, cost, power, performance human engineer impose constraints, limits chip area limits minimum performance, order guide process",
        "to use device, user presses one buttons user presses one button, device produces lychee ice cream user presses blend button, device produces blend user presses mango button, device produces mango ice cream",
        "there two optical sensors positioned different heights device first sensor positioned high enough slope dime passes beneath sensor, allowing signal produced sensor tell us whether coin dime quarter second sensor positioned coins pass front it signal second sensor used clock fsm",
        "the device uses two optical sensors differentiate dime quarter first sensor positioned dime passes beneath it, second sensor positioned coins pass front it rising edge clock signal second sensor occurs, signal first sensor indicates whether coin dime quarter",
        "the device uses sensors generate clock signal alternating 0 1 regular period clock 0, one set latches holds bit values fixed, combinational logic uses latches inputs produce bits copied second set latches clock 1, second set latches stops storing data inputs retains bit values order drive combinational logic, results copied third set latches",
        "the fsm uses signal determine whether accept reject coin checking rising edge signal second sensor rising edge occurs, signal first sensor indicates whether coin quarter (t=1) dime (t=0) sample timing diagram lab appears right clock signal generated lab square wave---in words, high low portions equal---but also unlikely periodic instead, ``cycle'' defined time coin insertions",
        "the possible inputs fsm dime (t=0) quarter (t=1) machine reject input user tries purchase item without inserting enough money first, fsm also reject request",
        "the possible outputs fsm a=1 p=1 f signal used set timer, either 0 1 f=0, timer set state changes f=1, timer set state changes light one roads green",
        "the start state initial state fsm state, money deposited yet fsm needs keep track much money inserted order decide whether user purchase one items information alone enough simplest machine, let's create machine adjustable item prices",
        "the dime quarter states used represent user inserted one coin purpose states output a=1 p=0, indicating user yet paid full price another coin needed",
        "the rejectd rejectq states used handle user mistakes user enters second dime dime state, fsm reject coin rejectd state rejects dime (a=0) continues wait quarter (p=0) rejectq state used handle user inserts one quarter",
        "the start state first state fsm sequence used initialize fsm",
        "the dime state state machine waiting dime inserted first state machine accepts coin machine outputs a=1 p=0 state, indicating user yet paid full price 35 cents",
        "the paid state state user paid full price 35 cents next states paid dime dime inserted quarter quarter inserted",
        "the 'rejectd' state state processor interrupts program due error unexpected behavior state usually causes program terminate",
        "the user purchases item inserting either dime followed quarter, quarter followed dime user inserts second dime, machine reject coin user inserts second quarter, machine accept coin user paid full price 35 cents",
        "our machine accept pennies, let's fsm keep track much money inserted multiple 5 cents (one nickel) table right shows five types coins, value dollars, value terms nickels expensive item machine might cost dollar two, fsm must track least 20 40 nickels value let's decide use six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "the input sequence 001 causes stoplight turn red roads necessary safety",
        "scan-based testing type testing used test functionality design type testing typically used test digital designs",
        "the input sequence used initialize fsm sequence 0s 1s input fsm order set state fsm desired state",
        "the input sequence used test fsm sequence 0s 1s applied inputs fsm input sequence used determine output fsm",
        "the outputs needed observe state check output logic values state register timer outputs used determine duration state order states occur",
        "scan-based testing type testing input scanned errors processed type testing often used test software errors",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "the input sequence testing follows: first, user prompted input two integers decimal form, converted 2's complement stored variables 'a' 'b' next, user prompted input ascii character, value hexadecimal, double-precision floating-point number, stored variables 'c', 'u', 'd', respectively finally, user prompted input two real numbers decimal form, converted single- double-precision floating-point numbers stored variables 'f' 'd', respectively",
        "an fsm finite state machine, model computation used design computer programs hardware fsm defined set states, set inputs, set outputs, set transitions states",
        "an encoder device converts signal message code code usually binary code, sequence 0s 1s code used represent signal message form read machine, computer",
        "a decoder logic circuit converts binary code corresponding decimal code decoders used variety applications, including data storage transmission, error detection correction, address decoding",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "a digital fsm model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called { transition rule} fsm comprises five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs",
        "an encoder helps implement fsm design translating user's input signal used fsm encoder produces signal p indicating user trying make purchase, two-bit signal indicating item user wants decoder takes signal produces individual item release signals r_1, r_2, r_3",
        "a decoder used fsm design generate release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "a digital fsm used control stoplights intersection two roads fsm two inputs, f, two outputs, l1 l0 output fsm used control stoplights fsm designed stoplights red one roads times road green light, controller show yellow light showing red light give drivers warning allow slow down finally, fairness, controller alternate green lights two roads",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "what ideas used reduce number metrics some ideas used reduce number metrics include: identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "1 three ranges possible measurement values given metric the three ranges possible measurement values given metric values equivalently useful, ordered interesting respect one another, impossible use practice",
        "the vending machine fsm designed control release items vending machine based user's purchase request fsm uses priority encoder determine item user requested, decoder generate individual item release signals",
        "the coin accept bit item release bits used indicate whether coin accepted whether item released, respectively",
        "the numeric representation money held used track value money inserted machine allows machine keep track much money inserted reject coins value high",
        "a priority encoder type encoder generates signal whenever input lines active, encodes index highest active input two-bit unsigned number priority encoder used determine input lines highest priority",
        "what three ranges given metric the first range measurement values equivalently useful second range possible values ordered interesting respect one another values third range impossible use practice",
        "the main difference mux decoder mux multiple inputs one output, decoder one input multiple outputs mux used select one several input signals send output, decoder used interpret input signal produce several output signals",
        "a decoder logic circuit converts binary code set signals used operate device decoder takes input signal, typically one coded binary number, produces one output possible value signal decoder enabled (en=1), and gates produces one minterm input signal s decoder enabled (en=0), decoder produces 0 bits",
        "how multi-metric optimization useful engineering multi-metric optimization useful engineering allows engineers identify important metrics balance design effectively according them multi-metric optimization also allows engineers get rid many metrics possible focus important ones",
        "a decoder device converts coded signals usable information decoders used variety applications, error detection correction",
        "a decoder logic circuit converts coded inputs coded outputs, usually one output code input code decoders used variety applications, including data storage transmission, error detection correction, data compression",
        "a priority encoder type encoder assigns priority certain input signals used determine input signal given priority multiple input signals present",
        "a priority encoder type encoder assigns priority certain input signals priority encoder takes signal produces output signal indicates input signal highest priority output signal typically binary number used select one input signals",
        "a decoder logic circuit converts signals one form another binary form, decoder used convert binary number decimal number",
        "a mux logic block allows us use one digital signal select several others forwarded output decoder logic block converts binary code set signals",
        "a decoder used context simplify expression logic function using decoder, function expressed two-level logic function, easier understand manipulate",
        "the value register n corresponds number nickels inserted machine user inserts quarter, machine transition state n+5, indicating 5 nickels inserted user attempts purchase item without inserting enough money first, machine remain state reject request",
        "the and gate left used determine input values 1 input values 1, output and gate 1 input values 0, output and gate 0",
        "the vending machine uses sensors detect coin inserted first sensor positioned dime pass beneath it, second sensor positioned coins pass front it signal second sensor used clock fsm, signal first sensor indicates whether coin dime quarter",
        "the vending machine knows purchase requested user pushes one item selection buttons causes priority encoder produce signal p indicating user trying make purchase",
        "the input fsm reset button r, four buttons b_f, b_x, b_g, b_c fsm produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs",
        "the input fsm 3-bit register 6-bit timer timer used count produce output z=1 reaches 0 register used store state fsm",
        "the priority encoder used determine item user wants purchase, generate signal indicating user trying make purchase output priority encoder used select value one price registers, subtracted current number nickels stored register purchase successful, price subtracted number nickels item released",
        "the fsm alternates green lights two roads setting timer different value state fsm changes causes lights change color cycle-by-cycle basis, green light alternating two roads",
        "the signal f used set timer certain conditions particular, used set timer state changes",
        "the two approaches fsm design state-transition table state diagram state-transition table lists possible states system in, state diagram shows sequence states system goes through state-transition table compact easier use comparing functions, state diagram intuitive easier understand",
        "the purpose notes introduce important abstraction logic design, use abstraction design ripple-carry adder ripple-carry adder adder adds single bit passes necessary information another copy itself design less efficient designs optimized specific purpose, simplicity approach makes tradeoff interesting one",
        "a finite state machine model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called transition rule",
        "one way transform code written high-level language fsm use compiler compiler program translates code written high-level language code run computer another way transform code written high-level language fsm use interpreter interpreter program executes code written high-level language",
        "one design fsm executes simple pieces flow chart breaking program smaller steps mapping step state fsm one also use registers counters implement variables program, use comparator implement test statement",
        "the general model computer turing machine mathematical model computer used simulate computer",
        "one way build fsm allows pieces executed specified fsm built use state machine output routed different inputs allows fsm configured execute different pieces code based input another way build fsm allows pieces executed specified fsm built use state machine multiple states executed parallel allows fsm configured execute different pieces code parallel based input",
        "the array notation code means code trying convert input user appropriate result, store result memory address given next argument",
        "the idx variable used keep track number operations logic expression metric used estimate number transistors needed design, turn estimate area required design",
        "the min variable heuristic metric used estimate time needed compute function metric based longest chain operations performed instance variable rationale metric gate outputs change instantaneously inputs change",
        "the flow chart represents steps taken designing new product first step think carefully metrics possible interest second step get rid many metrics possible third step identify metrics practical impact current technology fourth step set threshold values metrics simplify reasoning them fifth step eliminate redundant metrics sixth step calculate linear sums reduce count metrics seventh step make use notion pareto optimality",
        "there three variables used code, x, y, z value x initialized 42, value initialized x value z initialized",
        "a fsm implemented digital system, states represented patterns using fixed number bits, inputs translated bits, outputs translated bits transition rules must complete, meaning given state fsm pattern input bits, transition must defined state another state outputs digital fsm calculated using boolean logic expressions",
        "from passage, inferred logical completeness necessarily help efficient design logic functions words, single boolean logic function expressed many different ways therefore, important engineers learn develop efficient implementation function, well determine whether two logic expressions identical without actually writing truth tables",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills students learn coming months",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways, learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills start learn coming months",
        "what difference sop pos sop (sum products) boolean algebra expression or anded terms, pos (product sums) expression and ored terms",
        "the first examples passage two-level logic, demorgan's law, sop form two-level logic popular way expressing logic functions, demorgan's law way simplify expressions sop form way representing logic function",
        "the design process involves manipulation logic expressions order optimize specific metrics, cost, power, performance today, manipulation performed almost entirely computers, human engineers supplying logic functions interest imposing constraints process",
        "an fsm must initialized ensure starts known state allows fsm function correctly avoid potential problems could arise unknown starting state",
        "one important reason compatibility components digital system helps ensure system function correctly components compatible, system may work correctly, may work all additionally, compatibility among components help reduce cost manufacturing system, well cost maintaining repairing system",
        "the output counter number successful conversions made scanf function",
        "the purpose adding and gates input create logic function efficient terms area power done reducing number variables expression",
        "one reason important start representation makes sense human humans must supply logic functions interest, must program acceptable transformations equivalent forms second reason complexity problem good way introduce real engineering finally, contextual information help develop better understanding finite state machines higher-level abstractions form core digital systems still defined directly humans today",
        "a input operand and function and function evaluates 1 input operands equal 1 input operand or function or function evaluates 1 input operand equal 1",
        "the output depend input function and evaluate 1 input values 1 input value 0, function evaluate 0",
        "the k-map represents domain function form hypercube hypercube divided regions, corresponds product literals function evaluated point hypercube, product literals implicant function function evaluates 1 point",
        "we test circuit build lab see correctly implements fsm outlined notes this, input known sequence 0s 1s see circuit outputs correct responses does, confident circuit functioning correctly",
        "passage - compact approaches comparing functions, solutions subject later class (such ece 462) {two-level logic} { two-level logic} popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams begin one demorgan's laws, illustrate algebraically graphically: c = b+a = {file=part2/figs/demorgan-nandeps,width=095in} let's say function expressed sop form, z=abc+de+fghj diagram left shows function constructed three and gates or gate using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate invert point along wire, slide bubble wire output first column",
        "what significance demorgan's law demorgan's law popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "what difference two-level logic forms logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "what reason popularity two-level logic the reason popularity two-level logic simple way express logic functions two-level logic popular way expressing logic functions simple way express logic functions",
        "passage - two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams question - what two levels two-level logic",
        "the purpose process find best formulation specific logic function given metric done using heuristic approaches find solutions strike balance various metrics cost, power, performance",
        "1 difference two-level three-level logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic three-level logic way expressing logic functions using three levels three levels refer number functions input passes reach output, sop pos forms examples three-level logic",
        "what reason popularity two-level logic the popularity two-level logic due fact simple way express logic functions additionally, two-level logic easy map cmos gates"
    ],
    "45": [
        "the design process involves manipulation logic expressions order optimize specific metrics, cost, power, performance today, manipulation performed almost entirely computers, human engineers supplying logic functions interest imposing constraints process",
        "the fourth step design process choose particular design set possible designs choice made based number factors, including objectives design, constraints problem, preferences designer",
        "the device used turn save energy done using heuristic approaches find solutions strike balance different metrics, cost, power, performance human engineer impose constraints, limits chip area limits minimum performance, order guide process",
        "starting human-based design process typically results design efficient effective one mapped high-level programming language human designers easily optimize design specific metrics, power consumption performance additionally, human designers easily impose constraints design, limits chip area minimum performance, order guide design process",
        "the design process digital fsm includes six steps: developing abstract model, specifying i/o behavior, completing specification, choosing state representation, calculating logic expressions, implementing flip-flops gates",
        "an fsm must initialized ensure starts known state avoid undefined behavior without initialization, fsm may produce incorrect results may work all",
        "the choice representation fsm's internal state affects complexity implementation terms number states, number inputs, number outputs, number transition rules",
        "the design process digital fsm typically consists six steps: (1) developing abstract model, (2) specifying i/o behavior, (3) completing specification, (4) choosing state representation, (5) calculating logic expressions, (6) implementing flip-flops gates",
        "an fsm must initialized ensure starts known state allows fsm function correctly avoid potential problems could arise unknown starting state",
        "from passage, seems digital fsm designed abstract model first identifying finite set states, set possible inputs, set possible outputs, set transition rules then, fsm implemented digital system representing states patterns using fixed number bits, translating inputs bits, translating outputs bits finally, transition rules defined given state fsm pattern input bits, transition defined state another state",
        "a fsm implemented digital system, states represented patterns using fixed number bits, inputs translated bits, outputs translated bits transition rules must complete, meaning given state fsm pattern input bits, transition must defined state another state outputs digital fsm calculated using boolean logic expressions",
        "the design process counter number states power two choose representation states makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "the fsm initialized one six states desired loop ensures lights roads red cars waiting one roads",
        "the choice representation fsm's internal state affects complexity implementation states represented bit patterns, transition rules must complete states represented abstract states, outputs state must specified",
        "the first step design process develop abstract model model translation human language description model states desired behavior model particularly thorough exact stage",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "the choice state representation affects implementation fsm terms number gates inverters required, well delay overall design serial comparator design based 2-bit slice variant, example, requires 24 gates 10 inverters, much larger earlier serial design terms gate delays, however, new design identical, meaning comparisons finished half time realistic area timing metrics show slightly difference two designs differences dominate results design carefully considered",
        "the choice fsm's input output behavior affects design process determining set possible states set possible outputs set possible states determined set possible inputs, set possible outputs determined set possible outputs",
        "the inputs gray code counter current state counter clock signal clock signal triggers state change counter",
        "the transition diagram two-bit gray code counter loop counter moving one state next cycle state diagram marked internal state value s_1s_0 (before ``/'') output z_1z_0 (after ``/''), always equal counter",
        "the implementation gray code counter developed first filling k-maps next-state values, deriving algebraic expressions next-state logic used develop implementation",
        "the timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle states thus act like counter",
        "a gray code counter type counter cycles possible bit patterns certain length states transition diagram gray code counter form loop, counter moving one state next cycle state diagram marked internal state value output value, always equal counter",
        "a gray code counter designed first creating transition diagram shows states outputs counter next, next-state logic developed creating k-maps next-state values deriving algebraic expressions finally, next-state logic implemented diagram",
        "the internal state value third bit gray code counter s_2s_1s_0=001 hold=1, next-state logic s_1^+ s_0^+ reduces s_1^+=s_1 s_0^+=s_0; words, counter stops counting simply stays current state hold=0, equations become s_1^+=s_0 s_0^+={{s_1}}, produces repeating sequence s_1s_0 00, 01, 11, 10, desired",
        "the next state value s2 0 timer set state changes, find duration state analyzing muxes bottom mux selects s_2=0, selects output top mux s_2=1",
        "the next state value s1 1 value s1 determined value s0, value s0 1",
        "the next state value s0 0 timer set state changes, find duration state analyzing muxes bottom mux selects s_2=0, selects output top mux s_2=1 top mux selects b s_0=1, selects c s_0=0",
        "the fully-specified transition diagram three-bit gray code counter follows: the states counter form loop, counter moving one state next cycle each state diagram marked internal state value s_2s_1s_0 (before \" / \") output z_2z_1z_0 (after \" / \") based transition diagram, next-state values s_2^+, s_1^+, s_0^+ filled shown",
        "the next-state values three-bit gray code counter follows: s_2^+=0, s_1^+=s_0, s_0^+={{s_1}}",
        "the next-state logic three-bit gray code counter follows: s_2^+ = s_2 + s_0 s_1^+ = s_2 s_0^+ = s_2 s_1",
        "the implementation diagram three-bit gray code counter logic diagram shows inputs, outputs, next-state logic counter diagram ordered left right {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2, makes easy read check correctness",
        "the vertical lines carrying current state values inverses back next state logic inputs ordered left right (on left side figure) {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2",
        "the purpose vertical lines carrying current state values inverses back next state logic inputs ensure state fsm always consistent necessary safety reasons, fsm must always ensure lights one roads red times",
        "the next-state values s_2, s_1, s_0 given table right states act like counter, examining connections, derive equations next state draw transition diagram six states loop defined next-state logic, two remaining states converging loop single cycle",
        "yes, choose use counter's internal state directly output values colors need produce outputs unique bit patterns using counter's internal state directly output values, simplify design",
        "a fully-specified transition diagram diagram specifies states system in, well transitions states allows clear understanding behavior system",
        "the next-state logic equations functions describe relationship current state system next state system functions represented either sop pos form demorgan's law used simplify functions replacing or gates nand gates, and gates nor gates",
        "the color mapping three-bit rgb encoding system colors produced unique bit patterns states form loop, marked internal state value s_2s_1s_0 output rgb",
        "the transition diagram color sequencer loop six states, two remaining states converging loop single cycle lights red states, necessary safety timer set state changes, duration state calculated analyzing muxes",
        "the next-state values s_2, s_1, s_0 1",
        "the initial state three flip-flops implementation 0s 1s use init input choose normal operation (init=0) fsm forcing fsm next state given i_2i_1i_0 (when init=1)",
        "the timer set 0, state fsm changed next state sequence new state fsm determines duration next state, timer set accordingly",
        "the passage states power consumption important metric engineers must take account designs however, cases, desktop high-end server processors, metrics (such performance) may important always want operate edge interesting range could going wrong, engineers taking power consumption account much be",
        "one possibility fsm resetting properly, starts unexpected state another possibility race condition fsm, get unexpected state inputs change quickly",
        "the issue fsm getting unexpected states cause output circuit glitch problematic applications stable output required",
        "the fsm get unexpected states inputs set properly example, input set 111, fsm stay white state indefinitely",
        "the initial state three flip-flops implementation 0 state explicit mechanism initialization forces flip-flop 0 state alternatively, could add extra logic design would allow us force fsm specific state next cycle",
        "one possibility fsm resetting properly, start expected initial state another possibility race condition fsm, reach unexpected state inputs change quickly",
        "the initial state three flip-flops unknown unless explicit mechanism initialization initialization work two ways first approach makes use flip-flop design know, flip-flop built pair latches, make use internal reset lines latches force flip-flop 0 state (or 1 state) using additional input alternatively, add extra logic design",
        "one way make use internal reset lines latches force flip-flop 0 state done connecting reset lines latches 0 voltage source",
        "a next-state table lists possible states fsm in, well inputs outputs state transition diagram shows order states visited, based inputs outputs",
        "there four states second version table states a, b, c, d b on state, c off state",
        "the design counter includes eight states, three state bits used keep track current state choice representation fsm's states dramatically affect design complexity right strategy thus often start selecting representation makes sense human, even requires bits strictly necessary",
        "the two states first column table states fsm f=0 case, timer set state changes, find duration state analyzing muxes",
        "the four counting states are: 1) state a: timer set s_2=0 duration state a 2) state b: timer set b s_0=1 duration state b 3) state c: timer set c s_0=0 duration state c 4) state d: timer set s_2=1 duration state d",
        "there four halted states: halt a, halt b, halt c, halt d states, counter retains current value user presses \"go\" button",
        "pressing ``halt'' button nothing counter halted counter remains state ``go'' button pressed",
        "an fsm finite state machine, mathematical model computation used design computer programs digital logic circuits abstract machine one finite number states",
        "there disadvantages using fsm first, fsm designed carefully, hard understand debug second, fsm use resources simpler design, state machine finally, fsm difficult change extend simpler design",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "the input behavior machine based type coin inserted selection item purchase user inserts coin nickel, machine reject coin remain state user inserts nickel, machine transition next state accept coin user selects item purchase, machine release item user inserted enough money otherwise, machine remain state",
        "the states transition diagram represent different colors stoplight first two states red, followed yellow, green last two states red",
        "the uninterrupted counting cycle represents duration state fsm used calculate duration state fsm f=0",
        "the design continues choosing state representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "if user presses \"go\" button state {count a}, outputs c_l=11 c_m=01 means user get one half servings lychee half serving mango",
        "there explicit answer question passage however, based information given, seems user presses ``halt'' button state { count a}, system reset state { halt a}",
        "there two possible outcomes user presses ``go'' button state { halt a} first outcome fsm moves state { count b}, next state sequence second outcome fsm resets state { count a}, initial state",
        "there possible ways answer question one way would say user presses ``halt'' button state { halt a}, system reset state { count a} another way answer question would say user presses ``halt'' button state { halt a}, system remain state { halt a}",
        "there two possible ways user could press buttons state { halt a} first way user could press \"halt\" button \"go\" button case, fsm would move state { halt a} state { count b} second way user could press \"go\" button \"halt\" button case, fsm would move state { count b} state { halt a}",
        "if ``halt'' button pressed (hg=10), counter remains halted state { halt a} buttons pressed (hg=11), ``halt'' overrides ``go,'' nothing special alone pressed counter halted thus, input patterns hg=10 hg=11 also take state { halt a} back itself",
        "the design counter completed applying decisions made { count a} state counting states, decisions made { halt a} state halted states results design states labeled internal state outputs (s_2s_1s_0/z_1z_0)",
        "one important reason consider possible input conditions possible states help ensure design correct example, design ever receives input values within certain range, possible design actually correct input values considering possible input conditions help catch errors like this another reason consider possible input conditions help optimize design example, design ever receives input values within certain range, possible simplify design make efficient considering possible input conditions help identify opportunities optimization",
        "the state table form specification make missing parts specification obvious showing different states system transitions states help identify parts specification missing needs added order complete specification",
        "if ``halt'' button pressed (hg=10), counter remains halted state buttons pressed (hg=11), counter also remains halted state",
        "the fsm needs least three states order eight states three possible items purchased, item purchased one two ways (with without enough money)",
        "the choice representation fsm's states affect design complexity determines many bits needed represent state bits needed represent state, design complex",
        "the choice state representation affects design complexity ways first, affect number bits needed represent states second, affect number possible states represented third, affect number transitions need considered designing state machine",
        "abstraction powerful tool help simplify complex problems selecting state representation, abstraction help identify important aspects problem ignore irrelevant details make easier find solution effective efficient",
        "abstraction selecting state representation lead better design allowing engineer focus important aspects problem ignoring details important help simplify problem make easier find solution",
        "the number state bits affects design complexity determines number possible states fsm in larger number state bits means possible states design must able handle them",
        "abstraction important selecting state representation allows designer select representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "different state representations lead different fsm designs example, states represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits fsm implemented digital system, states must represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits",
        "one reason important start representation makes sense human humans must supply logic functions interest, must program acceptable transformations equivalent forms second reason complexity problem good way introduce real engineering finally, contextual information help develop better understanding finite state machines higher-level abstractions form core digital systems still defined directly humans today",
        "hold 1 counter count state s_2=0 counter already halted press \"go\" button",
        "hold = h + s_2 when counter halt state s_2=1, hold = 1 counter stop (move halted state without changing value) h true, halted states, s_2=1, counter stops (stays halted state) h+ true",
        "the value s_2 counter count state hold=0 undefined because, passage states, overflow occurs either operands negative operands positive operands negative, resulting sum equal c however, operands positive, resulting sum less c thus, impossible determine value s_2 without knowing values operands",
        "s_2 1 counter halt state hold=1 s_2=1, counter halted, hold=1, counter retain current value",
        "the value s_1s_0 counter count state hold=1 01",
        "the next-state logic s_1^+ s_0^+ hold=0 follows: s_1^+ = s_0 + hold s_0^+ = s_1 + hold",
        "the use s_2 separates logic deciding whether advance counter allowing counter halted state (s_2=1) counting state (s_2=0) hold=1, counter retains state, hold=0, counts",
        "f two effects operation fsm first, prevents timer reset enters new state effect lengthening duration state second, prevents fsm entering loop defined next-state logic effect halting fsm current state",
        "the state representation used determine next state fsm done examining inputs fsm deriving equations next state states fsm act like counter, examining connections, next state determined",
        "there several benefits good state representation first, help reduce number pins needed chip second, improve density memory chip third, improve speed memory chip",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor performance cases, bad state representation also lead increased costs fabrication testing",
        "a good state representation easy understand able capture relevant information problem bad state representation may difficult understand may able capture relevant information",
        "the state representation significant impact overall design system affects way system behaves interacts environment well-chosen state representation simplify design system make efficient",
        "the states fsm act like counter, value fsm set whenever state changes timer set state changes, duration state determined value timer fsm also set conditions, signal f calculated",
        "a good state representation important help reduce number logic gates needed design, thus save chip area additionally, good state representation help improve performance design reducing number logic operations needed",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor power consumption cases, two metrics may strongly correlated, meaning design good one metrics frequently also good metric",
        "one way improve bad state representation make compact done using two-level logic instead three-level logic another way improve bad state representation make readable done using clear consistent naming conventions",
        "the state representation impacts fsm determining duration state timer set whenever state changes, duration state determined muxes bottom mux selects s_2=0, selects output top mux s_2=1 top mux selects b s_0=1, selects c s_0=0",
        "a bad state representation lead number problems, including wasted engineering effort, poor performance, even product cancellations",
        "a bad state representation fixed using code larger hamming distance enable system detect correct errors",
        "there best state representation fsm important factor representation complete, meaning states represented inputs accounted for considerations include size state space number inputs outputs",
        "a good state representation important help reduce number transistors needed design, thus save space energy additionally, help improve performance design making easier computer manipulate logic expressions",
        "one build static rams using logic using tri-state buffers tri-state buffers used create larger memories using multiple chips wider memories also created using multiple chips",
        "tri-state buffers used provide logical disconnection tri-state buffer output logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "one build memories using logic creating tri-state buffer logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "a tri-state buffer type digital logic device used either connect disconnect signal line power source ground achieved using two transistors, one connect signal line power source, connect signal line ground buffer enabled, transistors turned on, signal line connected either power source ground, depending value input signal buffer disabled, transistors turned off, effectively disconnecting signal line power source ground",
        "a tri-state buffer logic circuit used disconnect output logic circuit achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "an sram cell flip-flop made two cross-coupled inverters output one inverter connected input other, vice versa power applied, sram cell one two stable states, represent 0 1 state cell changed applying correct sequence voltages inputs",
        "the main benefit using tri-state buffer allows logical disconnection buffer output means multiple memories share output line without need additional multiplexers",
        "a tri-state buffer achieves logical disconnection using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "tri-state buffers used reduce number pins needed chips combining inputs outputs allowed chip designers halve number pins needed",
        "a tri-state buffer type digital logic circuit used either connect disconnect signal line power supply ground done using two transistors, one connect signal line power supply, connect signal line ground buffer enabled, transistors turned on, signal line connected either power supply ground, depending value input signal buffer disabled, transistors turned off, signal line effectively disconnected power supply ground",
        "a tri-state buffer digital circuit used either connect disconnect output signal line buffer three states: high, low, high impedance buffer high state, output connected signal line copies signal input buffer low state, output disconnected signal line buffer high impedance state, output effectively disconnected signal line",
        "the benefit using tri-state buffer allows logical disconnection tri-state buffer output means output shared one memory without need additional multiplexers useful creating larger memories combining multiple chips",
        "tri-state buffers used construct larger memories using multiple chips connecting external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used construct wider memories connecting data inputs outputs multiple memories together allows output line shared one memory without need additional multiplexers",
        "a tri-state buffer digital circuit used either connect disconnect signal circuit buffer three states: high, low, high impedance high impedance state effectively disconnects signal circuit allows multiple memories share output line without need additional multiplexers",
        "a tri-state buffer used create electrical connection tri-state buffer output logical disconnection achieved using outer transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "tri-state buffers used reduce number pins needed chip combining inputs outputs example, data inputs outputs memory combined single set data wires, bidirectional signals reduces number pins needed still allowing amount data transferred",
        "a row natural basis refresh cycle dram data pins provide bidirectional signals reading writing elements dram output enable input, oe, controls tri-state buffers dram determine whether dram drives data pins we input, controls type operation, also present",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, problem solved",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, servo held place, desired",
        "prof doug jones designed vending machine application fsm first identifying different states machine could in created state diagram showed machine would transition one state another finally, implemented fsm hardware using altera quartus software",
        "a signal used set timer f 0, timer set state changes",
        "this synchronous fsm implemented digital logic fsm finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs",
        "the possible outputs fsm a=1 p=1 f signal used set timer, either 0 1 f=0, timer set state changes f=1, timer set state changes light one roads green",
        "the start state initial state fsm state, money deposited yet fsm needs keep track much money inserted order decide whether user purchase one items information alone enough simplest machine, let's create machine adjustable item prices",
        "the dime quarter states used represent user inserted one coin purpose states output a=1 p=0, indicating user yet paid full price another coin needed",
        "the rejectd rejectq states used handle user mistakes user enters second dime dime state, fsm reject coin rejectd state rejects dime (a=0) continues wait quarter (p=0) rejectq state used handle user inserts one quarter",
        "the start state first state fsm sequence used initialize fsm",
        "the dime state state machine waiting dime inserted first state machine accepts coin machine outputs a=1 p=0 state, indicating user yet paid full price 35 cents",
        "the 'quarter' state refers fact addition unit 4-bit examples closed addition means value n, easily find two 4-bit unsigned numbers that, added together, cannot represented 4-bit unsigned number n=4, example, add 12 (1100) 6 (0110) obtain 18 since 18 outside range [0,2^4-1] representable using 4-bit unsigned representation, representation breaks try represent sum using representation",
        "the paid state state user paid full price 35 cents next states paid dime dime inserted quarter quarter inserted",
        "the 'rejectd' state state processor interrupts program due error unexpected behavior state usually causes program terminate",
        "the state representation lab fsm 3-bit binary number, following meaning: s_2: type last coin inserted (0 dime, 1 quarter) s_1: one quarter inserted (1 yes, 0 no) s_0: one dime inserted (1 yes, 0 no)",
        "based passage, least 33 bits internal state needed fsm needs track number cycles needed serial comparator execute comparison, least 32 cycles additionally, fsm needs track whether loop done, requires least one additional bit",
        "there 64 bit patterns available paid state",
        "the final state table fsm given passage table shows states fsm, outputs state, duration state",
        "the meaning assigned bit patterns makes easier understand behavior fsm example, paid state, last coin inserted may either type, type all, since decided start fsm state well however, four states, meanings provide clear understanding state fsm",
        "the state table represents six states loop defined next-state logic, two remaining states converging loop single cycle lights red states, necessary safety",
        "there 63 possible states paid state machine track 315 dollars worth nickels, 63 nickels",
        "prof jones assigns bit patterns way makes easy humans understand meaning states example, paid state, last coin inserted may either type, type all, since fsm starts state however, four states, meanings clear easy apply",
        "one reason try leverage fact next-state patterns two states relevant may simplify design system next-state patterns needed, system designed without them, may make design process simpler faster additionally, eliminating next-state patterns may also reduce cost system",
        "the final state table state transition diagram appear follows: the final state table lists six states loop defined next-state logic, two remaining states converging loop single cycle table also includes states outside desired loop lights red states, necessary safety the state transition diagram shows six states loop defined next-state logic, two remaining states converging loop single cycle diagram also shows duration state",
        "the input sequence 111010010001 significant determines duration state fsm",
        "the input sequence used initialize fsm sequence 0s 1s input fsm order set state fsm desired state",
        "the outputs needed observe state check output logic values state register timer outputs used determine duration state order states occur",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "an fsm finite state machine, model computation used design computer programs hardware fsm defined set states, set inputs, set outputs, set transitions states",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "a digital fsm model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called { transition rule} fsm comprises five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs",
        "a digital fsm finite state machine implemented digital system means states must represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits addition, transition rules must complete, meaning given state fsm pattern input bits, transition must defined another state",
        "one could design game controller logic puzzle would buttons corresponding different operations could performed logic puzzle example, could button add new element puzzle, button remove element puzzle, button change value element puzzle game controller could also display would show current state puzzle player's progress",
        "the inputs fsm states two roads, outputs colors lights two roads fsm ensures lights one roads red times, lights road green fsm also alternates green lights two roads",
        "the state fsm split two pieces: 3-bit register 6-bit timer timer simply binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the fsm five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs class, focus clocked synchronous fsm implementations, fsm's internal state bits stored flip-flops",
        "the transitions states well-defined fsm timer counts produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the fsm needs track state stoplight duration state",
        "the value register n corresponds number nickels inserted machine user inserts quarter, machine transition state n+5, indicating 5 nickels inserted user attempts purchase item without inserting enough money first, machine remain state reject request",
        "the output or gate 1 signal f 1 f 1 state fsm s_0s_1s_2=001 s_0s_1s_2=011",
        "the output fsm position farmer, fox, goose, corn output either left bank right bank river game also two indicators: w reaching winning state, l reaching losing state",
        "the state represented fxgc, f position farmer, x position fox, g position goose, c position corn game five buttons: reset, cross alone, cross fox, cross goose, cross corn game stops player wins loses",
        "the next state fxgc=0101 farmer bank fox, corn, b_x b_c buttons ignored, leading next-state table right notice b_g accepted even b_c pressed farmer bank corn",
        "the input fsm 3-bit register 6-bit timer timer used count produce output z=1 reaches 0 register used store state fsm",
        "the output fsm sequence red, yellow, green lights alternate two roads duration state determined signal f f 0, timer set state changes f 1, timer set state changes light one roads green",
        "the inputs fsm states two roads, timer, signal f",
        "the outputs fsm states stoplights stoplights either red, green, yellow fsm controls duration light",
        "the signal f 1 timer reaches 0 state changes",
        "the state fsm split two pieces: {3-bit} register {6-bit} timer timer simply binary counter counts downward produces output z=1 reaches 0 notice register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle we thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the fsm ensures lights one roads red times keeping track state light light green, turn yellow red light red, stay red",
        "the fsm shows yellow light showing red light setting timer specific value state fsm changes value set signal f, calculated bottom fsm logic diagram",
        "the fsm alternates green lights two roads setting timer different value state fsm changes causes lights change color cycle-by-cycle basis, green light alternating two roads",
        "the signal f used set timer certain conditions particular, used set timer state changes",
        "the fsm initialized state \"000\" order ensure lights one roads red times timer set \"a\" order maintain new value number cycles",
        "the stoplight controller ensures lights one roads red times using state machine six states states determined inputs fsm, states two roads output fsm controls lights two roads controller alternates green red lights two roads",
        "the stoplight controller alternates green lights two roads changing value register s value changed timer reaches 0, timer set enters new state duration state determined value register s",
        "the signal f allows timer set conditions, addition state changes allows flexibility duration state",
        "the control structure code maps high-level fsm design breaking program simple steps mapping step state fsm number states fsm depend number steps program",
        "the two approaches fsm design state-transition table state diagram state-transition table lists possible states system in, state diagram shows sequence states system goes through state-transition table compact easier use comparing functions, state diagram intuitive easier understand",
        "a finite state machine model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called transition rule",
        "a computer machine programmed carry set arithmetic logical operations automatically fsm model behavior composed finite set states, transitions states, actions",
        "the control structure code maps high-level fsm design breaking program simple steps, one step flow chart may sometimes require one state fsm similarly, one fsm state may able implement several steps flow chart, steps performed simultaneously",
        "one design fsm executes simple pieces flow chart breaking program smaller steps mapping step state fsm one also use registers counters implement variables program, use comparator implement test statement",
        "one way build fsm allows pieces executed specified fsm built use state machine output routed different inputs allows fsm configured execute different pieces code based input another way build fsm allows pieces executed specified fsm built use state machine multiple states executed parallel allows fsm configured execute different pieces code parallel based input",
        "a word context computer memory sequence bits represents unit data words represent numbers, characters, data types size word typically determined computer's word size, number bits computer process time",
        "the input sequence testing follows: first, user prompted input two integers decimal form, converted 2's complement stored variables 'a' 'b' next, user prompted input ascii character, value hexadecimal, double-precision floating-point number, stored variables 'c', 'u', 'd', respectively finally, user prompted input two real numbers decimal form, converted single- double-precision floating-point numbers stored variables 'f' 'd', respectively",
        "the value register equivalence class sum two 4-bit numbers case, sum 18, equivalent 2 (mod 16)",
        "there several benefits using fsm one benefit fsm used implement wide range logic functions another benefit fsm used construct larger memories multiple smaller memories finally, fsm used reduce number pins needed chip",
        "the fsm stoplight controller ensures lights one roads red times controller also alternates green lights two roads",
        "the vending machine application fsm designed team engineers fsm designed control simple vending machine accepts us coins payment offers choice three items sale machine adjustable item prices, fsm needs keep track much money inserted order decide whether user purchase one items",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "prof chris schmitz prototyped constructed physical elements help ece shop designed vending machine application fsm, prof doug jones created wiki documentation altera quartus portions lab casey smith, head guru ece instructional labs, developed new debounce design made changes improve robustness",
        "there two optical sensors positioned different heights device first sensor positioned high enough slope dime passes beneath sensor, allowing signal produced sensor tell us whether coin dime quarter second sensor positioned coins pass front it signal second sensor used clock fsm",
        "the fsm uses signal determine whether accept reject coin checking rising edge signal second sensor rising edge occurs, signal first sensor indicates whether coin quarter (t=1) dime (t=0) sample timing diagram lab appears right clock signal generated lab square wave---in words, high low portions equal---but also unlikely periodic instead, ``cycle'' defined time coin insertions",
        "the possible inputs fsm dime (t=0) quarter (t=1) machine reject input user tries purchase item without inserting enough money first, fsm also reject request",
        "our machine accept pennies, let's fsm keep track much money inserted multiple 5 cents (one nickel) table right shows five types coins, value dollars, value terms nickels expensive item machine might cost dollar two, fsm must track least 20 40 nickels value let's decide use six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "the purpose fsm control stoplights busy intersection fsm ensures lights always red one roads, yellow light shown green light, green lights alternated two roads",
        "we test circuit build lab see correctly implements fsm outlined notes this, input known sequence 0s 1s see circuit outputs correct responses does, confident circuit functioning correctly",
        "the input sequence used test fsm sequence 0s 1s applied inputs fsm input sequence used determine output fsm",
        "an encoder helps implement fsm design translating user's input signal used fsm encoder produces signal p indicating user trying make purchase, two-bit signal indicating item user wants decoder takes signal produces individual item release signals r_1, r_2, r_3",
        "a decoder used fsm design generate release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "a digital fsm used control stoplights intersection two roads fsm two inputs, f, two outputs, l1 l0 output fsm used control stoplights fsm designed stoplights red one roads times road green light, controller show yellow light showing red light give drivers warning allow slow down finally, fairness, controller alternate green lights two roads",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "the purpose fsm control stoplight stoplight must red one roads times, controller show yellow light showing red light give drivers warning allow slow down controller also alternate green lights two roads",
        "the fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the vending machine fsm designed control release items vending machine based user's purchase request fsm uses priority encoder determine item user requested, decoder generate individual item release signals",
        "the fsm responsible controlling stoplights busy intersection ensures lights always red one roads, green light always followed yellow light, green lights alternated two roads",
        "the fsm needs keep track loop index, current minimum value, progress serial comparator",
        "the fsm responsible controlling stoplights busy intersection ensures lights one roads red times, road green light, controller show yellow light showing red light",
        "the output fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the vending machine knows much item costs owner machine sets prices dynamically machine keeps track much money inserted multiple 5 cents (one nickel) expensive item machine might cost dollar two, fsm must track least 20 40 nickels value",
        "the vending machine uses sensors detect coin inserted first sensor positioned dime pass beneath it, second sensor positioned coins pass front it signal second sensor used clock fsm, signal first sensor indicates whether coin dime quarter",
        "the input fsm reset button r, four buttons b_f, b_x, b_g, b_c fsm produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs",
        "the output fsm looks like green light followed yellow light followed red light",
        "when player loses, output fsm looks like red roads controller must ensure lights one roads red times",
        "the fsm handles multiple input events single clock cycle first storing input events queue fsm ready process input event, dequeues event queue processes it",
        "the purpose fsm control stoplights busy intersection fsm ensures lights one roads red times, road green light, controller show yellow light showing red light",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "one way transform code written high-level language fsm use compiler compiler program translates code written high-level language code run computer another way transform code written high-level language fsm use interpreter interpreter program executes code written high-level language"
    ],
    "46": [
        "the choice representation fsm's internal state affects complexity implementation terms number states, number inputs, number outputs, number transition rules",
        "from passage, seems digital fsm designed abstract model first identifying finite set states, set possible inputs, set possible outputs, set transition rules then, fsm implemented digital system representing states patterns using fixed number bits, translating inputs bits, translating outputs bits finally, transition rules defined given state fsm pattern input bits, transition defined state another state",
        "a fsm implemented digital system, states represented patterns using fixed number bits, inputs translated bits, outputs translated bits transition rules must complete, meaning given state fsm pattern input bits, transition must defined state another state outputs digital fsm calculated using boolean logic expressions",
        "the design process counter number states power two choose representation states makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "the fsm initialized one six states desired loop ensures lights roads red cars waiting one roads",
        "the choice representation fsm's internal state affects complexity implementation states represented bit patterns, transition rules must complete states represented abstract states, outputs state must specified",
        "the first step design process develop abstract model model translation human language description model states desired behavior model particularly thorough exact stage",
        "the choice fsm's input output behavior affects design process determining set possible states set possible outputs set possible states determined set possible inputs, set possible outputs determined set possible outputs",
        "the timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle states thus act like counter",
        "a gray code counter type counter cycles possible bit patterns certain length states transition diagram gray code counter form loop, counter moving one state next cycle state diagram marked internal state value output value, always equal counter",
        "a gray code counter designed first creating transition diagram shows states outputs counter next, next-state logic developed creating k-maps next-state values deriving algebraic expressions finally, next-state logic implemented diagram",
        "the fully-specified transition diagram three-bit gray code counter follows: the states counter form loop, counter moving one state next cycle each state diagram marked internal state value s_2s_1s_0 (before \" / \") output z_2z_1z_0 (after \" / \") based transition diagram, next-state values s_2^+, s_1^+, s_0^+ filled shown",
        "the next-state values s_2, s_1, s_0 given table right states act like counter, examining connections, derive equations next state draw transition diagram six states loop defined next-state logic, two remaining states converging loop single cycle",
        "a fully-specified transition diagram diagram specifies states system in, well transitions states allows clear understanding behavior system",
        "the color mapping three-bit rgb encoding system colors produced unique bit patterns states form loop, marked internal state value s_2s_1s_0 output rgb",
        "the transition diagram color sequencer loop six states, two remaining states converging loop single cycle lights red states, necessary safety timer set state changes, duration state calculated analyzing muxes",
        "the passage states power consumption important metric engineers must take account designs however, cases, desktop high-end server processors, metrics (such performance) may important always want operate edge interesting range could going wrong, engineers taking power consumption account much be",
        "the issue fsm getting unexpected states cause output circuit glitch problematic applications stable output required",
        "the fsm get unexpected states inputs set properly example, input set 111, fsm stay white state indefinitely",
        "a next-state table lists possible states fsm in, well inputs outputs state transition diagram shows order states visited, based inputs outputs",
        "there four states second version table states a, b, c, d b on state, c off state",
        "the design counter includes eight states, three state bits used keep track current state choice representation fsm's states dramatically affect design complexity right strategy thus often start selecting representation makes sense human, even requires bits strictly necessary",
        "the two states first column table states fsm f=0 case, timer set state changes, find duration state analyzing muxes",
        "the four counting states are: 1) state a: timer set s_2=0 duration state a 2) state b: timer set b s_0=1 duration state b 3) state c: timer set c s_0=0 duration state c 4) state d: timer set s_2=1 duration state d",
        "there four halted states: halt a, halt b, halt c, halt d states, counter retains current value user presses \"go\" button",
        "an fsm finite state machine, mathematical model computation used design computer programs digital logic circuits abstract machine one finite number states",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "the states transition diagram represent different colors stoplight first two states red, followed yellow, green last two states red",
        "the design counter completed applying decisions made { count a} state counting states, decisions made { halt a} state halted states results design states labeled internal state outputs (s_2s_1s_0/z_1z_0)",
        "one important reason consider possible input conditions possible states help ensure design correct example, design ever receives input values within certain range, possible design actually correct input values considering possible input conditions help catch errors like this another reason consider possible input conditions help optimize design example, design ever receives input values within certain range, possible simplify design make efficient considering possible input conditions help identify opportunities optimization",
        "the state table form specification make missing parts specification obvious showing different states system transitions states help identify parts specification missing needs added order complete specification",
        "the fsm needs least three states order eight states three possible items purchased, item purchased one two ways (with without enough money)",
        "the choice representation fsm's states affect design complexity determines many bits needed represent state bits needed represent state, design complex",
        "the choice state representation affects design complexity ways first, affect number bits needed represent states second, affect number possible states represented third, affect number transitions need considered designing state machine",
        "the number state bits affects design complexity determines number possible states fsm in larger number state bits means possible states design must able handle them",
        "different state representations lead different fsm designs example, states represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits fsm implemented digital system, states must represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits",
        "hold = h + s_2 when counter halt state s_2=1, hold = 1 counter stop (move halted state without changing value) h true, halted states, s_2=1, counter stops (stays halted state) h+ true",
        "the value s_2 counter count state hold=0 undefined because, passage states, overflow occurs either operands negative operands positive operands negative, resulting sum equal c however, operands positive, resulting sum less c thus, impossible determine value s_2 without knowing values operands",
        "the state representation used determine next state fsm done examining inputs fsm deriving equations next state states fsm act like counter, examining connections, next state determined",
        "the states fsm act like counter, value fsm set whenever state changes timer set state changes, duration state determined value timer fsm also set conditions, signal f calculated",
        "there best state representation fsm important factor representation complete, meaning states represented inputs accounted for considerations include size state space number inputs outputs",
        "an sram cell flip-flop made two cross-coupled inverters output one inverter connected input other, vice versa power applied, sram cell one two stable states, represent 0 1 state cell changed applying correct sequence voltages inputs",
        "a tri-state buffer digital circuit used either connect disconnect output signal line buffer three states: high, low, high impedance buffer high state, output connected signal line copies signal input buffer low state, output disconnected signal line buffer high impedance state, output effectively disconnected signal line",
        "a tri-state buffer digital circuit used either connect disconnect signal circuit buffer three states: high, low, high impedance high impedance state effectively disconnects signal circuit allows multiple memories share output line without need additional multiplexers",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, problem solved",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, servo held place, desired",
        "prof doug jones designed vending machine application fsm first identifying different states machine could in created state diagram showed machine would transition one state another finally, implemented fsm hardware using altera quartus software",
        "this synchronous fsm implemented digital logic fsm finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs",
        "the dime quarter states used represent user inserted one coin purpose states output a=1 p=0, indicating user yet paid full price another coin needed",
        "the rejectd rejectq states used handle user mistakes user enters second dime dime state, fsm reject coin rejectd state rejects dime (a=0) continues wait quarter (p=0) rejectq state used handle user inserts one quarter",
        "the paid state state user paid full price 35 cents next states paid dime dime inserted quarter quarter inserted",
        "the final state table fsm given passage table shows states fsm, outputs state, duration state",
        "the meaning assigned bit patterns makes easier understand behavior fsm example, paid state, last coin inserted may either type, type all, since decided start fsm state well however, four states, meanings provide clear understanding state fsm",
        "the state table represents six states loop defined next-state logic, two remaining states converging loop single cycle lights red states, necessary safety",
        "there 63 possible states paid state machine track 315 dollars worth nickels, 63 nickels",
        "prof jones assigns bit patterns way makes easy humans understand meaning states example, paid state, last coin inserted may either type, type all, since fsm starts state however, four states, meanings clear easy apply",
        "one reason try leverage fact next-state patterns two states relevant may simplify design system next-state patterns needed, system designed without them, may make design process simpler faster additionally, eliminating next-state patterns may also reduce cost system",
        "the final state table state transition diagram appear follows: the final state table lists six states loop defined next-state logic, two remaining states converging loop single cycle table also includes states outside desired loop lights red states, necessary safety the state transition diagram shows six states loop defined next-state logic, two remaining states converging loop single cycle diagram also shows duration state",
        "the outputs needed observe state check output logic values state register timer outputs used determine duration state order states occur",
        "an fsm finite state machine, model computation used design computer programs hardware fsm defined set states, set inputs, set outputs, set transitions states",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "a digital fsm model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called { transition rule} fsm comprises five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs",
        "a digital fsm finite state machine implemented digital system means states must represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits addition, transition rules must complete, meaning given state fsm pattern input bits, transition must defined another state",
        "the inputs fsm states two roads, outputs colors lights two roads fsm ensures lights one roads red times, lights road green fsm also alternates green lights two roads",
        "the fsm five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs class, focus clocked synchronous fsm implementations, fsm's internal state bits stored flip-flops",
        "the transitions states well-defined fsm timer counts produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the inputs fsm states two roads, timer, signal f",
        "the outputs fsm states stoplights stoplights either red, green, yellow fsm controls duration light",
        "the stoplight controller ensures lights one roads red times using state machine six states states determined inputs fsm, states two roads output fsm controls lights two roads controller alternates green red lights two roads",
        "the control structure code maps high-level fsm design breaking program simple steps mapping step state fsm number states fsm depend number steps program",
        "the two approaches fsm design state-transition table state diagram state-transition table lists possible states system in, state diagram shows sequence states system goes through state-transition table compact easier use comparing functions, state diagram intuitive easier understand",
        "a finite state machine model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called transition rule",
        "a computer machine programmed carry set arithmetic logical operations automatically fsm model behavior composed finite set states, transitions states, actions",
        "one way build fsm allows pieces executed specified fsm built use state machine output routed different inputs allows fsm configured execute different pieces code based input another way build fsm allows pieces executed specified fsm built use state machine multiple states executed parallel allows fsm configured execute different pieces code parallel based input"
    ],
    "47": [
        "a word context computer memory sequence bits represents unit data words represent numbers, characters, data types size word typically determined computer's word size, number bits computer process time",
        "the 'quarter' state refers fact addition unit 4-bit examples closed addition means value n, easily find two 4-bit unsigned numbers that, added together, cannot represented 4-bit unsigned number n=4, example, add 12 (1100) 6 (0110) obtain 18 since 18 outside range [0,2^4-1] representable using 4-bit unsigned representation, representation breaks try represent sum using representation",
        "the input sequence testing follows: first, user prompted input two integers decimal form, converted 2's complement stored variables 'a' 'b' next, user prompted input ascii character, value hexadecimal, double-precision floating-point number, stored variables 'c', 'u', 'd', respectively finally, user prompted input two real numbers decimal form, converted single- double-precision floating-point numbers stored variables 'f' 'd', respectively",
        "the value register equivalence class sum two 4-bit numbers case, sum 18, equivalent 2 (mod 16)",
        "juan jos'e jaramillo identified common failure modes, including variability caused sunshine windows eceb, made changes improve robustness also created powerpoint slides typically used describe lab lecture",
        "jaramillo later identified common failure modes, including variability caused sunshine windows eceb, made changes improve robustness also created powerpoint slides typically used describe lab lecture",
        "the k-map represents domain function form hypercube hypercube divided regions, corresponds product literals function evaluated point hypercube, product literals implicant function function evaluates 1 point",
        "passage - compact approaches comparing functions, solutions subject later class (such ece 462) {two-level logic} { two-level logic} popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams begin one demorgan's laws, illustrate algebraically graphically: c = b+a = {file=part2/figs/demorgan-nandeps,width=095in} let's say function expressed sop form, z=abc+de+fghj diagram left shows function constructed three and gates or gate using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate invert point along wire, slide bubble wire output first column",
        "the design process digital fsm includes six steps: developing abstract model, specifying i/o behavior, completing specification, choosing state representation, calculating logic expressions, implementing flip-flops gates",
        "the choice representation fsm's internal state affects complexity implementation terms number states, number inputs, number outputs, number transition rules",
        "the design process digital fsm typically consists six steps: (1) developing abstract model, (2) specifying i/o behavior, (3) completing specification, (4) choosing state representation, (5) calculating logic expressions, (6) implementing flip-flops gates",
        "the design process counter number states power two choose representation states makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "the choice representation fsm's internal state affects complexity implementation states represented bit patterns, transition rules must complete states represented abstract states, outputs state must specified",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "the choice state representation affects implementation fsm terms number gates inverters required, well delay overall design serial comparator design based 2-bit slice variant, example, requires 24 gates 10 inverters, much larger earlier serial design terms gate delays, however, new design identical, meaning comparisons finished half time realistic area timing metrics show slightly difference two designs differences dominate results design carefully considered",
        "a karnaugh map graphical representation boolean function helps simplify function map consists grid squares, corresponds possible combination input values map used find groups product terms implicants function",
        "the desired pattern one represents number 2's complement representation 2's complement representation defined choosing set integers balanced around zero groups so, want represent number 2's complement representation, need choose pattern represents number representation",
        "an abstract model simplified representation system, typically used aid understanding system context logic optimization, abstract model used help understand tradeoffs different logic expressions",
        "the design counter includes eight states, three state bits used keep track current state choice representation fsm's states dramatically affect design complexity right strategy thus often start selecting representation makes sense human, even requires bits strictly necessary",
        "the design continues choosing state representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "the choice representation fsm's states affect design complexity determines many bits needed represent state bits needed represent state, design complex",
        "the right strategy choosing representation start selecting representation makes sense human, even requires bits strictly necessary make design process simpler efficient long run",
        "the choice state representation affects design complexity ways first, affect number bits needed represent states second, affect number possible states represented third, affect number transitions need considered designing state machine",
        "the right strategy start selecting representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "one reason often best start selecting representation makes sense human easier understand work with additionally, starting representation makes sense human help ensure final product also easy understand use",
        "abstraction powerful tool help simplify complex problems selecting state representation, abstraction help identify important aspects problem ignore irrelevant details make easier find solution effective efficient",
        "abstraction selecting state representation lead better design allowing engineer focus important aspects problem ignoring details important help simplify problem make easier find solution",
        "abstraction important selecting state representation allows designer select representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "different state representations lead different fsm designs example, states represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits fsm implemented digital system, states must represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits",
        "one reason important start representation makes sense human humans must supply logic functions interest, must program acceptable transformations equivalent forms second reason complexity problem good way introduce real engineering finally, contextual information help develop better understanding finite state machines higher-level abstractions form core digital systems still defined directly humans today",
        "abstraction selecting representation impact design metrics reducing number metrics need considered simplify process designing solution make easier find optimal solution",
        "the state representation used determine next state fsm done examining inputs fsm deriving equations next state states fsm act like counter, examining connections, next state determined",
        "there several benefits good state representation first, help reduce number pins needed chip second, improve density memory chip third, improve speed memory chip",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor performance cases, bad state representation also lead increased costs fabrication testing",
        "a good state representation easy understand able capture relevant information problem bad state representation may difficult understand may able capture relevant information",
        "the state representation significant impact overall design system affects way system behaves interacts environment well-chosen state representation simplify design system make efficient",
        "a good state representation important help reduce number logic gates needed design, thus save chip area additionally, good state representation help improve performance design reducing number logic operations needed",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor power consumption cases, two metrics may strongly correlated, meaning design good one metrics frequently also good metric",
        "one way improve bad state representation make compact done using two-level logic instead three-level logic another way improve bad state representation make readable done using clear consistent naming conventions",
        "the state representation impacts fsm determining duration state timer set whenever state changes, duration state determined muxes bottom mux selects s_2=0, selects output top mux s_2=1 top mux selects b s_0=1, selects c s_0=0",
        "a bad state representation lead number problems, including wasted engineering effort, poor performance, even product cancellations",
        "a bad state representation fixed using code larger hamming distance enable system detect correct errors",
        "there best state representation fsm important factor representation complete, meaning states represented inputs accounted for considerations include size state space number inputs outputs",
        "a good state representation important help reduce number transistors needed design, thus save space energy additionally, help improve performance design making easier computer manipulate logic expressions",
        "the state representation lab fsm 3-bit binary number, following meaning: s_2: type last coin inserted (0 dime, 1 quarter) s_1: one quarter inserted (1 yes, 0 no) s_0: one dime inserted (1 yes, 0 no)",
        "the numeric representation money held used track value money inserted machine allows machine keep track much money inserted reject coins value high"
    ],
    "48": [
        "a word context computer memory sequence bits represents unit data words represent numbers, characters, data types size word typically determined computer's word size, number bits computer process time",
        "the 'quarter' state refers fact addition unit 4-bit examples closed addition means value n, easily find two 4-bit unsigned numbers that, added together, cannot represented 4-bit unsigned number n=4, example, add 12 (1100) 6 (0110) obtain 18 since 18 outside range [0,2^4-1] representable using 4-bit unsigned representation, representation breaks try represent sum using representation",
        "the input sequence testing follows: first, user prompted input two integers decimal form, converted 2's complement stored variables 'a' 'b' next, user prompted input ascii character, value hexadecimal, double-precision floating-point number, stored variables 'c', 'u', 'd', respectively finally, user prompted input two real numbers decimal form, converted single- double-precision floating-point numbers stored variables 'f' 'd', respectively",
        "the value register equivalence class sum two 4-bit numbers case, sum 18, equivalent 2 (mod 16)",
        "a gray code counter device used count number operations logic expression device works counting number variables expression adding number operations device used optimize logic expressions reducing number operations needed implement logic function",
        "the initial state three flip-flops implementation 0s 1s use init input choose normal operation (init=0) fsm forcing fsm next state given i_2i_1i_0 (when init=1)",
        "f two effects operation fsm first, prevents timer reset enters new state effect lengthening duration state second, prevents fsm entering loop defined next-state logic effect halting fsm current state",
        "a good state representation important help reduce number logic gates needed design, thus save chip area additionally, good state representation help improve performance design reducing number logic operations needed",
        "random access memories (rams) memories support two operations: writing data element, reading data element memories also volatile, means data held memory erased electrical power turned fails static random access memory (sram) used high-speed applications processor caches embedded designs",
        "a read operation performed sram cell first bringing bit line intermediate voltage level, raising select line allows capacitor either pull small amount charge bit line push small amount charge onto bit line resulting change voltage detected sense amplifier",
        "a write operation sram cell performed charging charging capacitor capacitor attached bit line transistor controlled select line select low, capacitor isolated holds charge however, select high write operation, logic driving bit line forces charge onto capacitor removes charge it",
        "sram cells combined bit slice sharing bit lines analog read write logic decoder sets one cell's select line high enable read write operation cell chip select input cs drives enable input decoder, none memory cells active chip select low (cs=0), exactly one memory cells active chip select high (cs=1)",
        "a write operation sram cell performed bringing bit line intermediate voltage level, raising select line, allows capacitor either pull small amount charge bit line push small amount charge onto bit line resulting change voltage detected sense amplifier end bit line",
        "a row natural basis refresh cycle dram data pins provide bidirectional signals reading writing elements dram output enable input, oe, controls tri-state buffers dram determine whether dram drives data pins we input, controls type operation, also present",
        "dram type memory uses capacitors store data row dram selected, cells row read written back, refreshes data cells dram said destructive reads read operation brings voltage capacitor closer intermediate voltage level, effectively destroys data cell",
        "the column address strobe (cas) input used indicate address components available used control type operation (read write)",
        "one could design game controller logic puzzle would buttons corresponding different operations could performed logic puzzle example, could button add new element puzzle, button remove element puzzle, button change value element puzzle game controller could also display would show current state puzzle player's progress",
        "mapping bits gates means design circuit performs operation single bit passes necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "a computer machine programmed carry set arithmetic logical operations automatically fsm model behavior composed finite set states, transitions states, actions",
        "the idx variable used keep track number operations logic expression metric used estimate number transistors needed design, turn estimate area required design",
        "the min variable heuristic metric used estimate time needed compute function metric based longest chain operations performed instance variable rationale metric gate outputs change instantaneously inputs change"
    ],
    "49": [
        "the choice state representation affects implementation fsm terms number gates inverters required, well delay overall design serial comparator design based 2-bit slice variant, example, requires 24 gates 10 inverters, much larger earlier serial design terms gate delays, however, new design identical, meaning comparisons finished half time realistic area timing metrics show slightly difference two designs differences dominate results design carefully considered",
        "the main difference sram dram sram faster uses transistors, dram slower uses fewer transistors dram also denser sram, meaning bits stored given area",
        "what difference sop pos sop (sum products) boolean algebra expression or anded terms, pos (product sums) expression and ored terms",
        "the main difference mux decoder mux multiple inputs one output, decoder one input multiple outputs mux used select one several input signals send output, decoder used interpret input signal produce several output signals",
        "what difference two-level logic forms logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "what difference sop pos sop form two-level logic, pos form multi-level logic sop popular simpler manipulate expressions algebraically graphically",
        "what difference sop pos sop pos two forms two-level logic sop, output true inputs true pos, output true inputs true",
        "1 difference two-level three-level logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic three-level logic way expressing logic functions using three levels three levels refer number functions input passes reach output, sop pos forms examples three-level logic",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, problem solved",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, servo held place, desired",
        "the inputs counter coins inserted machine machine track value coins terms nickels reject coins inserted would cause value exceed maximum value machine track",
        "an fsm finite state machine, mathematical model computation used design computer programs digital logic circuits abstract machine one finite number states",
        "there disadvantages using fsm first, fsm designed carefully, hard understand debug second, fsm use resources simpler design, state machine finally, fsm difficult change extend simpler design",
        "the input behavior machine based type coin inserted selection item purchase user inserts coin nickel, machine reject coin remain state user inserts nickel, machine transition next state accept coin user selects item purchase, machine release item user inserted enough money otherwise, machine remain state",
        "the ``halt'' button ice cream dispenser stops machine dispensing ice cream useful user wants stop machine dispensing ice cream, machine malfunctioning needs stopped",
        "if user presses \"go\" button (hg=01), machine dispense one half servings lychee half serving mango",
        "when turing machine given input, either finishes finite number steps, not finish finite number steps, machine said \"halted\"",
        "the choice state representation affects design complexity ways first, affect number bits needed represent states second, affect number possible states represented third, affect number transitions need considered designing state machine",
        "one reason important start representation makes sense human humans must supply logic functions interest, must program acceptable transformations equivalent forms second reason complexity problem good way introduce real engineering finally, contextual information help develop better understanding finite state machines higher-level abstractions form core digital systems still defined directly humans today",
        "the value hold counter halted value last input given machine",
        "the vending machine application fsm designed team engineers fsm designed control simple vending machine accepts us coins payment offers choice three items sale machine adjustable item prices, fsm needs keep track much money inserted order decide whether user purchase one items",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "prof doug jones designed vending machine application fsm first identifying different states machine could in created state diagram showed machine would transition one state another finally, implemented fsm hardware using altera quartus software",
        "prof chris schmitz prototyped constructed physical elements help ece shop designed vending machine application fsm, prof doug jones created wiki documentation altera quartus portions lab casey smith, head guru ece instructional labs, developed new debounce design made changes improve robustness",
        "the possible inputs fsm dime (t=0) quarter (t=1) machine reject input user tries purchase item without inserting enough money first, fsm also reject request",
        "the start state initial state fsm state, money deposited yet fsm needs keep track much money inserted order decide whether user purchase one items information alone enough simplest machine, let's create machine adjustable item prices",
        "the dime state state machine waiting dime inserted first state machine accepts coin machine outputs a=1 p=0 state, indicating user yet paid full price 35 cents",
        "the user purchases item inserting either dime followed quarter, quarter followed dime user inserts second dime, machine reject coin user inserts second quarter, machine accept coin user paid full price 35 cents",
        "our machine accept pennies, let's fsm keep track much money inserted multiple 5 cents (one nickel) table right shows five types coins, value dollars, value terms nickels expensive item machine might cost dollar two, fsm must track least 20 40 nickels value let's decide use six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "there 63 possible states paid state machine track 315 dollars worth nickels, 63 nickels",
        "an fsm finite state machine, model computation used design computer programs hardware fsm defined set states, set inputs, set outputs, set transitions states",
        "an encoder device converts signal message code code usually binary code, sequence 0s 1s code used represent signal message form read machine, computer",
        "a decoder used fsm design generate release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "a digital fsm finite state machine implemented digital system means states must represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits addition, transition rules must complete, meaning given state fsm pattern input bits, transition must defined another state",
        "the vending machine fsm designed control release items vending machine based user's purchase request fsm uses priority encoder determine item user requested, decoder generate individual item release signals",
        "the numeric representation money held used track value money inserted machine allows machine keep track much money inserted reject coins value high",
        "the decoder generates release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "the value register price1 price first item machine, determined owner machine",
        "the value register price2 number nickels machine multiplied price item question way, machine keep track much money inserted much owed item",
        "the value register price3 price third item machine, determined owner machine",
        "the value register n corresponds number nickels inserted machine user inserts quarter, machine transition state n+5, indicating 5 nickels inserted user attempts purchase item without inserting enough money first, machine remain state reject request",
        "the register price1 six bits allows machine keep track 315 (63 nickels)",
        "the value register price2 number nickels inserted machine",
        "the value v 10 cents dime inserted dime worth 10 cents, machine tracks value money inserted terms nickels therefore, dime inserted, machine records 2 nickels",
        "the vending machine knows much item costs owner machine sets prices dynamically machine keeps track much money inserted multiple 5 cents (one nickel) expensive item machine might cost dollar two, fsm must track least 20 40 nickels value",
        "the vending machine keeps track much money inserted multiple 5 cents (one nickel) six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "the vending machine uses sensors detect coin inserted first sensor positioned dime pass beneath it, second sensor positioned coins pass front it signal second sensor used clock fsm, signal first sensor indicates whether coin dime quarter",
        "the vending machine releases item using decoder generate three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the vending machine knows purchase requested user pushes one item selection buttons causes priority encoder produce signal p indicating user trying make purchase",
        "the stoplight controller ensures lights one roads red times using state machine six states states determined inputs fsm, states two roads output fsm controls lights two roads controller alternates green red lights two roads",
        "a finite state machine model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called transition rule",
        "a computer machine programmed carry set arithmetic logical operations automatically fsm model behavior composed finite set states, transitions states, actions",
        "the general model computer turing machine mathematical model computer used simulate computer",
        "one way build fsm allows pieces executed specified fsm built use state machine output routed different inputs allows fsm configured execute different pieces code based input another way build fsm allows pieces executed specified fsm built use state machine multiple states executed parallel allows fsm configured execute different pieces code parallel based input",
        "the problem code trying solve halting problem halting problem problem cannot solved turing machine problem given turing machine input turing machine, possible determine whether machine finish computing finite number steps"
    ],
    "50": [
        "the first examples passage two-level logic, demorgan's law, sop form two-level logic popular way expressing logic functions, demorgan's law way simplify expressions sop form way representing logic function",
        "one way reduce design complexity make use common algebraic terms sub-expressions help simplify design make easier understand another way reduce complexity use demorgan's laws simplify expression help reduce number gates needed make design efficient",
        "the next-state logic equations functions describe relationship current state system next state system functions represented either sop pos form demorgan's law used simplify functions replacing or gates nand gates, and gates nor gates",
        "the similarity equations s_1^+s_0^+ equations {2-to-1} mux used represent logic function two-level logic popular way expressing logic functions simple map expression cmos gates using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate",
        "passage - compact approaches comparing functions, solutions subject later class (such ece 462) {two-level logic} { two-level logic} popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams begin one demorgan's laws, illustrate algebraically graphically: c = b+a = {file=part2/figs/demorgan-nandeps,width=095in} let's say function expressed sop form, z=abc+de+fghj diagram left shows function constructed three and gates or gate using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate invert point along wire, slide bubble wire output first column",
        "what significance demorgan's law demorgan's law popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams"
    ],
    "51": [
        "the desired pattern one represents number 2's complement representation 2's complement representation defined choosing set integers balanced around zero groups so, want represent number 2's complement representation, need choose pattern represents number representation",
        "the input sequence testing follows: first, user prompted input two integers decimal form, converted 2's complement stored variables 'a' 'b' next, user prompted input ascii character, value hexadecimal, double-precision floating-point number, stored variables 'c', 'u', 'd', respectively finally, user prompted input two real numbers decimal form, converted single- double-precision floating-point numbers stored variables 'f' 'd', respectively",
        "a gray code counter device used count number operations logic expression device works counting number variables expression adding number operations device used optimize logic expressions reducing number operations needed implement logic function",
        "the initial state three flip-flops implementation 0s 1s use init input choose normal operation (init=0) fsm forcing fsm next state given i_2i_1i_0 (when init=1)",
        "f two effects operation fsm first, prevents timer reset enters new state effect lengthening duration state second, prevents fsm entering loop defined next-state logic effect halting fsm current state",
        "a good state representation important help reduce number logic gates needed design, thus save chip area additionally, good state representation help improve performance design reducing number logic operations needed",
        "random access memories (rams) memories support two operations: writing data element, reading data element memories also volatile, means data held memory erased electrical power turned fails static random access memory (sram) used high-speed applications processor caches embedded designs",
        "a read operation performed sram cell first bringing bit line intermediate voltage level, raising select line allows capacitor either pull small amount charge bit line push small amount charge onto bit line resulting change voltage detected sense amplifier",
        "a write operation sram cell performed charging charging capacitor capacitor attached bit line transistor controlled select line select low, capacitor isolated holds charge however, select high write operation, logic driving bit line forces charge onto capacitor removes charge it",
        "sram cells combined bit slice sharing bit lines analog read write logic decoder sets one cell's select line high enable read write operation cell chip select input cs drives enable input decoder, none memory cells active chip select low (cs=0), exactly one memory cells active chip select high (cs=1)",
        "a write operation sram cell performed bringing bit line intermediate voltage level, raising select line, allows capacitor either pull small amount charge bit line push small amount charge onto bit line resulting change voltage detected sense amplifier end bit line",
        "a row natural basis refresh cycle dram data pins provide bidirectional signals reading writing elements dram output enable input, oe, controls tri-state buffers dram determine whether dram drives data pins we input, controls type operation, also present",
        "dram type memory uses capacitors store data row dram selected, cells row read written back, refreshes data cells dram said destructive reads read operation brings voltage capacitor closer intermediate voltage level, effectively destroys data cell",
        "the column address strobe (cas) input used indicate address components available used control type operation (read write)",
        "one could design game controller logic puzzle would buttons corresponding different operations could performed logic puzzle example, could button add new element puzzle, button remove element puzzle, button change value element puzzle game controller could also display would show current state puzzle player's progress",
        "mapping bits gates means design circuit performs operation single bit passes necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "a computer machine programmed carry set arithmetic logical operations automatically fsm model behavior composed finite set states, transitions states, actions",
        "the idx variable used keep track number operations logic expression metric used estimate number transistors needed design, turn estimate area required design",
        "the min variable heuristic metric used estimate time needed compute function metric based longest chain operations performed instance variable rationale metric gate outputs change instantaneously inputs change"
    ],
    "52": [
        "an abstract model mathematical model used describe system usually simplified include details system",
        "a multiplexer device allows multiple signals routed onto single channel done selecting one several input signals connecting output multiplexers used variety applications, telecommunications computer networking",
        "the third step design process identify metrics practical impact current technology, set threshold values metrics simplify reasoning them, eliminate redundant metrics, calculate linear sums reduce count metrics, and, finally, make use notion pareto optimality",
        "the third step design process evaluate design using multiple metrics includes identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "abstraction process simplifying complex system identifying important aspects system ignoring rest context implementation, abstraction used simplify design identifying important features design ignoring rest make design manageable easier understand",
        "a gray code counter device used count number operations logic expression device works counting number variables expression adding number operations device used optimize logic expressions reducing number operations needed implement logic function",
        "the implementation gray code counter developed first filling k-maps next-state values, deriving algebraic expressions next-state logic used develop implementation",
        "the inputs counter coins inserted machine machine track value coins terms nickels reject coins inserted would cause value exceed maximum value machine track",
        "a gray code counter type digital counter used count number clock pulses named frank gray, invented code 1953 main advantage gray code counter types counters less likely produce errors counting",
        "a gray code counter type counter uses gray code, cycle bit patterns certain length consecutive patterns differ exactly one bit regular counter type counter use gray code",
        "a gray code counter used applications digital value must changed incrementally least number steps gray code counter changes one bit time, minimizes number digital values must changed",
        "a gray code counter type digital counter uses gray code generate output input gray code counter digital signal represents number clock pulses applied counter output gray code counter digital signal represents number clock pulses applied counter, plus one",
        "one way reduce design complexity make use common algebraic terms sub-expressions help simplify design make easier understand another way reduce complexity use demorgan's laws simplify expression help reduce number gates needed make design efficient",
        "it important reasonable order designing logic diagram help simplify design process make easier understand function logic diagram additionally, help ensure logic diagram compatible products may used system",
        "yes, choose use counter's internal state directly output values colors need produce outputs unique bit patterns using counter's internal state directly output values, simplify design",
        "a karnaugh map graphical representation boolean function helps simplify function map consists grid squares, corresponds possible combination input values map used find groups product terms implicants function",
        "the next-state logic equations functions describe relationship current state system next state system functions represented either sop pos form demorgan's law used simplify functions replacing or gates nand gates, and gates nor gates",
        "the initial state three flip-flops implementation 0s 1s use init input choose normal operation (init=0) fsm forcing fsm next state given i_2i_1i_0 (when init=1)",
        "the issue fsm getting unexpected states cause output circuit glitch problematic applications stable output required",
        "the first approach use flip-flop design add single bit pass necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "the initial state three flip-flops unknown unless explicit mechanism initialization initialization work two ways first approach makes use flip-flop design know, flip-flop built pair latches, make use internal reset lines latches force flip-flop 0 state (or 1 state) using additional input alternatively, add extra logic design",
        "one way make use internal reset lines latches force flip-flop 0 state done connecting reset lines latches 0 voltage source",
        "an abstract model simplified representation system, typically used aid understanding system context logic optimization, abstract model used help understand tradeoffs different logic expressions",
        "the design counter includes eight states, three state bits used keep track current state choice representation fsm's states dramatically affect design complexity right strategy thus often start selecting representation makes sense human, even requires bits strictly necessary",
        "there four halted states: halt a, halt b, halt c, halt d states, counter retains current value user presses \"go\" button",
        "pressing ``go'' button causes counter start counting",
        "an fsm finite state machine, mathematical model computation used design computer programs digital logic circuits abstract machine one finite number states",
        "there several benefits using fsm one benefit fsm used implement wide range logic functions another benefit fsm used construct larger memories multiple smaller memories finally, fsm used reduce number pins needed chip",
        "there disadvantages using fsm first, fsm designed carefully, hard understand debug second, fsm use resources simpler design, state machine finally, fsm difficult change extend simpler design",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "the input behavior machine based type coin inserted selection item purchase user inserts coin nickel, machine reject coin remain state user inserts nickel, machine transition next state accept coin user selects item purchase, machine release item user inserted enough money otherwise, machine remain state",
        "the ``halt'' button ice cream dispenser stops machine dispensing ice cream useful user wants stop machine dispensing ice cream, machine malfunctioning needs stopped",
        "the \"go\" button initiates system call causes processor enter kernel mode execute instructions associated system call instructions part operating system used perform desired action, printing character console",
        "the uninterrupted counting cycle represents duration state fsm used calculate duration state fsm f=0",
        "if use gray code, would compare two expressions determine whether represent logic function would test logical equivalence, important part hardware design however, tools today provide help problem, necessary use gray code",
        "if user presses \"go\" button state {count a}, outputs c_l=11 c_m=01 means user get one half servings lychee half serving mango",
        "there explicit answer question passage however, based information given, seems user presses ``halt'' button state { count a}, system reset state { halt a}",
        "there two possible outcomes user presses ``go'' button state { halt a} first outcome fsm moves state { count b}, next state sequence second outcome fsm resets state { count a}, initial state",
        "there possible ways answer question one way would say user presses ``halt'' button state { halt a}, system reset state { count a} another way answer question would say user presses ``halt'' button state { halt a}, system remain state { halt a}",
        "there two possible ways user could press buttons state { halt a} first way user could press \"halt\" button \"go\" button case, fsm would move state { halt a} state { count b} second way user could press \"go\" button \"halt\" button case, fsm would move state { count b} state { halt a}",
        "if user presses \"go\" button (hg=01), ice cream cup overflow outputs c_l=11 c_m=10, means dispenser release full serving flavor, two servings total",
        "if user presses buttons (hg=11), ice cream cup overflows outputs c_l=11 c_m=10, dispenser releases full serving flavor, two servings total",
        "if user presses \"go\" button (hg=01), machine dispense one half servings lychee half serving mango",
        "one reason often best start selecting representation makes sense human easier understand work with additionally, starting representation makes sense human help ensure final product also easy understand use",
        "the value s_2 counter count state hold=0 undefined because, passage states, overflow occurs either operands negative operands positive operands negative, resulting sum equal c however, operands positive, resulting sum less c thus, impossible determine value s_2 without knowing values operands",
        "the hold variable used save energy chip finishes work, turn off, saving energy variable allows chip turn finished, saving energy",
        "the hold variable simplifies design allowing designer separate logic deciding whether advance counter fairly cleanly logic advancing counter itself hold bit diagram used determine whether counter advance current cycle",
        "the similarity equations s_1^+s_0^+ equations {2-to-1} mux used represent logic function two-level logic popular way expressing logic functions simple map expression cmos gates using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate",
        "the use s_2 separates logic deciding whether advance counter allowing counter halted state (s_2=1) counting state (s_2=0) hold=1, counter retains state, hold=0, counts",
        "abstraction used build three-bit gray code counter two-bit design using copies bit-sliced adder circuit approach less efficient designing circuit specifically three-bit gray code counter, simpler",
        "the state representation used determine next state fsm done examining inputs fsm deriving equations next state states fsm act like counter, examining connections, next state determined",
        "the common types memory used digital systems sram dram sram used high-speed applications processor caches embedded designs dram used applications less demanding speed requirements",
        "one build static rams using logic using tri-state buffers tri-state buffers used create larger memories using multiple chips wider memories also created using multiple chips",
        "tri-state buffers used provide logical disconnection tri-state buffer output logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "memory chips combined provide larger wider memories using multiple chips example, two 2-bit memories used implement 4-bit memory one address bits used drive decoder determines two chips active (cs=1) decoder enabled chip select signal larger memory, neither chip enabled external cs low, desired",
        "the two common types memory used digital systems static random access memory (sram) dynamic random access memory (dram) sram used high-speed applications processor caches embedded designs, dram used applications less demanding speed requirements, main memory computers",
        "a tri-state buffer type digital logic device used either connect disconnect signal line power source ground achieved using two transistors, one connect signal line power source, connect signal line ground buffer enabled, transistors turned on, signal line connected either power source ground, depending value input signal buffer disabled, transistors turned off, effectively disconnecting signal line power source ground",
        "one way combine memory chips use multiple chips implement larger memory done using one address bit drive decoder determines two chips active another way combine memory chips use multiple chips implement wider memory done routing external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "a tri-state buffer logic circuit used disconnect output logic circuit achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "one way combine memory chips use create larger memory done using one address bit drive decoder determines two chips active address bits, well external data inputs write enable signal, delivered memories external data outputs also connected memories another way combine memory chips use create wider memory case, chips either active inactive time, external address, write enable, chip select inputs routed chips however, data inputs outputs separate, chip handling different part data",
        "dynamic rams memories use charged capacitor store bit charge drains time must replaced, giving rise qualifier ``dynamic'' dram also unavailable recharging capacitors, problem applications stringent real-time needs",
        "random access memories (rams) memories support two operations: writing data element, reading data element memories also volatile, means data held memory erased electrical power turned fails static random access memory (sram) used high-speed applications processor caches embedded designs",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors, dram cell uses one transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context element memory assigned unique name, called address, allows external circuit identify particular element interest addresses unlike street addresses use send letter unlike street addresses, however, memory addresses usually little redundancy; possible combination bits address identifies distinct set bits memory",
        "a chip select input input chip allows chip turned off input used save energy turning chip needed",
        "a ram type memory used store data volatile memory, means data stored memory erased power turned fails ram random access memory, means time required access element memory independent element accessed",
        "sram faster dram, dram denser (has bits per chip area) substantial part dram density due transistor count: typical sram cells use six transistors (two inverter, two connect inverters bit lines), dram cells use single transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "a computer memory storage device data two main types memory: sram dram sram faster expensive, dram slower cheaper dram commonly used main memory computers",
        "data elements computer memory stored either static random access memory (sram) dynamic random access memory (dram) sram uses active logic form two-inverter loop maintain stored values, dram uses charged capacitor store bit",
        "static random access memory used high-speed applications processor caches embedded designs sram bit density significantly lower dram bit density, applications less demanding speed requirements use dram",
        "a chip select input used enable disable chip input used save power turning chip needed",
        "sram type memory used computers made number transistors store data way easy computer access sram faster types memory, also expensive",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors (two inverter, two connect inverters bit lines), dram cell uses single transistor",
        "multiple chips used construct wider memories connecting address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used reduce number pins needed chips combining inputs outputs allowed chip designers halve number pins needed",
        "a tri-state buffer type digital logic circuit used either connect disconnect signal line power supply ground done using two transistors, one connect signal line power supply, connect signal line ground buffer enabled, transistors turned on, signal line connected either power supply ground, depending value input signal buffer disabled, transistors turned off, signal line effectively disconnected power supply ground",
        "a tri-state buffer digital circuit used either connect disconnect output signal line buffer three states: high, low, high impedance buffer high state, output connected signal line copies signal input buffer low state, output disconnected signal line buffer high impedance state, output effectively disconnected signal line",
        "the benefit using tri-state buffer allows logical disconnection tri-state buffer output means output shared one memory without need additional multiplexers useful creating larger memories combining multiple chips",
        "tri-state buffers used construct larger memories using multiple chips connecting external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used construct wider memories connecting data inputs outputs multiple memories together allows output line shared one memory without need additional multiplexers",
        "a tri-state buffer digital circuit used either connect disconnect signal circuit buffer three states: high, low, high impedance high impedance state effectively disconnects signal circuit allows multiple memories share output line without need additional multiplexers",
        "a tri-state buffer used create electrical connection tri-state buffer output logical disconnection achieved using outer transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "tri-state buffers used reduce number pins needed chip combining inputs outputs example, data inputs outputs memory combined single set data wires, bidirectional signals reduces number pins needed still allowing amount data transferred",
        "one way construct wider memory use multiple chips connect data inputs outputs chip separately way, left chip handles high n bits input writes produces high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way construct larger memory use multiple chips one address bits drive decoder determines two chips active decoder enabled chip select signal larger memory way, neither chip enabled external cs low",
        "the main difference sram dram sram faster uses transistors, dram slower uses fewer transistors dram also denser sram, meaning bits stored given area",
        "a sense amplifier circuit used read data stored memory cell sense amplifier amplifies small signal memory cell converts digital signal read processor",
        "sdram type dram used main memory computers ddr4 sdram newer type dram faster sdram",
        "dram used storing data capacitor capacitor attached bit line transistor controlled select line select line low, capacitor isolated holds charge however, transistor's resistance finite, charge leaks onto bit line",
        "dram type memory uses capacitors store data row dram selected, cells row read written back, refreshes data cells dram said destructive reads read operation brings voltage capacitor closer intermediate voltage level, effectively destroys data cell",
        "the benefits using dram denser sram uses fewer transistors makes dram ideal applications size important speed",
        "dram type memory slower sram denser (has bits per chip area) dram cells use single transistor, sram cells use six transistors dram designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor count",
        "a sense amplifier device used amplify signal sensor typically used amplify signal small sensor, pressure sensor, level read larger device, computer",
        "the column address strobe (cas) input used indicate address components available used control type operation (read write)",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, problem solved",
        "the lab simulates two-level logic used map expression cmos gates also shows graphically manipulate expressions understand gate diagrams",
        "the vending machine application fsm designed team engineers fsm designed control simple vending machine accepts us coins payment offers choice three items sale machine adjustable item prices, fsm needs keep track much money inserted order decide whether user purchase one items",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, servo held place, desired",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "juan jos'e jaramillo identified common failure modes, including variability caused sunshine windows eceb, made changes improve robustness also created powerpoint slides typically used describe lab lecture",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "jaramillo later identified common failure modes, including variability caused sunshine windows eceb, made changes improve robustness also created powerpoint slides typically used describe lab lecture",
        "a signal used set timer f 0, timer set state changes",
        "the first optical sensor used detect presence chip chip present, sensor turns chip used chip present, sensor turns chip cannot used sensor used save energy turning chip needed",
        "the second optical sensor used detect chip finishes work chip turn save energy metric used guide process optimizing logic expressions balance struck different metrics involved",
        "if rise fall rising clock edge, processor would able recognize interrupts instructions would cause program terminate unexpectedly",
        "the device used turn save energy done using heuristic approaches find solutions strike balance different metrics, cost, power, performance human engineer impose constraints, limits chip area limits minimum performance, order guide process",
        "to use device, user presses one buttons user presses one button, device produces lychee ice cream user presses blend button, device produces blend user presses mango button, device produces mango ice cream",
        "there two optical sensors positioned different heights device first sensor positioned high enough slope dime passes beneath sensor, allowing signal produced sensor tell us whether coin dime quarter second sensor positioned coins pass front it signal second sensor used clock fsm",
        "the device uses two optical sensors differentiate dime quarter first sensor positioned dime passes beneath it, second sensor positioned coins pass front it rising edge clock signal second sensor occurs, signal first sensor indicates whether coin dime quarter",
        "the device uses sensors generate clock signal alternating 0 1 regular period clock 0, one set latches holds bit values fixed, combinational logic uses latches inputs produce bits copied second set latches clock 1, second set latches stops storing data inputs retains bit values order drive combinational logic, results copied third set latches",
        "the fsm uses signal determine whether accept reject coin checking rising edge signal second sensor rising edge occurs, signal first sensor indicates whether coin quarter (t=1) dime (t=0) sample timing diagram lab appears right clock signal generated lab square wave---in words, high low portions equal---but also unlikely periodic instead, ``cycle'' defined time coin insertions",
        "the possible inputs fsm dime (t=0) quarter (t=1) machine reject input user tries purchase item without inserting enough money first, fsm also reject request",
        "the possible outputs fsm a=1 p=1 f signal used set timer, either 0 1 f=0, timer set state changes f=1, timer set state changes light one roads green",
        "the start state initial state fsm state, money deposited yet fsm needs keep track much money inserted order decide whether user purchase one items information alone enough simplest machine, let's create machine adjustable item prices",
        "the dime quarter states used represent user inserted one coin purpose states output a=1 p=0, indicating user yet paid full price another coin needed",
        "the rejectd rejectq states used handle user mistakes user enters second dime dime state, fsm reject coin rejectd state rejects dime (a=0) continues wait quarter (p=0) rejectq state used handle user inserts one quarter",
        "the start state first state fsm sequence used initialize fsm",
        "the dime state state machine waiting dime inserted first state machine accepts coin machine outputs a=1 p=0 state, indicating user yet paid full price 35 cents",
        "the paid state state user paid full price 35 cents next states paid dime dime inserted quarter quarter inserted",
        "the 'rejectd' state state processor interrupts program due error unexpected behavior state usually causes program terminate",
        "the user purchases item inserting either dime followed quarter, quarter followed dime user inserts second dime, machine reject coin user inserts second quarter, machine accept coin user paid full price 35 cents",
        "our machine accept pennies, let's fsm keep track much money inserted multiple 5 cents (one nickel) table right shows five types coins, value dollars, value terms nickels expensive item machine might cost dollar two, fsm must track least 20 40 nickels value let's decide use six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "the input sequence 001 causes stoplight turn red roads necessary safety",
        "scan-based testing type testing used test functionality design type testing typically used test digital designs",
        "the input sequence used initialize fsm sequence 0s 1s input fsm order set state fsm desired state",
        "the input sequence used test fsm sequence 0s 1s applied inputs fsm input sequence used determine output fsm",
        "the outputs needed observe state check output logic values state register timer outputs used determine duration state order states occur",
        "scan-based testing type testing input scanned errors processed type testing often used test software errors",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "the input sequence testing follows: first, user prompted input two integers decimal form, converted 2's complement stored variables 'a' 'b' next, user prompted input ascii character, value hexadecimal, double-precision floating-point number, stored variables 'c', 'u', 'd', respectively finally, user prompted input two real numbers decimal form, converted single- double-precision floating-point numbers stored variables 'f' 'd', respectively",
        "an fsm finite state machine, model computation used design computer programs hardware fsm defined set states, set inputs, set outputs, set transitions states",
        "an encoder device converts signal message code code usually binary code, sequence 0s 1s code used represent signal message form read machine, computer",
        "a decoder logic circuit converts binary code corresponding decimal code decoders used variety applications, including data storage transmission, error detection correction, address decoding",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "a digital fsm model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called { transition rule} fsm comprises five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs",
        "an encoder helps implement fsm design translating user's input signal used fsm encoder produces signal p indicating user trying make purchase, two-bit signal indicating item user wants decoder takes signal produces individual item release signals r_1, r_2, r_3",
        "a decoder used fsm design generate release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "a digital fsm used control stoplights intersection two roads fsm two inputs, f, two outputs, l1 l0 output fsm used control stoplights fsm designed stoplights red one roads times road green light, controller show yellow light showing red light give drivers warning allow slow down finally, fairness, controller alternate green lights two roads",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "what ideas used reduce number metrics some ideas used reduce number metrics include: identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "1 three ranges possible measurement values given metric the three ranges possible measurement values given metric values equivalently useful, ordered interesting respect one another, impossible use practice",
        "the vending machine fsm designed control release items vending machine based user's purchase request fsm uses priority encoder determine item user requested, decoder generate individual item release signals",
        "the coin accept bit item release bits used indicate whether coin accepted whether item released, respectively",
        "the numeric representation money held used track value money inserted machine allows machine keep track much money inserted reject coins value high",
        "a priority encoder type encoder generates signal whenever input lines active, encodes index highest active input two-bit unsigned number priority encoder used determine input lines highest priority",
        "what three ranges given metric the first range measurement values equivalently useful second range possible values ordered interesting respect one another values third range impossible use practice",
        "the main difference mux decoder mux multiple inputs one output, decoder one input multiple outputs mux used select one several input signals send output, decoder used interpret input signal produce several output signals",
        "a decoder logic circuit converts binary code set signals used operate device decoder takes input signal, typically one coded binary number, produces one output possible value signal decoder enabled (en=1), and gates produces one minterm input signal s decoder enabled (en=0), decoder produces 0 bits",
        "how multi-metric optimization useful engineering multi-metric optimization useful engineering allows engineers identify important metrics balance design effectively according them multi-metric optimization also allows engineers get rid many metrics possible focus important ones",
        "a decoder device converts coded signals usable information decoders used variety applications, error detection correction",
        "a decoder logic circuit converts coded inputs coded outputs, usually one output code input code decoders used variety applications, including data storage transmission, error detection correction, data compression",
        "a priority encoder type encoder assigns priority certain input signals used determine input signal given priority multiple input signals present",
        "a priority encoder type encoder assigns priority certain input signals priority encoder takes signal produces output signal indicates input signal highest priority output signal typically binary number used select one input signals",
        "a decoder logic circuit converts signals one form another binary form, decoder used convert binary number decimal number",
        "a mux logic block allows us use one digital signal select several others forwarded output decoder logic block converts binary code set signals",
        "a decoder used context simplify expression logic function using decoder, function expressed two-level logic function, easier understand manipulate",
        "the value register n corresponds number nickels inserted machine user inserts quarter, machine transition state n+5, indicating 5 nickels inserted user attempts purchase item without inserting enough money first, machine remain state reject request",
        "the and gate left used determine input values 1 input values 1, output and gate 1 input values 0, output and gate 0",
        "the vending machine uses sensors detect coin inserted first sensor positioned dime pass beneath it, second sensor positioned coins pass front it signal second sensor used clock fsm, signal first sensor indicates whether coin dime quarter",
        "the vending machine knows purchase requested user pushes one item selection buttons causes priority encoder produce signal p indicating user trying make purchase",
        "the input fsm reset button r, four buttons b_f, b_x, b_g, b_c fsm produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs",
        "the input fsm 3-bit register 6-bit timer timer used count produce output z=1 reaches 0 register used store state fsm",
        "the priority encoder used determine item user wants purchase, generate signal indicating user trying make purchase output priority encoder used select value one price registers, subtracted current number nickels stored register purchase successful, price subtracted number nickels item released",
        "the fsm alternates green lights two roads setting timer different value state fsm changes causes lights change color cycle-by-cycle basis, green light alternating two roads",
        "the signal f used set timer certain conditions particular, used set timer state changes",
        "the two approaches fsm design state-transition table state diagram state-transition table lists possible states system in, state diagram shows sequence states system goes through state-transition table compact easier use comparing functions, state diagram intuitive easier understand",
        "the purpose notes introduce important abstraction logic design, use abstraction design ripple-carry adder ripple-carry adder adder adds single bit passes necessary information another copy itself design less efficient designs optimized specific purpose, simplicity approach makes tradeoff interesting one",
        "a finite state machine model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called transition rule",
        "one way transform code written high-level language fsm use compiler compiler program translates code written high-level language code run computer another way transform code written high-level language fsm use interpreter interpreter program executes code written high-level language",
        "one design fsm executes simple pieces flow chart breaking program smaller steps mapping step state fsm one also use registers counters implement variables program, use comparator implement test statement",
        "the general model computer turing machine mathematical model computer used simulate computer",
        "one way build fsm allows pieces executed specified fsm built use state machine output routed different inputs allows fsm configured execute different pieces code based input another way build fsm allows pieces executed specified fsm built use state machine multiple states executed parallel allows fsm configured execute different pieces code parallel based input",
        "the array notation code means code trying convert input user appropriate result, store result memory address given next argument",
        "the idx variable used keep track number operations logic expression metric used estimate number transistors needed design, turn estimate area required design",
        "the min variable heuristic metric used estimate time needed compute function metric based longest chain operations performed instance variable rationale metric gate outputs change instantaneously inputs change",
        "the flow chart represents steps taken designing new product first step think carefully metrics possible interest second step get rid many metrics possible third step identify metrics practical impact current technology fourth step set threshold values metrics simplify reasoning them fifth step eliminate redundant metrics sixth step calculate linear sums reduce count metrics seventh step make use notion pareto optimality",
        "there three variables used code, x, y, z value x initialized 42, value initialized x value z initialized",
        "the state representation significant impact overall design system affects way system behaves interacts environment well-chosen state representation simplify design system make efficient",
        "the input sequence 111010010001 significant determines duration state fsm",
        "f two effects operation fsm first, prevents timer reset enters new state effect lengthening duration state second, prevents fsm entering loop defined next-state logic effect halting fsm current state",
        "a good state representation important help reduce number logic gates needed design, thus save chip area additionally, good state representation help improve performance design reducing number logic operations needed",
        "a read operation performed sram cell first bringing bit line intermediate voltage level, raising select line allows capacitor either pull small amount charge bit line push small amount charge onto bit line resulting change voltage detected sense amplifier",
        "a write operation sram cell performed charging charging capacitor capacitor attached bit line transistor controlled select line select low, capacitor isolated holds charge however, select high write operation, logic driving bit line forces charge onto capacitor removes charge it",
        "sram cells combined bit slice sharing bit lines analog read write logic decoder sets one cell's select line high enable read write operation cell chip select input cs drives enable input decoder, none memory cells active chip select low (cs=0), exactly one memory cells active chip select high (cs=1)",
        "a write operation sram cell performed bringing bit line intermediate voltage level, raising select line, allows capacitor either pull small amount charge bit line push small amount charge onto bit line resulting change voltage detected sense amplifier end bit line",
        "a row natural basis refresh cycle dram data pins provide bidirectional signals reading writing elements dram output enable input, oe, controls tri-state buffers dram determine whether dram drives data pins we input, controls type operation, also present",
        "one could design game controller logic puzzle would buttons corresponding different operations could performed logic puzzle example, could button add new element puzzle, button remove element puzzle, button change value element puzzle game controller could also display would show current state puzzle player's progress",
        "mapping bits gates means design circuit performs operation single bit passes necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "a computer machine programmed carry set arithmetic logical operations automatically fsm model behavior composed finite set states, transitions states, actions",
        "there benefits using gray code counter first, easy design implement second, easy check correctness logic third, easy read understand logic",
        "the implementation diagram three-bit gray code counter logic diagram shows inputs, outputs, next-state logic counter diagram ordered left right {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2, makes easy read check correctness",
        "interrupts powerful exceptions occur asynchronously respect program means processor check interrupts instructions, allows flexibility design processor"
    ],
    "53": [
        "the design process counter number states power two choose representation states makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "the third step design process identify metrics practical impact current technology, set threshold values metrics simplify reasoning them, eliminate redundant metrics, calculate linear sums reduce count metrics, and, finally, make use notion pareto optimality",
        "abstraction process simplifying complex system identifying important aspects system ignoring rest context implementation, abstraction used simplify design identifying important features design ignoring rest make design manageable easier understand",
        "there reasons important make implicit assumptions clear design process first, assumptions made clear, lead confusion misunderstanding among team members working design second, making assumptions explicit help ensure everyone page working towards goal finally, explicit assumptions help prevent errors mistakes design process",
        "the implementation diagram three-bit gray code counter logic diagram shows inputs, outputs, next-state logic counter diagram ordered left right {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2, makes easy read check correctness",
        "one way reduce design complexity make use common algebraic terms sub-expressions help simplify design make easier understand another way reduce complexity use demorgan's laws simplify expression help reduce number gates needed make design efficient",
        "it important reasonable order designing logic diagram help simplify design process make easier understand function logic diagram additionally, help ensure logic diagram compatible products may used system",
        "the counter's implementation diagram simplifies understanding diagram breaking smaller, manageable pieces this, easier see various parts diagram interact other additionally, makes easier identify potential problems areas improvement",
        "the initial state three flip-flops unknown unless explicit mechanism initialization initialization work two ways first approach makes use flip-flop design know, flip-flop built pair latches, make use internal reset lines latches force flip-flop 0 state (or 1 state) using additional input alternatively, add extra logic design",
        "one way make use internal reset lines latches force flip-flop 0 state done connecting reset lines latches 0 voltage source",
        "the design counter includes eight states, three state bits used keep track current state choice representation fsm's states dramatically affect design complexity right strategy thus often start selecting representation makes sense human, even requires bits strictly necessary",
        "the design continues choosing state representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "one important reason consider possible input conditions possible states help ensure design correct example, design ever receives input values within certain range, possible design actually correct input values considering possible input conditions help catch errors like this another reason consider possible input conditions help optimize design example, design ever receives input values within certain range, possible simplify design make efficient considering possible input conditions help identify opportunities optimization",
        "the state table form specification make missing parts specification obvious showing different states system transitions states help identify parts specification missing needs added order complete specification",
        "the right strategy choosing representation start selecting representation makes sense human, even requires bits strictly necessary make design process simpler efficient long run",
        "the right strategy start selecting representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "one reason often best start selecting representation makes sense human easier understand work with additionally, starting representation makes sense human help ensure final product also easy understand use",
        "abstraction powerful tool help simplify complex problems selecting state representation, abstraction help identify important aspects problem ignore irrelevant details make easier find solution effective efficient",
        "abstraction selecting state representation lead better design allowing engineer focus important aspects problem ignoring details important help simplify problem make easier find solution",
        "abstraction important selecting state representation allows designer select representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "one reason important start representation makes sense human humans must supply logic functions interest, must program acceptable transformations equivalent forms second reason complexity problem good way introduce real engineering finally, contextual information help develop better understanding finite state machines higher-level abstractions form core digital systems still defined directly humans today",
        "abstraction selecting representation impact design metrics reducing number metrics need considered simplify process designing solution make easier find optimal solution",
        "the state representation significant impact overall design system affects way system behaves interacts environment well-chosen state representation simplify design system make efficient",
        "one way improve bad state representation make compact done using two-level logic instead three-level logic another way improve bad state representation make readable done using clear consistent naming conventions",
        "words computer memory stored bits, either 0 1 group bits makes byte, smallest unit data stored computer memory group bytes makes word, smallest unit data read written computer memory",
        "the benefits using dram denser sram uses fewer transistors makes dram ideal applications size important speed",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "the meaning assigned bit patterns makes easier understand behavior fsm example, paid state, last coin inserted may either type, type all, since decided start fsm state well however, four states, meanings provide clear understanding state fsm",
        "prof jones assigns bit patterns way makes easy humans understand meaning states example, paid state, last coin inserted may either type, type all, since fsm starts state however, four states, meanings clear easy apply",
        "one reason try leverage fact next-state patterns two states relevant may simplify design system next-state patterns needed, system designed without them, may make design process simpler faster additionally, eliminating next-state patterns may also reduce cost system",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "an encoder helps implement fsm design translating user's input signal used fsm encoder produces signal p indicating user trying make purchase, two-bit signal indicating item user wants decoder takes signal produces individual item release signals r_1, r_2, r_3",
        "the vending machine knows purchase requested user pushes one item selection buttons causes priority encoder produce signal p indicating user trying make purchase",
        "the input fsm reset button r, four buttons b_f, b_x, b_g, b_c fsm produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs",
        "the player wins game getting four entities (farmer, fox, goose, corn) right bank river player makes mistake, game lose",
        "the priority encoder used determine item user wants purchase, generate signal indicating user trying make purchase output priority encoder used select value one price registers, subtracted current number nickels stored register purchase successful, price subtracted number nickels item released",
        "the purpose notes introduce important abstraction logic design, use abstraction design ripple-carry adder ripple-carry adder adder adds single bit passes necessary information another copy itself design less efficient designs optimized specific purpose, simplicity approach makes tradeoff interesting one",
        "the flow chart represents steps taken designing new product first step think carefully metrics possible interest second step get rid many metrics possible third step identify metrics practical impact current technology fourth step set threshold values metrics simplify reasoning them fifth step eliminate redundant metrics sixth step calculate linear sums reduce count metrics seventh step make use notion pareto optimality",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "there benefits using gray code counter first, easy design implement second, easy check correctness logic third, easy read understand logic",
        "a fully-specified transition diagram diagram specifies states system in, well transitions states allows clear understanding behavior system",
        "the next-state logic equations functions describe relationship current state system next state system functions represented either sop pos form demorgan's law used simplify functions replacing or gates nand gates, and gates nor gates",
        "the purpose adding and gates input create logic function efficient terms area power done reducing number variables expression",
        "an abstract model simplified representation system, typically used aid understanding system context logic optimization, abstract model used help understand tradeoffs different logic expressions",
        "there disadvantages using fsm first, fsm designed carefully, hard understand debug second, fsm use resources simpler design, state machine finally, fsm difficult change extend simpler design",
        "the number state bits affects design complexity determines number possible states fsm in larger number state bits means possible states design must able handle them",
        "the value s_2 counter count state hold=0 undefined because, passage states, overflow occurs either operands negative operands positive operands negative, resulting sum equal c however, operands positive, resulting sum less c thus, impossible determine value s_2 without knowing values operands",
        "the similarity equations s_1^+s_0^+ equations {2-to-1} mux used represent logic function two-level logic popular way expressing logic functions simple map expression cmos gates using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate",
        "a good state representation easy understand able capture relevant information problem bad state representation may difficult understand may able capture relevant information",
        "the common types memory used digital systems sram dram sram used high-speed applications processor caches embedded designs dram used applications less demanding speed requirements",
        "the two common types memory used digital systems static random access memory (sram) dynamic random access memory (dram) sram used high-speed applications processor caches embedded designs, dram used applications less demanding speed requirements, main memory computers",
        "one way combine memory chips use multiple chips implement larger memory done using one address bit drive decoder determines two chips active another way combine memory chips use multiple chips implement wider memory done routing external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way combine memory chips use create larger memory done using one address bit drive decoder determines two chips active address bits, well external data inputs write enable signal, delivered memories external data outputs also connected memories another way combine memory chips use create wider memory case, chips either active inactive time, external address, write enable, chip select inputs routed chips however, data inputs outputs separate, chip handling different part data",
        "random access memories (rams) memories support two operations: writing data element, reading data element memories also volatile, means data held memory erased electrical power turned fails static random access memory (sram) used high-speed applications processor caches embedded designs",
        "a ram type memory used store data volatile memory, means data stored memory erased power turned fails ram random access memory, means time required access element memory independent element accessed",
        "data elements computer memory stored either static random access memory (sram) dynamic random access memory (dram) sram uses active logic form two-inverter loop maintain stored values, dram uses charged capacitor store bit",
        "a random access memory (ram) type memory allows data stored retrieved order ram volatile, means loses data power supply removed two types ram: static ram (sram) dynamic ram (dram)",
        "static random access memory used high-speed applications processor caches embedded designs sram bit density significantly lower dram bit density, applications less demanding speed requirements use dram",
        "multiple chips used construct wider memories connecting address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used construct larger memories using multiple chips connecting external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way construct wider memory use multiple chips connect data inputs outputs chip separately way, left chip handles high n bits input writes produces high n bits output reads, right chip handles low n bits input produces low n bits output",
        "the lab simulates two-level logic used map expression cmos gates also shows graphically manipulate expressions understand gate diagrams",
        "a input operand and function and function evaluates 1 input operands equal 1 input operand or function or function evaluates 1 input operand equal 1",
        "the output depend input function and evaluate 1 input values 1 input value 0, function evaluate 0",
        "the rejectd rejectq states used handle user mistakes user enters second dime dime state, fsm reject coin rejectd state rejects dime (a=0) continues wait quarter (p=0) rejectq state used handle user inserts one quarter",
        "this particular example tricky requires reader understand concept bit-sliced addition order understand passage furthermore, passage provide clear explanation bit-sliced adder circuit works, making difficult reader follow along",
        "the design easy test two-level logic design means inputs outputs easily tested nand nor gate additionally, design easy test sop expression means inputs outputs easily tested or gate",
        "a digital fsm model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called { transition rule} fsm comprises five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "passage - compact approaches comparing functions, solutions subject later class (such ece 462) {two-level logic} { two-level logic} popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams begin one demorgan's laws, illustrate algebraically graphically: c = b+a = {file=part2/figs/demorgan-nandeps,width=095in} let's say function expressed sop form, z=abc+de+fghj diagram left shows function constructed three and gates or gate using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate invert point along wire, slide bubble wire output first column",
        "why two-level logic popular two-level logic popular simple map expressions cmos gates additionally, easy understand gate diagrams",
        "what difference sop pos sop (sum products) boolean algebra expression or anded terms, pos (product sums) expression and ored terms",
        "a decoder logic circuit converts binary code set signals used operate device decoder takes input signal, typically one coded binary number, produces one output possible value signal decoder enabled (en=1), and gates produces one minterm input signal s decoder enabled (en=0), decoder produces 0 bits",
        "a decoder used context simplify expression logic function using decoder, function expressed two-level logic function, easier understand manipulate",
        "what significance demorgan's law demorgan's law popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "what difference two-level logic forms logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "passage - two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams question - what two levels two-level logic",
        "the and gate left used determine input values 1 input values 1, output and gate 1 input values 0, output and gate 0",
        "the fsm handles multiple input events single clock cycle first storing input events queue fsm ready process input event, dequeues event queue processes it",
        "the two approaches fsm design state-transition table state diagram state-transition table lists possible states system in, state diagram shows sequence states system goes through state-transition table compact easier use comparing functions, state diagram intuitive easier understand",
        "a finite state machine model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called transition rule",
        "the design process digital fsm includes six steps: developing abstract model, specifying i/o behavior, completing specification, choosing state representation, calculating logic expressions, implementing flip-flops gates",
        "the design process digital fsm typically consists six steps: (1) developing abstract model, (2) specifying i/o behavior, (3) completing specification, (4) choosing state representation, (5) calculating logic expressions, (6) implementing flip-flops gates",
        "the choice state representation affects implementation fsm terms number gates inverters required, well delay overall design serial comparator design based 2-bit slice variant, example, requires 24 gates 10 inverters, much larger earlier serial design terms gate delays, however, new design identical, meaning comparisons finished half time realistic area timing metrics show slightly difference two designs differences dominate results design carefully considered",
        "adding third bit gray code counter increases design complexity requires additional carry bit carry bit must propagated adder bit slice logic, increases number logic gates required overall complexity design",
        "the passage discusses design serial comparator using bit-sliced approach approach leads design 24 gates 10 inverters, much larger earlier serial design however, new design identical terms gate delays, meaning comparison finished half time",
        "a good state representation important help reduce number logic gates needed design, thus save chip area additionally, good state representation help improve performance design reducing number logic operations needed",
        "the output or gate 1 signal f 1 f 1 state fsm s_0s_1s_2=001 s_0s_1s_2=011",
        "mapping bits gates means design circuit performs operation single bit passes necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "the min variable heuristic metric used estimate time needed compute function metric based longest chain operations performed instance variable rationale metric gate outputs change instantaneously inputs change",
        "what reason popularity two-level logic the popularity two-level logic due fact simple way express logic functions additionally, two-level logic easy map cmos gates",
        "the first examples passage two-level logic, demorgan's law, sop form two-level logic popular way expressing logic functions, demorgan's law way simplify expressions sop form way representing logic function",
        "an fsm must initialized ensure starts known state avoid undefined behavior without initialization, fsm may produce incorrect results may work all",
        "a multiplexer digital logic block allows one digital signal select several others forwarded output simplest form multiplexer 2-to-1 multiplexer, two inputs left one top top input allows us choose left inputs forwarded output",
        "the design process involves manipulation logic expressions order optimize specific metrics, cost, power, performance today, manipulation performed almost entirely computers, human engineers supplying logic functions interest imposing constraints process",
        "an fsm must initialized ensure starts known state allows fsm function correctly avoid potential problems could arise unknown starting state",
        "a multiplexer device allows multiple signals routed onto single channel done selecting one several input signals connecting output multiplexers used variety applications, telecommunications computer networking",
        "the first step design process develop abstract model model translation human language description model states desired behavior model particularly thorough exact stage",
        "the fourth step design process choose particular design set possible designs making choice, engineers typically consider variety factors, including cost, performance, manufacturability, reliability",
        "the first step design process develop abstract model model captures intent description particularly thorough exact",
        "the fourth step design process choose particular design set possible designs choice made based number factors, including objectives design, constraints problem, preferences designer",
        "the choice fsm's input output behavior affects design process determining set possible states set possible outputs set possible states determined set possible inputs, set possible outputs determined set possible outputs",
        "one important reason compatibility components digital system helps ensure system function correctly components compatible, system may work correctly, may work all additionally, compatibility among components help reduce cost manufacturing system, well cost maintaining repairing system",
        "a gray code sequence n-bit patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit construct gray code recursively follows: (n+1)-bit gray code, write sequence n-bit gray code, add 0 front patterns sequence, append second copy n-bit gray code reverse order, put 1 front patterns second copy",
        "a gray code counter device used count number operations logic expression device works counting number variables expression adding number operations device used optimize logic expressions reducing number operations needed implement logic function",
        "the transition diagram two-bit gray code counter loop counter moving one state next cycle state diagram marked internal state value s_1s_0 (before ``/'') output z_1z_0 (after ``/''), always equal counter",
        "a gray code counter type digital counter used count number clock pulses named frank gray, invented code 1953 main advantage gray code counter types counters less likely produce errors counting",
        "the timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle states thus act like counter",
        "a gray code counter type counter cycles possible bit patterns certain length states transition diagram gray code counter form loop, counter moving one state next cycle state diagram marked internal state value output value, always equal counter",
        "the internal state value third bit gray code counter s_2s_1s_0=001 hold=1, next-state logic s_1^+ s_0^+ reduces s_1^+=s_1 s_0^+=s_0; words, counter stops counting simply stays current state hold=0, equations become s_1^+=s_0 s_0^+={{s_1}}, produces repeating sequence s_1s_0 00, 01, 11, 10, desired",
        "the fully-specified transition diagram three-bit gray code counter follows: the states counter form loop, counter moving one state next cycle each state diagram marked internal state value s_2s_1s_0 (before \" / \") output z_2z_1z_0 (after \" / \") based transition diagram, next-state values s_2^+, s_1^+, s_0^+ filled shown",
        "the vertical lines carrying current state values inverses back next state logic inputs ordered left right (on left side figure) {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2",
        "the color mapping three-bit rgb encoding system system colors represented combination red, green, blue light color mapping system shown right imagine charged creating counter drive light sequence colors",
        "from passage, inferred logical completeness necessarily help efficient design logic functions words, single boolean logic function expressed many different ways therefore, important engineers learn develop efficient implementation function, well determine whether two logic expressions identical without actually writing truth tables",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills students learn coming months",
        "yes, choose use counter's internal state directly output values colors need produce outputs unique bit patterns using counter's internal state directly output values, simplify design",
        "a karnaugh map graphical representation boolean function helps simplify function map consists grid squares, corresponds possible combination input values map used find groups product terms implicants function",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways, learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills start learn coming months",
        "the color mapping three-bit rgb encoding system colors produced unique bit patterns states form loop, marked internal state value s_2s_1s_0 output rgb",
        "the transition diagram color sequencer loop six states, two remaining states converging loop single cycle lights red states, necessary safety timer set state changes, duration state calculated analyzing muxes",
        "the initial state three flip-flops implementation 0s 1s use init input choose normal operation (init=0) fsm forcing fsm next state given i_2i_1i_0 (when init=1)",
        "the timer set 0, state fsm changed next state sequence new state fsm determines duration next state, timer set accordingly",
        "the passage states power consumption important metric engineers must take account designs however, cases, desktop high-end server processors, metrics (such performance) may important always want operate edge interesting range could going wrong, engineers taking power consumption account much be",
        "the initial state three flip-flops implementation 0 state explicit mechanism initialization forces flip-flop 0 state alternatively, could add extra logic design would allow us force fsm specific state next cycle",
        "the first approach use flip-flop design add single bit pass necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "interrupts powerful exceptions occur asynchronously respect program means processor check interrupts instructions, allows flexibility design processor",
        "a next-state table lists possible states fsm in, well inputs outputs state transition diagram shows order states visited, based inputs outputs",
        "there several benefits using fsm one benefit fsm used implement wide range logic functions another benefit fsm used construct larger memories multiple smaller memories finally, fsm used reduce number pins needed chip",
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "the input behavior machine based type coin inserted selection item purchase user inserts coin nickel, machine reject coin remain state user inserts nickel, machine transition next state accept coin user selects item purchase, machine release item user inserted enough money otherwise, machine remain state",
        "the output behavior add3 procedure takes three integers arguments, adds together, returns sum procedure called constants 10, 20, 30, result printed calling convention, call made, r0 must contain value 10, r1 value 20, r2 value 30",
        "the \"go\" button initiates system call causes processor enter kernel mode execute instructions associated system call instructions part operating system used perform desired action, printing character console",
        "there two control buttons: one east-west road one north-south road",
        "the states transition diagram represent different colors stoplight first two states red, followed yellow, green last two states red",
        "system calls initiated trap instruction, system calls also known traps many architectures, system call places processor privileged kernel mode, instructions implement call considered part operating system",
        "if use gray code, would compare two expressions determine whether represent logic function would test logical equivalence, important part hardware design however, tools today provide help problem, necessary use gray code",
        "there explicit answer question passage however, based information given, seems user presses ``halt'' button state { count a}, system reset state { halt a}",
        "if user presses \"go\" button (hg=01), ice cream cup overflow outputs c_l=11 c_m=10, means dispenser release full serving flavor, two servings total",
        "if user presses buttons (hg=11), ice cream cup overflows outputs c_l=11 c_m=10, dispenser releases full serving flavor, two servings total",
        "if \"halt\" button pressed (hg=10), logic outputs c_l=00 c_m=00, dispenser gives ice cream buttons pressed (hg=11), outputs c_l=11 c_m=11, dispenser gives two servings flavor, four servings total",
        "a transition diagram help process helping identify important metrics helping balance design effectively according metrics",
        "the fsm needs least three states order eight states three possible items purchased, item purchased one two ways (with without enough money)",
        "the hold variable used save energy chip finishes work, turn off, saving energy variable allows chip turn finished, saving energy",
        "there several benefits good state representation first, help reduce number pins needed chip second, improve density memory chip third, improve speed memory chip",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor performance cases, bad state representation also lead increased costs fabrication testing",
        "one way verify implementation correct test known set inputs compare results expected results results match, implementation likely correct another way verify implementation examine code look errors done manually help software tool",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor power consumption cases, two metrics may strongly correlated, meaning design good one metrics frequently also good metric",
        "a bad state representation lead number problems, including wasted engineering effort, poor performance, even product cancellations",
        "a bad state representation fixed using code larger hamming distance enable system detect correct errors",
        "there best state representation fsm important factor representation complete, meaning states represented inputs accounted for considerations include size state space number inputs outputs",
        "a good state representation important help reduce number transistors needed design, thus save space energy additionally, help improve performance design making easier computer manipulate logic expressions",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context",
        "one build static rams using logic using tri-state buffers tri-state buffers used create larger memories using multiple chips wider memories also created using multiple chips",
        "tri-state buffers used provide logical disconnection tri-state buffer output logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "memory chips combined provide larger wider memories using multiple chips example, two 2-bit memories used implement 4-bit memory one address bits used drive decoder determines two chips active (cs=1) decoder enabled chip select signal larger memory, neither chip enabled external cs low, desired",
        "one build memories using logic creating tri-state buffer logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "a tri-state buffer type digital logic device used either connect disconnect signal line power source ground achieved using two transistors, one connect signal line power source, connect signal line ground buffer enabled, transistors turned on, signal line connected either power source ground, depending value input signal buffer disabled, transistors turned off, effectively disconnecting signal line power source ground",
        "one builds memories (static rams) using logic connecting dual-inverter loop opposing bit lines transistors controlled select line select high, transistors connect inverter loop bit lines writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "a tri-state buffer logic circuit used disconnect output logic circuit achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "dynamic rams memories use charged capacitor store bit charge drains time must replaced, giving rise qualifier ``dynamic'' dram also unavailable recharging capacitors, problem applications stringent real-time needs",
        "the addressability computer memory number bits stored element memory size elements memory vary single binary digit, bit, byte (8 bits) more typically, data elements larger byte referred words, size word depends context",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors, dram cell uses one transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "to write data memory element, external circuit sends signal memory indicating address element written data written sent memory, memory stores data element specified address",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context element memory assigned unique name, called address, allows external circuit identify particular element interest addresses unlike street addresses use send letter unlike street addresses, however, memory addresses usually little redundancy; possible combination bits address identifies distinct set bits memory",
        "a word context computer memory sequence bits represents unit data words represent numbers, characters, data types size word typically determined computer's word size, number bits computer process time",
        "non-volatile memories include magnetic optical storage media dvds, cd-roms, disks, tapes, capacitive storage media flash drives, programmable logic devices",
        "sram faster dram, dram denser (has bits per chip area) substantial part dram density due transistor count: typical sram cells use six transistors (two inverter, two connect inverters bit lines), dram cells use single transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "a computer memory storage device data two main types memory: sram dram sram faster expensive, dram slower cheaper dram commonly used main memory computers",
        "the addressability computer memory number bits stored element memory size elements memory vary single bit byte more typically, data elements larger byte referred words, size word depends context",
        "an sram cell flip-flop made two cross-coupled inverters output one inverter connected input other, vice versa power applied, sram cell one two stable states, represent 0 1 state cell changed applying correct sequence voltages inputs",
        "sram cells combined bit slice sharing bit lines analog read write logic bit slice figure thought 16-address, 1-bit-addressable memory (2^4b) cells bit slice share bit lines analog read write logic, appears right figure",
        "the main advantage sram dram speed sram faster dram need refresh memory cells often dram denser sram, store data given area",
        "sram cells store data using dual-inverter loop writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "a read operation performed sram cell first bringing bit line intermediate voltage level, raising select line allows capacitor either pull small amount charge bit line push small amount charge onto bit line resulting change voltage detected sense amplifier",
        "a write operation sram cell performed charging charging capacitor capacitor attached bit line transistor controlled select line select low, capacitor isolated holds charge however, select high write operation, logic driving bit line forces charge onto capacitor removes charge it",
        "sram type memory used computers made number transistors store data way easy computer access sram faster types memory, also expensive",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors (two inverter, two connect inverters bit lines), dram cell uses single transistor",
        "a sram cell organized flip-flop, one transistor one capacitor per bit capacitor stores data bit, transistor controls access bit",
        "sram cells combined bit slice sharing bit lines analog read write logic decoder sets one cell's select line high enable read write operation cell chip select input cs drives enable input decoder, none memory cells active chip select low (cs=0), exactly one memory cells active chip select high (cs=1)",
        "a write operation sram cell performed bringing bit line intermediate voltage level, raising select line, allows capacitor either pull small amount charge bit line push small amount charge onto bit line resulting change voltage detected sense amplifier end bit line",
        "the main benefit using tri-state buffer allows logical disconnection buffer output means multiple memories share output line without need additional multiplexers",
        "a tri-state buffer achieves logical disconnection using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "the decoder memory chip responsible translating memory address correct location memory chip necessary ensure correct data read written correct location memory chip",
        "a tri-state buffer type digital logic circuit used either connect disconnect signal line power supply ground done using two transistors, one connect signal line power supply, connect signal line ground buffer enabled, transistors turned on, signal line connected either power supply ground, depending value input signal buffer disabled, transistors turned off, signal line effectively disconnected power supply ground",
        "the benefit using tri-state buffer allows logical disconnection tri-state buffer output means output shared one memory without need additional multiplexers useful creating larger memories combining multiple chips",
        "tri-state buffers used construct wider memories connecting data inputs outputs multiple memories together allows output line shared one memory without need additional multiplexers",
        "a tri-state buffer digital circuit used either connect disconnect signal circuit buffer three states: high, low, high impedance high impedance state effectively disconnects signal circuit allows multiple memories share output line without need additional multiplexers",
        "a tri-state buffer used create electrical connection tri-state buffer output logical disconnection achieved using outer transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "tri-state buffers used reduce number pins needed chip combining inputs outputs example, data inputs outputs memory combined single set data wires, bidirectional signals reduces number pins needed still allowing amount data transferred",
        "one way construct larger memory use multiple chips one address bits drive decoder determines two chips active decoder enabled chip select signal larger memory way, neither chip enabled external cs low",
        "the main difference sram dram sram faster uses transistors, dram slower uses fewer transistors dram also denser sram, meaning bits stored given area",
        "a dram cell stores bit using charged capacitor charge capacitor drains time must replaced order maintain stored value",
        "a sense amplifier circuit used read data stored memory cell sense amplifier amplifies small signal memory cell converts digital signal read processor",
        "sdram type dram used main memory computers ddr4 sdram newer type dram faster sdram",
        "dram used storing data capacitor capacitor attached bit line transistor controlled select line select line low, capacitor isolated holds charge however, transistor's resistance finite, charge leaks onto bit line",
        "dram type memory uses capacitors store data row dram selected, cells row read written back, refreshes data cells dram said destructive reads read operation brings voltage capacitor closer intermediate voltage level, effectively destroys data cell",
        "there several disadvantages using dram first, dram slower sram second, dram less dense sram, requires chip area store amount data finally, dram cells complex sram cells, difficult design manufacture",
        "dram type memory slower sram denser (has bits per chip area) dram cells use single transistor, sram cells use six transistors dram designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor count",
        "dram type capacitive storage, bit stored charging charging capacitor capacitor attached bit line transistor controlled select line select line high, capacitor isolated holds charge however, transistor's resistance finite, charge leaks onto bit line charge also leaks substrate transistor constructed",
        "a dram cell refreshed reading contents writing back active logic process necessary avoid data loss due charge leakage capacitor",
        "a sense amplifier device used amplify signal sensor typically used amplify signal small sensor, pressure sensor, level read larger device, computer",
        "the ras signal indicates row component address available raising ras signal row destructively reads contents cells row, forcing cells rewritten effecting refresh row thus natural basis refresh cycle",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, problem solved",
        "the vending machine application fsm designed team engineers fsm designed control simple vending machine accepts us coins payment offers choice three items sale machine adjustable item prices, fsm needs keep track much money inserted order decide whether user purchase one items",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, servo held place, desired",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab",
        "prof chris schmitz prototyped constructed physical elements help ece shop designed vending machine application fsm, prof doug jones created wiki documentation altera quartus portions lab casey smith, head guru ece instructional labs, developed new debounce design made changes improve robustness",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab based lab earlier mentor graphics work prof herman prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "prof kindratenko helped scale design way made possible deliver 400 students entering ece every semester creating wiki documentation altera quartus portions lab also helped improve robustness lab identifying common failure modes making changes design",
        "the first optical sensor used detect presence chip chip present, sensor turns chip used chip present, sensor turns chip cannot used sensor used save energy turning chip needed",
        "the second optical sensor used detect chip finishes work chip turn save energy metric used guide process optimizing logic expressions balance struck different metrics involved",
        "if rise fall rising clock edge, processor would able recognize interrupts instructions would cause program terminate unexpectedly",
        "the device used turn save energy done using heuristic approaches find solutions strike balance different metrics, cost, power, performance human engineer impose constraints, limits chip area limits minimum performance, order guide process",
        "the signal indicates interrupt occurred interrupt could generated external device, disk drive keyboard, error program executed, undefined instruction attempt divide zero",
        "the significance rising edge signal second sensor indicates presence object field view sensor rising edge signal indicates sensor detected change intensity light receiving",
        "there two optical sensors positioned different heights device first sensor positioned high enough slope dime passes beneath sensor, allowing signal produced sensor tell us whether coin dime quarter second sensor positioned coins pass front it signal second sensor used clock fsm",
        "the device uses two optical sensors differentiate dime quarter first sensor positioned dime passes beneath it, second sensor positioned coins pass front it rising edge clock signal second sensor occurs, signal first sensor indicates whether coin dime quarter",
        "the device uses sensors generate clock signal alternating 0 1 regular period clock 0, one set latches holds bit values fixed, combinational logic uses latches inputs produce bits copied second set latches clock 1, second set latches stops storing data inputs retains bit values order drive combinational logic, results copied third set latches",
        "the fsm uses signal determine whether accept reject coin checking rising edge signal second sensor rising edge occurs, signal first sensor indicates whether coin quarter (t=1) dime (t=0) sample timing diagram lab appears right clock signal generated lab square wave---in words, high low portions equal---but also unlikely periodic instead, ``cycle'' defined time coin insertions",
        "the start state initial state fsm state, money deposited yet fsm needs keep track much money inserted order decide whether user purchase one items information alone enough simplest machine, let's create machine adjustable item prices",
        "the 'rejectd' state state processor interrupts program due error unexpected behavior state usually causes program terminate",
        "based passage, least 33 bits internal state needed fsm needs track number cycles needed serial comparator execute comparison, least 32 cycles additionally, fsm needs track whether loop done, requires least one additional bit",
        "our machine accept pennies, let's fsm keep track much money inserted multiple 5 cents (one nickel) table right shows five types coins, value dollars, value terms nickels expensive item machine might cost dollar two, fsm must track least 20 40 nickels value let's decide use six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "the k-map represents domain function form hypercube hypercube divided regions, corresponds product literals function evaluated point hypercube, product literals implicant function function evaluates 1 point",
        "there 63 possible states paid state machine track 315 dollars worth nickels, 63 nickels",
        "the s_2 value specifies number inputs must satisfied order output 1 cuts number possible choices four two case two possible combinations inputs satisfy condition",
        "scan-based testing method testing input scanned converted appropriate result programmer responsible ensuring number conversions format string matches number arguments provided programmer must also ensure type information produced conversion stored address passed conversion",
        "we test circuit build lab see correctly implements fsm outlined notes this, input known sequence 0s 1s see circuit outputs correct responses does, confident circuit functioning correctly",
        "the input sequence used initialize fsm sequence 0s 1s input fsm order set state fsm desired state",
        "the outputs needed observe state check output logic values state register timer outputs used determine duration state order states occur",
        "it difficult test sequential logic difficult predict behavior system sequential logic difficult test difficult determine whether system halt finite number steps not",
        "scan-based testing type testing input scanned errors processed type testing often used test software errors",
        "the input sequence testing follows: first, user prompted input two integers decimal form, converted 2's complement stored variables 'a' 'b' next, user prompted input ascii character, value hexadecimal, double-precision floating-point number, stored variables 'c', 'u', 'd', respectively finally, user prompted input two real numbers decimal form, converted single- double-precision floating-point numbers stored variables 'f' 'd', respectively",
        "an encoder device converts signal message code code usually binary code, sequence 0s 1s code used represent signal message form read machine, computer",
        "a decoder logic circuit converts binary code corresponding decimal code decoders used variety applications, including data storage transmission, error detection correction, address decoding",
        "a decoder used fsm design generate release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "the game revolves around old logic problem farmer must cross river order reach market farmer traveling market sell fox, goose, corn farmer boat, boat large enough carry fox, goose, corn time fox cannot left alone goose, fox eat goose goose cannot left alone corn, goose eat corn farmer get three items market",
        "one could design game controller logic puzzle would buttons corresponding different operations could performed logic puzzle example, could button add new element puzzle, button remove element puzzle, button change value element puzzle game controller could also display would show current state puzzle player's progress",
        "the inputs fsm states two roads, outputs colors lights two roads fsm ensures lights one roads red times, lights road green fsm also alternates green lights two roads",
        "the fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the state fsm split two pieces: 3-bit register 6-bit timer timer simply binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "1 three ranges possible measurement values given metric the three ranges possible measurement values given metric values equivalently useful, ordered interesting respect one another, impossible use practice",
        "interrupts priority exceptions interrupts generated external devices, exceptions generated processor itself interrupts also asynchronous, exceptions not",
        "the vending machine fsm designed control release items vending machine based user's purchase request fsm uses priority encoder determine item user requested, decoder generate individual item release signals",
        "the fsm five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs class, focus clocked synchronous fsm implementations, fsm's internal state bits stored flip-flops",
        "the transitions states well-defined fsm timer counts produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the fsm needs keep track loop index, current minimum value, progress serial comparator",
        "the output fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "a priority encoder type encoder generates signal whenever input lines active, encodes index highest active input two-bit unsigned number priority encoder used determine input lines highest priority",
        "what three ranges given metric the first range measurement values equivalently useful second range possible values ordered interesting respect one another values third range impossible use practice",
        "how multi-metric optimization useful engineering multi-metric optimization useful engineering allows engineers identify important metrics balance design effectively according them multi-metric optimization also allows engineers get rid many metrics possible focus important ones",
        "a decoder device converts coded signals usable information decoders used variety applications, error detection correction",
        "a decoder logic circuit converts coded inputs coded outputs, usually one output code input code decoders used variety applications, including data storage transmission, error detection correction, data compression",
        "a decoder similar mux allows one digital signal select several others forwarded output decoder one input multiple outputs, mux multiple inputs one output decoder thought special case mux",
        "a decoder logic device converts binary information form one code another, usually natural binary code multiplexer device selects one several analog digital input signals forwards selected input single output line",
        "a priority encoder type encoder assigns priority certain input signals used determine input signal given priority multiple input signals present",
        "a priority encoder type encoder assigns priority certain input signals priority encoder takes signal produces output signal indicates input signal highest priority output signal typically binary number used select one input signals",
        "a decoder logic circuit converts signals one form another binary form, decoder used convert binary number decimal number",
        "a priority encoder circuit takes number input signals, outputs code represents highest priority input signal output code usually binary number",
        "a mux logic block allows us use one digital signal select several others forwarded output decoder logic block converts binary code set signals",
        "the decoder generates release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "the value register n corresponds number nickels inserted machine user inserts quarter, machine transition state n+5, indicating 5 nickels inserted user attempts purchase item without inserting enough money first, machine remain state reject request",
        "what difference sop pos sop form two-level logic, pos form multi-level logic sop popular simpler manipulate expressions algebraically graphically",
        "the value v 10 cents dime inserted dime worth 10 cents, machine tracks value money inserted terms nickels therefore, dime inserted, machine records 2 nickels",
        "the vending machine keeps track much money inserted multiple 5 cents (one nickel) six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "the vending machine uses sensors detect coin inserted first sensor positioned dime pass beneath it, second sensor positioned coins pass front it signal second sensor used clock fsm, signal first sensor indicates whether coin dime quarter",
        "the vending machine releases item using decoder generate three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the output fsm position farmer, fox, goose, corn output either left bank right bank river game also two indicators: w reaching winning state, l reaching losing state",
        "the state represented fxgc, f position farmer, x position fox, g position goose, c position corn game five buttons: reset, cross alone, cross fox, cross goose, cross corn game stops player wins loses",
        "the next state fxgc=0101 farmer bank fox, corn, b_x b_c buttons ignored, leading next-state table right notice b_g accepted even b_c pressed farmer bank corn",
        "the player loses game able correctly answer question player gets question wrong, start game beginning",
        "the input fsm 3-bit register 6-bit timer timer used count produce output z=1 reaches 0 register used store state fsm",
        "the player loses game able get correct answer question player gets correct answer, win game",
        "the state fsm split two pieces: {3-bit} register {6-bit} timer timer simply binary counter counts downward produces output z=1 reaches 0 notice register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle we thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the fsm alternates green lights two roads setting timer different value state fsm changes causes lights change color cycle-by-cycle basis, green light alternating two roads",
        "the fsm initialized state \"000\" order ensure lights one roads red times timer set \"a\" order maintain new value number cycles",
        "the stoplight controller 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the stoplight controller shows yellow light showing red light order give drivers warning allow slow down",
        "starting human-based design process typically results design efficient effective one mapped high-level programming language human designers easily optimize design specific metrics, power consumption performance additionally, human designers easily impose constraints design, limits chip area minimum performance, order guide design process",
        "the general model computer system execute set instructions, called program, store resulting data system set registers hold data instructions, set memory locations store data programs system also set input output devices allow interact outside world",
        "the purpose process find best formulation specific logic function given metric done using heuristic approaches find solutions strike balance various metrics cost, power, performance",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "a computer machine programmed carry set arithmetic logical operations automatically fsm model behavior composed finite set states, transitions states, actions",
        "one way transform code written high-level language fsm use compiler compiler program translates code written high-level language code run computer another way transform code written high-level language fsm use interpreter interpreter program executes code written high-level language",
        "the control structure code maps high-level fsm design breaking program simple steps, one step flow chart may sometimes require one state fsm similarly, one fsm state may able implement several steps flow chart, steps performed simultaneously",
        "one design fsm executes simple pieces flow chart breaking program smaller steps mapping step state fsm one also use registers counters implement variables program, use comparator implement test statement",
        "what difference sop pos sop pos two forms two-level logic sop, output true inputs true pos, output true inputs true",
        "the array notation code means code trying convert input user appropriate result, store result memory address given next argument",
        "1 difference two-level three-level logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic three-level logic way expressing logic functions using three levels three levels refer number functions input passes reach output, sop pos forms examples three-level logic",
        "the idx variable used keep track number operations logic expression metric used estimate number transistors needed design, turn estimate area required design"
    ],
    "54": [
        "the design process involves manipulation logic expressions order optimize specific metrics, cost, power, performance today, manipulation performed almost entirely computers, human engineers supplying logic functions interest imposing constraints process",
        "a gray code sequence n-bit patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit construct gray code recursively follows: (n+1)-bit gray code, write sequence n-bit gray code, add 0 front patterns sequence, append second copy n-bit gray code reverse order, put 1 front patterns second copy",
        "the implementation diagram three-bit gray code counter logic diagram shows inputs, outputs, next-state logic counter diagram ordered left right {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2, makes easy read check correctness",
        "the vertical lines carrying current state values inverses back next state logic inputs ordered left right (on left side figure) {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2",
        "it important reasonable order designing logic diagram help simplify design process make easier understand function logic diagram additionally, help ensure logic diagram compatible products may used system",
        "a next-state table lists possible states fsm in, well inputs outputs state transition diagram shows order states visited, based inputs outputs",
        "the state table form specification make missing parts specification obvious showing different states system transitions states help identify parts specification missing needs added order complete specification",
        "the fsm needs least three states order eight states three possible items purchased, item purchased one two ways (with without enough money)",
        "a random access memory (ram) type memory allows data stored retrieved order ram volatile, means loses data power supply removed two types ram: static ram (sram) dynamic ram (dram)",
        "a dram cell stores bit using charged capacitor charge capacitor drains time must replaced order maintain stored value",
        "the vending machine application fsm designed team engineers fsm designed control simple vending machine accepts us coins payment offers choice three items sale machine adjustable item prices, fsm needs keep track much money inserted order decide whether user purchase one items",
        "the device used turn save energy done using heuristic approaches find solutions strike balance different metrics, cost, power, performance human engineer impose constraints, limits chip area limits minimum performance, order guide process",
        "the device uses sensors generate clock signal alternating 0 1 regular period clock 0, one set latches holds bit values fixed, combinational logic uses latches inputs produce bits copied second set latches clock 1, second set latches stops storing data inputs retains bit values order drive combinational logic, results copied third set latches",
        "the start state initial state fsm state, money deposited yet fsm needs keep track much money inserted order decide whether user purchase one items information alone enough simplest machine, let's create machine adjustable item prices",
        "this particular example tricky requires reader understand concept bit-sliced addition order understand passage furthermore, passage provide clear explanation bit-sliced adder circuit works, making difficult reader follow along",
        "the s_2 value specifies number inputs must satisfied order output 1 cuts number possible choices four two case two possible combinations inputs satisfy condition",
        "the input sequence used initialize fsm sequence 0s 1s input fsm order set state fsm desired state",
        "the outputs needed observe state check output logic values state register timer outputs used determine duration state order states occur",
        "the game revolves around old logic problem farmer must cross river order reach market farmer traveling market sell fox, goose, corn farmer boat, boat large enough carry fox, goose, corn time fox cannot left alone goose, fox eat goose goose cannot left alone corn, goose eat corn farmer get three items market",
        "the state fsm split two pieces: 3-bit register 6-bit timer timer simply binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "1 three ranges possible measurement values given metric the three ranges possible measurement values given metric values equivalently useful, ordered interesting respect one another, impossible use practice",
        "what three ranges given metric the first range measurement values equivalently useful second range possible values ordered interesting respect one another values third range impossible use practice",
        "the state fsm split two pieces: {3-bit} register {6-bit} timer timer simply binary counter counts downward produces output z=1 reaches 0 notice register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle we thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the fsm initialized state \"000\" order ensure lights one roads red times timer set \"a\" order maintain new value number cycles",
        "the stoplight controller shows yellow light showing red light order give drivers warning allow slow down",
        "starting human-based design process typically results design efficient effective one mapped high-level programming language human designers easily optimize design specific metrics, power consumption performance additionally, human designers easily impose constraints design, limits chip area minimum performance, order guide design process",
        "the design process digital fsm includes six steps: developing abstract model, specifying i/o behavior, completing specification, choosing state representation, calculating logic expressions, implementing flip-flops gates",
        "the first examples passage two-level logic, demorgan's law, sop form two-level logic popular way expressing logic functions, demorgan's law way simplify expressions sop form way representing logic function",
        "an fsm must initialized ensure starts known state avoid undefined behavior without initialization, fsm may produce incorrect results may work all",
        "a multiplexer digital logic block allows one digital signal select several others forwarded output simplest form multiplexer 2-to-1 multiplexer, two inputs left one top top input allows us choose left inputs forwarded output",
        "the choice representation fsm's internal state affects complexity implementation terms number states, number inputs, number outputs, number transition rules",
        "the design process digital fsm typically consists six steps: (1) developing abstract model, (2) specifying i/o behavior, (3) completing specification, (4) choosing state representation, (5) calculating logic expressions, (6) implementing flip-flops gates",
        "an abstract model mathematical model used describe system usually simplified include details system",
        "an fsm must initialized ensure starts known state allows fsm function correctly avoid potential problems could arise unknown starting state",
        "a multiplexer device allows multiple signals routed onto single channel done selecting one several input signals connecting output multiplexers used variety applications, telecommunications computer networking",
        "from passage, seems digital fsm designed abstract model first identifying finite set states, set possible inputs, set possible outputs, set transition rules then, fsm implemented digital system representing states patterns using fixed number bits, translating inputs bits, translating outputs bits finally, transition rules defined given state fsm pattern input bits, transition defined state another state",
        "a fsm implemented digital system, states represented patterns using fixed number bits, inputs translated bits, outputs translated bits transition rules must complete, meaning given state fsm pattern input bits, transition must defined state another state outputs digital fsm calculated using boolean logic expressions",
        "the design process counter number states power two choose representation states makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "the fsm initialized one six states desired loop ensures lights roads red cars waiting one roads",
        "the choice representation fsm's internal state affects complexity implementation states represented bit patterns, transition rules must complete states represented abstract states, outputs state must specified",
        "the first step design process develop abstract model model translation human language description model states desired behavior model particularly thorough exact stage",
        "the second step design process think carefully metrics possible interest set metrics feel complete, next step get rid many can",
        "the third step design process identify metrics practical impact current technology, set threshold values metrics simplify reasoning them, eliminate redundant metrics, calculate linear sums reduce count metrics, and, finally, make use notion pareto optimality",
        "the fourth step design process choose particular design set possible designs making choice, engineers typically consider variety factors, including cost, performance, manufacturability, reliability",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "the first step design process develop abstract model model captures intent description particularly thorough exact",
        "the third step design process evaluate design using multiple metrics includes identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "the fourth step design process choose particular design set possible designs choice made based number factors, including objectives design, constraints problem, preferences designer",
        "abstraction process simplifying complex system identifying important aspects system ignoring rest context implementation, abstraction used simplify design identifying important features design ignoring rest make design manageable easier understand",
        "there reasons important make implicit assumptions clear design process first, assumptions made clear, lead confusion misunderstanding among team members working design second, making assumptions explicit help ensure everyone page working towards goal finally, explicit assumptions help prevent errors mistakes design process",
        "the choice state representation affects implementation fsm terms number gates inverters required, well delay overall design serial comparator design based 2-bit slice variant, example, requires 24 gates 10 inverters, much larger earlier serial design terms gate delays, however, new design identical, meaning comparisons finished half time realistic area timing metrics show slightly difference two designs differences dominate results design carefully considered",
        "the choice fsm's input output behavior affects design process determining set possible states set possible outputs set possible states determined set possible inputs, set possible outputs determined set possible outputs",
        "one important reason compatibility components digital system helps ensure system function correctly components compatible, system may work correctly, may work all additionally, compatibility among components help reduce cost manufacturing system, well cost maintaining repairing system",
        "a gray code counter device used count number operations logic expression device works counting number variables expression adding number operations device used optimize logic expressions reducing number operations needed implement logic function",
        "the inputs gray code counter current state counter clock signal clock signal triggers state change counter",
        "the transition diagram two-bit gray code counter loop counter moving one state next cycle state diagram marked internal state value s_1s_0 (before ``/'') output z_1z_0 (after ``/''), always equal counter",
        "the implementation gray code counter developed first filling k-maps next-state values, deriving algebraic expressions next-state logic used develop implementation",
        "the inputs counter coins inserted machine machine track value coins terms nickels reject coins inserted would cause value exceed maximum value machine track",
        "a gray code counter type digital counter used count number clock pulses named frank gray, invented code 1953 main advantage gray code counter types counters less likely produce errors counting",
        "a gray code counter type counter uses gray code, cycle bit patterns certain length consecutive patterns differ exactly one bit regular counter type counter use gray code",
        "the timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle states thus act like counter",
        "the output counter number successful conversions made scanf function",
        "a gray code counter type counter cycles possible bit patterns certain length states transition diagram gray code counter form loop, counter moving one state next cycle state diagram marked internal state value output value, always equal counter",
        "there benefits using gray code counter first, easy design implement second, easy check correctness logic third, easy read understand logic",
        "a gray code counter used applications digital value must changed incrementally least number steps gray code counter changes one bit time, minimizes number digital values must changed",
        "a gray code counter type digital counter uses gray code generate output input gray code counter digital signal represents number clock pulses applied counter output gray code counter digital signal represents number clock pulses applied counter, plus one",
        "a gray code counter designed first creating transition diagram shows states outputs counter next, next-state logic developed creating k-maps next-state values deriving algebraic expressions finally, next-state logic implemented diagram",
        "the internal state value third bit gray code counter s_2s_1s_0=001 hold=1, next-state logic s_1^+ s_0^+ reduces s_1^+=s_1 s_0^+=s_0; words, counter stops counting simply stays current state hold=0, equations become s_1^+=s_0 s_0^+={{s_1}}, produces repeating sequence s_1s_0 00, 01, 11, 10, desired",
        "the output third bit gray code counter would either 0 1 input 0, output 1 input 1, output 0",
        "the next state value s2 0 timer set state changes, find duration state analyzing muxes bottom mux selects s_2=0, selects output top mux s_2=1",
        "the next state value s0 0 timer set state changes, find duration state analyzing muxes bottom mux selects s_2=0, selects output top mux s_2=1 top mux selects b s_0=1, selects c s_0=0",
        "the fully-specified transition diagram three-bit gray code counter follows: the states counter form loop, counter moving one state next cycle each state diagram marked internal state value s_2s_1s_0 (before \" / \") output z_2z_1z_0 (after \" / \") based transition diagram, next-state values s_2^+, s_1^+, s_0^+ filled shown",
        "the next-state values three-bit gray code counter follows: s_2^+=0, s_1^+=s_0, s_0^+={{s_1}}",
        "the next-state logic three-bit gray code counter follows: s_2^+ = s_2 + s_0 s_1^+ = s_2 s_0^+ = s_2 s_1",
        "adding third bit gray code counter increases design complexity requires additional carry bit carry bit must propagated adder bit slice logic, increases number logic gates required overall complexity design",
        "one way reduce design complexity make use common algebraic terms sub-expressions help simplify design make easier understand another way reduce complexity use demorgan's laws simplify expression help reduce number gates needed make design efficient",
        "the counter's implementation diagram simplifies understanding diagram breaking smaller, manageable pieces this, easier see various parts diagram interact other additionally, makes easier identify potential problems areas improvement",
        "the purpose vertical lines carrying current state values inverses back next state logic inputs ensure state fsm always consistent necessary safety reasons, fsm must always ensure lights one roads red times",
        "the color mapping three-bit rgb encoding system system colors represented combination red, green, blue light color mapping system shown right imagine charged creating counter drive light sequence colors",
        "the light red one roads times road green light, controller show yellow light showing red light give drivers warning allow slow down finally, fairness, controller alternate green lights two roads",
        "from passage, inferred logical completeness necessarily help efficient design logic functions words, single boolean logic function expressed many different ways therefore, important engineers learn develop efficient implementation function, well determine whether two logic expressions identical without actually writing truth tables",
        "the next-state values s_2, s_1, s_0 given table right states act like counter, examining connections, derive equations next state draw transition diagram six states loop defined next-state logic, two remaining states converging loop single cycle",
        "the equation s_2^+ follows: s_2^+ = + b + c, carry bit, b first bit added, c second bit added overflow occurs, s_2^+ = c",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills students learn coming months",
        "yes, choose use counter's internal state directly output values colors need produce outputs unique bit patterns using counter's internal state directly output values, simplify design",
        "a fully-specified transition diagram diagram specifies states system in, well transitions states allows clear understanding behavior system",
        "a karnaugh map graphical representation boolean function helps simplify function map consists grid squares, corresponds possible combination input values map used find groups product terms implicants function",
        "the next-state logic equations functions describe relationship current state system next state system functions represented either sop pos form demorgan's law used simplify functions replacing or gates nand gates, and gates nor gates",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways, learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills start learn coming months",
        "the color mapping three-bit rgb encoding system colors produced unique bit patterns states form loop, marked internal state value s_2s_1s_0 output rgb",
        "the desired pattern one represents number 2's complement representation 2's complement representation defined choosing set integers balanced around zero groups so, want represent number 2's complement representation, need choose pattern represents number representation",
        "the transition diagram color sequencer loop six states, two remaining states converging loop single cycle lights red states, necessary safety timer set state changes, duration state calculated analyzing muxes",
        "the initial state three flip-flops implementation 0s 1s use init input choose normal operation (init=0) fsm forcing fsm next state given i_2i_1i_0 (when init=1)",
        "the timer set 0, state fsm changed next state sequence new state fsm determines duration next state, timer set accordingly",
        "the passage states power consumption important metric engineers must take account designs however, cases, desktop high-end server processors, metrics (such performance) may important always want operate edge interesting range could going wrong, engineers taking power consumption account much be",
        "one possibility fsm resetting properly, starts unexpected state another possibility race condition fsm, get unexpected state inputs change quickly",
        "the purpose adding and gates input create logic function efficient terms area power done reducing number variables expression",
        "the issue fsm getting unexpected states cause output circuit glitch problematic applications stable output required",
        "the fsm get unexpected states inputs set properly example, input set 111, fsm stay white state indefinitely",
        "the initial state three flip-flops implementation 0 state explicit mechanism initialization forces flip-flop 0 state alternatively, could add extra logic design would allow us force fsm specific state next cycle",
        "the first approach use flip-flop design add single bit pass necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "interrupts powerful exceptions occur asynchronously respect program means processor check interrupts instructions, allows flexibility design processor",
        "the light sometimes glows cyan red briefly appearing white controller must ensure lights one roads red times similarly, road green light, controller show yellow light showing red light give drivers warning allow slow down",
        "one possibility fsm resetting properly, start expected initial state another possibility race condition fsm, reach unexpected state inputs change quickly",
        "the initial state three flip-flops unknown unless explicit mechanism initialization initialization work two ways first approach makes use flip-flop design know, flip-flop built pair latches, make use internal reset lines latches force flip-flop 0 state (or 1 state) using additional input alternatively, add extra logic design",
        "one way make use internal reset lines latches force flip-flop 0 state done connecting reset lines latches 0 voltage source",
        "the passage discusses design serial comparator using bit-sliced approach approach leads design 24 gates 10 inverters, much larger earlier serial design however, new design identical terms gate delays, meaning comparison finished half time",
        "an abstract model simplified representation system, typically used aid understanding system context logic optimization, abstract model used help understand tradeoffs different logic expressions",
        "there four states second version table states a, b, c, d b on state, c off state",
        "the second version table implies buttons placed ergonomic way possible buttons close together enough space buttons edge table",
        "the design counter includes eight states, three state bits used keep track current state choice representation fsm's states dramatically affect design complexity right strategy thus often start selecting representation makes sense human, even requires bits strictly necessary",
        "the two states first column table states fsm f=0 case, timer set state changes, find duration state analyzing muxes",
        "the four counting states are: 1) state a: timer set s_2=0 duration state a 2) state b: timer set b s_0=1 duration state b 3) state c: timer set c s_0=0 duration state c 4) state d: timer set s_2=1 duration state d",
        "there four halted states: halt a, halt b, halt c, halt d states, counter retains current value user presses \"go\" button",
        "pressing ``halt'' button nothing counter halted counter remains state ``go'' button pressed",
        "pressing ``go'' button causes counter start counting",
        "an fsm finite state machine, mathematical model computation used design computer programs digital logic circuits abstract machine one finite number states",
        "there several benefits using fsm one benefit fsm used implement wide range logic functions another benefit fsm used construct larger memories multiple smaller memories finally, fsm used reduce number pins needed chip",
        "there disadvantages using fsm first, fsm designed carefully, hard understand debug second, fsm use resources simpler design, state machine finally, fsm difficult change extend simpler design",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "the input behavior machine based type coin inserted selection item purchase user inserts coin nickel, machine reject coin remain state user inserts nickel, machine transition next state accept coin user selects item purchase, machine release item user inserted enough money otherwise, machine remain state",
        "the output behavior add3 procedure takes three integers arguments, adds together, returns sum procedure called constants 10, 20, 30, result printed calling convention, call made, r0 must contain value 10, r1 value 20, r2 value 30",
        "the ``halt'' button ice cream dispenser stops machine dispensing ice cream useful user wants stop machine dispensing ice cream, machine malfunctioning needs stopped",
        "the \"go\" button initiates system call causes processor enter kernel mode execute instructions associated system call instructions part operating system used perform desired action, printing character console",
        "the two-bit gray code sequence two-bit patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit",
        "there two control buttons: one east-west road one north-south road",
        "a gray code sequence patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit construct gray code recursively follows: (n+1)-bit gray code, write sequence n-bit gray code, add 0 front patterns",
        "the states transition diagram represent different colors stoplight first two states red, followed yellow, green last two states red",
        "the uninterrupted counting cycle represents duration state fsm used calculate duration state fsm f=0",
        "system calls initiated trap instruction, system calls also known traps many architectures, system call places processor privileged kernel mode, instructions implement call considered part operating system",
        "the purpose using gray code create sequence patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit",
        "the design continues choosing state representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "if use gray code, would compare two expressions determine whether represent logic function would test logical equivalence, important part hardware design however, tools today provide help problem, necessary use gray code",
        "if user presses \"go\" button state {count a}, outputs c_l=11 c_m=01 means user get one half servings lychee half serving mango",
        "there explicit answer question passage however, based information given, seems user presses ``halt'' button state { count a}, system reset state { halt a}",
        "there two possible outcomes user presses ``go'' button state { halt a} first outcome fsm moves state { count b}, next state sequence second outcome fsm resets state { count a}, initial state",
        "there possible ways answer question one way would say user presses ``halt'' button state { halt a}, system reset state { count a} another way answer question would say user presses ``halt'' button state { halt a}, system remain state { halt a}",
        "there two possible ways user could press buttons state { halt a} first way user could press \"halt\" button \"go\" button case, fsm would move state { halt a} state { count b} second way user could press \"go\" button \"halt\" button case, fsm would move state { count b} state { halt a}",
        "if user presses \"go\" button (hg=01), ice cream cup overflow outputs c_l=11 c_m=10, means dispenser release full serving flavor, two servings total",
        "if ``halt'' button pressed (hg=10), counter remains halted state { halt a} buttons pressed (hg=11), ``halt'' overrides ``go,'' nothing special alone pressed counter halted thus, input patterns hg=10 hg=11 also take state { halt a} back itself",
        "if user presses buttons (hg=11), ice cream cup overflows outputs c_l=11 c_m=10, dispenser releases full serving flavor, two servings total",
        "if \"halt\" button pressed (hg=10), logic outputs c_l=00 c_m=00, dispenser gives ice cream buttons pressed (hg=11), outputs c_l=11 c_m=11, dispenser gives two servings flavor, four servings total",
        "the design counter completed applying decisions made { count a} state counting states, decisions made { halt a} state halted states results design states labeled internal state outputs (s_2s_1s_0/z_1z_0)",
        "one important reason consider possible input conditions possible states help ensure design correct example, design ever receives input values within certain range, possible design actually correct input values considering possible input conditions help catch errors like this another reason consider possible input conditions help optimize design example, design ever receives input values within certain range, possible simplify design make efficient considering possible input conditions help identify opportunities optimization",
        "a transition diagram help process helping identify important metrics helping balance design effectively according metrics",
        "if user presses \"go\" button (hg=01), machine dispense one half servings lychee half serving mango",
        "if ``halt'' button pressed (hg=10), counter remains halted state buttons pressed (hg=11), counter also remains halted state",
        "when turing machine given input, either finishes finite number steps, not finish finite number steps, machine said \"halted\"",
        "a counter \"counting\" process incrementing, counter \"halted\" incrementing",
        "the choice representation fsm's states affect design complexity determines many bits needed represent state bits needed represent state, design complex",
        "the right strategy choosing representation start selecting representation makes sense human, even requires bits strictly necessary make design process simpler efficient long run",
        "the choice state representation affects design complexity ways first, affect number bits needed represent states second, affect number possible states represented third, affect number transitions need considered designing state machine",
        "the right strategy start selecting representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "one reason often best start selecting representation makes sense human easier understand work with additionally, starting representation makes sense human help ensure final product also easy understand use",
        "abstraction powerful tool help simplify complex problems selecting state representation, abstraction help identify important aspects problem ignore irrelevant details make easier find solution effective efficient",
        "abstraction selecting state representation lead better design allowing engineer focus important aspects problem ignoring details important help simplify problem make easier find solution",
        "the number state bits affects design complexity determines number possible states fsm in larger number state bits means possible states design must able handle them",
        "abstraction important selecting state representation allows designer select representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "one reason important start representation makes sense human humans must supply logic functions interest, must program acceptable transformations equivalent forms second reason complexity problem good way introduce real engineering finally, contextual information help develop better understanding finite state machines higher-level abstractions form core digital systems still defined directly humans today",
        "abstraction selecting representation impact design metrics reducing number metrics need considered simplify process designing solution make easier find optimal solution",
        "hold 1 counter count state s_2=0 counter already halted press \"go\" button",
        "hold = h + s_2 when counter halt state s_2=1, hold = 1 counter stop (move halted state without changing value) h true, halted states, s_2=1, counter stops (stays halted state) h+ true",
        "the value s_2 counter count state hold=0 undefined because, passage states, overflow occurs either operands negative operands positive operands negative, resulting sum equal c however, operands positive, resulting sum less c thus, impossible determine value s_2 without knowing values operands",
        "s_2 1 counter halt state hold=1 s_2=1, counter halted, hold=1, counter retain current value",
        "the value s_1s_0 counter count state hold=1 01",
        "the hold variable used save energy chip finishes work, turn off, saving energy variable allows chip turn finished, saving energy",
        "the value hold counter counting 0 value hold counter halted 1",
        "the value hold counter halted value last input given machine",
        "the value hold determines whether counter counts determining whether counter hold current value (stop counting) ``halt'' button pressed counter already halted ``go'' button pressed",
        "the next-state logic s_1^+ s_0^+ hold=0 follows: s_1^+ = s_0 + hold s_0^+ = s_1 + hold",
        "the hold variable simplifies design allowing designer separate logic deciding whether advance counter fairly cleanly logic advancing counter itself hold bit diagram used determine whether counter advance current cycle",
        "the similarity equations s_1^+s_0^+ equations {2-to-1} mux used represent logic function two-level logic popular way expressing logic functions simple map expression cmos gates using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate",
        "the use s_2 separates logic deciding whether advance counter allowing counter halted state (s_2=1) counting state (s_2=0) hold=1, counter retains state, hold=0, counts",
        "f two effects operation fsm first, prevents timer reset enters new state effect lengthening duration state second, prevents fsm entering loop defined next-state logic effect halting fsm current state",
        "abstraction used build three-bit gray code counter two-bit design using copies bit-sliced adder circuit approach less efficient designing circuit specifically three-bit gray code counter, simpler",
        "the state representation used determine next state fsm done examining inputs fsm deriving equations next state states fsm act like counter, examining connections, next state determined",
        "there several benefits good state representation first, help reduce number pins needed chip second, improve density memory chip third, improve speed memory chip",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor performance cases, bad state representation also lead increased costs fabrication testing",
        "one way verify implementation correct test known set inputs compare results expected results results match, implementation likely correct another way verify implementation examine code look errors done manually help software tool",
        "a good state representation easy understand able capture relevant information problem bad state representation may difficult understand may able capture relevant information",
        "the state representation significant impact overall design system affects way system behaves interacts environment well-chosen state representation simplify design system make efficient",
        "the states fsm act like counter, value fsm set whenever state changes timer set state changes, duration state determined value timer fsm also set conditions, signal f calculated",
        "a good state representation important help reduce number logic gates needed design, thus save chip area additionally, good state representation help improve performance design reducing number logic operations needed",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor power consumption cases, two metrics may strongly correlated, meaning design good one metrics frequently also good metric",
        "one way improve bad state representation make compact done using two-level logic instead three-level logic another way improve bad state representation make readable done using clear consistent naming conventions",
        "the state representation impacts fsm determining duration state timer set whenever state changes, duration state determined muxes bottom mux selects s_2=0, selects output top mux s_2=1 top mux selects b s_0=1, selects c s_0=0",
        "a bad state representation lead number problems, including wasted engineering effort, poor performance, even product cancellations",
        "a bad state representation fixed using code larger hamming distance enable system detect correct errors",
        "there best state representation fsm important factor representation complete, meaning states represented inputs accounted for considerations include size state space number inputs outputs",
        "a good state representation important help reduce number transistors needed design, thus save space energy additionally, help improve performance design making easier computer manipulate logic expressions",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context",
        "the common types memory used digital systems sram dram sram used high-speed applications processor caches embedded designs dram used applications less demanding speed requirements",
        "one build static rams using logic using tri-state buffers tri-state buffers used create larger memories using multiple chips wider memories also created using multiple chips",
        "tri-state buffers used provide logical disconnection tri-state buffer output logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "memory chips combined provide larger wider memories using multiple chips example, two 2-bit memories used implement 4-bit memory one address bits used drive decoder determines two chips active (cs=1) decoder enabled chip select signal larger memory, neither chip enabled external cs low, desired",
        "the two common types memory used digital systems static random access memory (sram) dynamic random access memory (dram) sram used high-speed applications processor caches embedded designs, dram used applications less demanding speed requirements, main memory computers",
        "one build memories using logic creating tri-state buffer logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "a tri-state buffer type digital logic device used either connect disconnect signal line power source ground achieved using two transistors, one connect signal line power source, connect signal line ground buffer enabled, transistors turned on, signal line connected either power source ground, depending value input signal buffer disabled, transistors turned off, effectively disconnecting signal line power source ground",
        "one way combine memory chips use multiple chips implement larger memory done using one address bit drive decoder determines two chips active another way combine memory chips use multiple chips implement wider memory done routing external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one builds memories (static rams) using logic connecting dual-inverter loop opposing bit lines transistors controlled select line select high, transistors connect inverter loop bit lines writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "a tri-state buffer logic circuit used disconnect output logic circuit achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "one way combine memory chips use create larger memory done using one address bit drive decoder determines two chips active address bits, well external data inputs write enable signal, delivered memories external data outputs also connected memories another way combine memory chips use create wider memory case, chips either active inactive time, external address, write enable, chip select inputs routed chips however, data inputs outputs separate, chip handling different part data",
        "dynamic rams memories use charged capacitor store bit charge drains time must replaced, giving rise qualifier ``dynamic'' dram also unavailable recharging capacitors, problem applications stringent real-time needs",
        "random access memories (rams) memories support two operations: writing data element, reading data element memories also volatile, means data held memory erased electrical power turned fails static random access memory (sram) used high-speed applications processor caches embedded designs",
        "the addressability computer memory number bits stored element memory size elements memory vary single binary digit, bit, byte (8 bits) more typically, data elements larger byte referred words, size word depends context",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors, dram cell uses one transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "to write data memory element, external circuit sends signal memory indicating address element written data written sent memory, memory stores data element specified address",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context element memory assigned unique name, called address, allows external circuit identify particular element interest addresses unlike street addresses use send letter unlike street addresses, however, memory addresses usually little redundancy; possible combination bits address identifies distinct set bits memory",
        "a chip select input input chip allows chip turned off input used save energy turning chip needed",
        "a word context computer memory sequence bits represents unit data words represent numbers, characters, data types size word typically determined computer's word size, number bits computer process time",
        "non-volatile memories include magnetic optical storage media dvds, cd-roms, disks, tapes, capacitive storage media flash drives, programmable logic devices",
        "a ram type memory used store data volatile memory, means data stored memory erased power turned fails ram random access memory, means time required access element memory independent element accessed",
        "sram faster dram, dram denser (has bits per chip area) substantial part dram density due transistor count: typical sram cells use six transistors (two inverter, two connect inverters bit lines), dram cells use single transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "a computer memory storage device data two main types memory: sram dram sram faster expensive, dram slower cheaper dram commonly used main memory computers",
        "data elements computer memory stored either static random access memory (sram) dynamic random access memory (dram) sram uses active logic form two-inverter loop maintain stored values, dram uses charged capacitor store bit",
        "the addressability computer memory number bits stored element memory size elements memory vary single bit byte more typically, data elements larger byte referred words, size word depends context",
        "words computer memory stored bits, either 0 1 group bits makes byte, smallest unit data stored computer memory group bytes makes word, smallest unit data read written computer memory",
        "static random access memory used high-speed applications processor caches embedded designs sram bit density significantly lower dram bit density, applications less demanding speed requirements use dram",
        "an sram cell flip-flop made two cross-coupled inverters output one inverter connected input other, vice versa power applied, sram cell one two stable states, represent 0 1 state cell changed applying correct sequence voltages inputs",
        "sram cells combined bit slice sharing bit lines analog read write logic bit slice figure thought 16-address, 1-bit-addressable memory (2^4b) cells bit slice share bit lines analog read write logic, appears right figure",
        "a chip select input used enable disable chip input used save power turning chip needed",
        "the main advantage sram dram speed sram faster dram need refresh memory cells often dram denser sram, store data given area",
        "sram cells store data using dual-inverter loop writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "a read operation performed sram cell first bringing bit line intermediate voltage level, raising select line allows capacitor either pull small amount charge bit line push small amount charge onto bit line resulting change voltage detected sense amplifier",
        "a write operation sram cell performed charging charging capacitor capacitor attached bit line transistor controlled select line select low, capacitor isolated holds charge however, select high write operation, logic driving bit line forces charge onto capacitor removes charge it",
        "sram type memory used computers made number transistors store data way easy computer access sram faster types memory, also expensive",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors (two inverter, two connect inverters bit lines), dram cell uses single transistor",
        "a sram cell organized flip-flop, one transistor one capacitor per bit capacitor stores data bit, transistor controls access bit",
        "sram cells combined bit slice sharing bit lines analog read write logic decoder sets one cell's select line high enable read write operation cell chip select input cs drives enable input decoder, none memory cells active chip select low (cs=0), exactly one memory cells active chip select high (cs=1)",
        "a write operation sram cell performed bringing bit line intermediate voltage level, raising select line, allows capacitor either pull small amount charge bit line push small amount charge onto bit line resulting change voltage detected sense amplifier end bit line",
        "the main benefit using tri-state buffer allows logical disconnection buffer output means multiple memories share output line without need additional multiplexers",
        "a tri-state buffer achieves logical disconnection using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "the decoder memory chip responsible translating memory address correct location memory chip necessary ensure correct data read written correct location memory chip",
        "multiple chips used construct wider memories connecting address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used reduce number pins needed chips combining inputs outputs allowed chip designers halve number pins needed",
        "a tri-state buffer type digital logic circuit used either connect disconnect signal line power supply ground done using two transistors, one connect signal line power supply, connect signal line ground buffer enabled, transistors turned on, signal line connected either power supply ground, depending value input signal buffer disabled, transistors turned off, signal line effectively disconnected power supply ground",
        "a tri-state buffer digital circuit used either connect disconnect output signal line buffer three states: high, low, high impedance buffer high state, output connected signal line copies signal input buffer low state, output disconnected signal line buffer high impedance state, output effectively disconnected signal line",
        "the benefit using tri-state buffer allows logical disconnection tri-state buffer output means output shared one memory without need additional multiplexers useful creating larger memories combining multiple chips",
        "tri-state buffers used construct larger memories using multiple chips connecting external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used construct wider memories connecting data inputs outputs multiple memories together allows output line shared one memory without need additional multiplexers",
        "a tri-state buffer digital circuit used either connect disconnect signal circuit buffer three states: high, low, high impedance high impedance state effectively disconnects signal circuit allows multiple memories share output line without need additional multiplexers",
        "a tri-state buffer used create electrical connection tri-state buffer output logical disconnection achieved using outer transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "tri-state buffers used reduce number pins needed chip combining inputs outputs example, data inputs outputs memory combined single set data wires, bidirectional signals reduces number pins needed still allowing amount data transferred",
        "one way construct wider memory use multiple chips connect data inputs outputs chip separately way, left chip handles high n bits input writes produces high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way construct larger memory use multiple chips one address bits drive decoder determines two chips active decoder enabled chip select signal larger memory way, neither chip enabled external cs low",
        "the main difference sram dram sram faster uses transistors, dram slower uses fewer transistors dram also denser sram, meaning bits stored given area",
        "a sense amplifier circuit used read data stored memory cell sense amplifier amplifies small signal memory cell converts digital signal read processor",
        "a row natural basis refresh cycle dram data pins provide bidirectional signals reading writing elements dram output enable input, oe, controls tri-state buffers dram determine whether dram drives data pins we input, controls type operation, also present",
        "sdram type dram used main memory computers ddr4 sdram newer type dram faster sdram",
        "dram used storing data capacitor capacitor attached bit line transistor controlled select line select line low, capacitor isolated holds charge however, transistor's resistance finite, charge leaks onto bit line",
        "dram type memory uses capacitors store data row dram selected, cells row read written back, refreshes data cells dram said destructive reads read operation brings voltage capacitor closer intermediate voltage level, effectively destroys data cell",
        "the benefits using dram denser sram uses fewer transistors makes dram ideal applications size important speed",
        "there several disadvantages using dram first, dram slower sram second, dram less dense sram, requires chip area store amount data finally, dram cells complex sram cells, difficult design manufacture",
        "dram type memory slower sram denser (has bits per chip area) dram cells use single transistor, sram cells use six transistors dram designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor count",
        "dram type capacitive storage, bit stored charging charging capacitor capacitor attached bit line transistor controlled select line select line high, capacitor isolated holds charge however, transistor's resistance finite, charge leaks onto bit line charge also leaks substrate transistor constructed",
        "a dram cell refreshed reading contents writing back active logic process necessary avoid data loss due charge leakage capacitor",
        "a sense amplifier device used amplify signal sensor typically used amplify signal small sensor, pressure sensor, level read larger device, computer",
        "the ras signal indicates row component address available raising ras signal row destructively reads contents cells row, forcing cells rewritten effecting refresh row thus natural basis refresh cycle",
        "the column address strobe (cas) input used indicate address components available used control type operation (read write)",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, problem solved",
        "the lab simulates two-level logic used map expression cmos gates also shows graphically manipulate expressions understand gate diagrams",
        "the fsm stoplight controller ensures lights one roads red times controller also alternates green lights two roads",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, servo held place, desired",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab",
        "juan jos'e jaramillo identified common failure modes, including variability caused sunshine windows eceb, made changes improve robustness also created powerpoint slides typically used describe lab lecture",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "prof doug jones designed vending machine application fsm first identifying different states machine could in created state diagram showed machine would transition one state another finally, implemented fsm hardware using altera quartus software",
        "prof chris schmitz prototyped constructed physical elements help ece shop designed vending machine application fsm, prof doug jones created wiki documentation altera quartus portions lab casey smith, head guru ece instructional labs, developed new debounce design made changes improve robustness",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab based lab earlier mentor graphics work prof herman prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "prof kindratenko helped scale design way made possible deliver 400 students entering ece every semester creating wiki documentation altera quartus portions lab also helped improve robustness lab identifying common failure modes making changes design",
        "jaramillo later identified common failure modes, including variability caused sunshine windows eceb, made changes improve robustness also created powerpoint slides typically used describe lab lecture",
        "a signal used set timer f 0, timer set state changes",
        "this synchronous fsm implemented digital logic fsm finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs",
        "the first optical sensor used detect presence chip chip present, sensor turns chip used chip present, sensor turns chip cannot used sensor used save energy turning chip needed",
        "the second optical sensor used detect chip finishes work chip turn save energy metric used guide process optimizing logic expressions balance struck different metrics involved",
        "if rise fall rising clock edge, processor would able recognize interrupts instructions would cause program terminate unexpectedly",
        "to use device, user presses one buttons user presses one button, device produces lychee ice cream user presses blend button, device produces blend user presses mango button, device produces mango ice cream",
        "the signal indicates interrupt occurred interrupt could generated external device, disk drive keyboard, error program executed, undefined instruction attempt divide zero",
        "the significance rising edge signal second sensor indicates presence object field view sensor rising edge signal indicates sensor detected change intensity light receiving",
        "a input operand and function and function evaluates 1 input operands equal 1 input operand or function or function evaluates 1 input operand equal 1",
        "there two optical sensors positioned different heights device first sensor positioned high enough slope dime passes beneath sensor, allowing signal produced sensor tell us whether coin dime quarter second sensor positioned coins pass front it signal second sensor used clock fsm",
        "the device uses two optical sensors differentiate dime quarter first sensor positioned dime passes beneath it, second sensor positioned coins pass front it rising edge clock signal second sensor occurs, signal first sensor indicates whether coin dime quarter",
        "the fsm uses signal determine whether accept reject coin checking rising edge signal second sensor rising edge occurs, signal first sensor indicates whether coin quarter (t=1) dime (t=0) sample timing diagram lab appears right clock signal generated lab square wave---in words, high low portions equal---but also unlikely periodic instead, ``cycle'' defined time coin insertions",
        "the output depend input function and evaluate 1 input values 1 input value 0, function evaluate 0",
        "the possible inputs fsm dime (t=0) quarter (t=1) machine reject input user tries purchase item without inserting enough money first, fsm also reject request",
        "the possible outputs fsm a=1 p=1 f signal used set timer, either 0 1 f=0, timer set state changes f=1, timer set state changes light one roads green",
        "the dime quarter states used represent user inserted one coin purpose states output a=1 p=0, indicating user yet paid full price another coin needed",
        "the rejectd rejectq states used handle user mistakes user enters second dime dime state, fsm reject coin rejectd state rejects dime (a=0) continues wait quarter (p=0) rejectq state used handle user inserts one quarter",
        "the start state first state fsm sequence used initialize fsm",
        "the dime state state machine waiting dime inserted first state machine accepts coin machine outputs a=1 p=0 state, indicating user yet paid full price 35 cents",
        "the 'quarter' state refers fact addition unit 4-bit examples closed addition means value n, easily find two 4-bit unsigned numbers that, added together, cannot represented 4-bit unsigned number n=4, example, add 12 (1100) 6 (0110) obtain 18 since 18 outside range [0,2^4-1] representable using 4-bit unsigned representation, representation breaks try represent sum using representation",
        "the paid state state user paid full price 35 cents next states paid dime dime inserted quarter quarter inserted",
        "the 'rejectd' state state processor interrupts program due error unexpected behavior state usually causes program terminate",
        "the user purchases item inserting either dime followed quarter, quarter followed dime user inserts second dime, machine reject coin user inserts second quarter, machine accept coin user paid full price 35 cents",
        "the state representation lab fsm 3-bit binary number, following meaning: s_2: type last coin inserted (0 dime, 1 quarter) s_1: one quarter inserted (1 yes, 0 no) s_0: one dime inserted (1 yes, 0 no)",
        "based passage, least 33 bits internal state needed fsm needs track number cycles needed serial comparator execute comparison, least 32 cycles additionally, fsm needs track whether loop done, requires least one additional bit",
        "each bit pattern represents column addition problem carry bit (c_) added b bits produce sum bit (s_) carry bit (c_)",
        "the meaning assigned bit patterns makes easier understand behavior fsm example, paid state, last coin inserted may either type, type all, since decided start fsm state well however, four states, meanings provide clear understanding state fsm",
        "our machine accept pennies, let's fsm keep track much money inserted multiple 5 cents (one nickel) table right shows five types coins, value dollars, value terms nickels expensive item machine might cost dollar two, fsm must track least 20 40 nickels value let's decide use six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "the state table represents six states loop defined next-state logic, two remaining states converging loop single cycle lights red states, necessary safety",
        "the k-map represents domain function form hypercube hypercube divided regions, corresponds product literals function evaluated point hypercube, product literals implicant function function evaluates 1 point",
        "there 63 possible states paid state machine track 315 dollars worth nickels, 63 nickels",
        "prof jones assigns bit patterns way makes easy humans understand meaning states example, paid state, last coin inserted may either type, type all, since fsm starts state however, four states, meanings clear easy apply",
        "one reason try leverage fact next-state patterns two states relevant may simplify design system next-state patterns needed, system designed without them, may make design process simpler faster additionally, eliminating next-state patterns may also reduce cost system",
        "the final state table state transition diagram appear follows: the final state table lists six states loop defined next-state logic, two remaining states converging loop single cycle table also includes states outside desired loop lights red states, necessary safety the state transition diagram shows six states loop defined next-state logic, two remaining states converging loop single cycle diagram also shows duration state",
        "the purpose fsm control stoplights busy intersection fsm ensures lights always red one roads, yellow light shown green light, green lights alternated two roads",
        "the input sequence 111010010001 significant determines duration state fsm",
        "the input sequence 001 causes stoplight turn red roads necessary safety",
        "the design easy test two-level logic design means inputs outputs easily tested nand nor gate additionally, design easy test sop expression means inputs outputs easily tested or gate",
        "scan-based testing method testing input scanned converted appropriate result programmer responsible ensuring number conversions format string matches number arguments provided programmer must also ensure type information produced conversion stored address passed conversion",
        "we test circuit build lab see correctly implements fsm outlined notes this, input known sequence 0s 1s see circuit outputs correct responses does, confident circuit functioning correctly",
        "scan-based testing type testing used test functionality design type testing typically used test digital designs",
        "the input sequence used test fsm sequence 0s 1s applied inputs fsm input sequence used determine output fsm",
        "it difficult test sequential logic difficult predict behavior system sequential logic difficult test difficult determine whether system halt finite number steps not",
        "scan-based testing type testing input scanned errors processed type testing often used test software errors",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "the input sequence initialization is: 1) value r0 10, 2) value r1 20, 3) value r2 30",
        "the input sequence testing follows: first, user prompted input two integers decimal form, converted 2's complement stored variables 'a' 'b' next, user prompted input ascii character, value hexadecimal, double-precision floating-point number, stored variables 'c', 'u', 'd', respectively finally, user prompted input two real numbers decimal form, converted single- double-precision floating-point numbers stored variables 'f' 'd', respectively",
        "an fsm finite state machine, model computation used design computer programs hardware fsm defined set states, set inputs, set outputs, set transitions states",
        "an encoder device converts signal message code code usually binary code, sequence 0s 1s code used represent signal message form read machine, computer",
        "a decoder logic circuit converts binary code corresponding decimal code decoders used variety applications, including data storage transmission, error detection correction, address decoding",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "a digital fsm model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called { transition rule} fsm comprises five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs",
        "an encoder helps implement fsm design translating user's input signal used fsm encoder produces signal p indicating user trying make purchase, two-bit signal indicating item user wants decoder takes signal produces individual item release signals r_1, r_2, r_3",
        "a decoder used fsm design generate release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "a digital fsm finite state machine implemented digital system means states must represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits addition, transition rules must complete, meaning given state fsm pattern input bits, transition must defined another state",
        "a digital fsm used control stoplights intersection two roads fsm two inputs, f, two outputs, l1 l0 output fsm used control stoplights fsm designed stoplights red one roads times road green light, controller show yellow light showing red light give drivers warning allow slow down finally, fairness, controller alternate green lights two roads",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "one could design game controller logic puzzle would buttons corresponding different operations could performed logic puzzle example, could button add new element puzzle, button remove element puzzle, button change value element puzzle game controller could also display would show current state puzzle player's progress",
        "the stoplight controller must ensure lights one roads red times similarly, road green light, controller show yellow light showing red light give drivers warning allow slow down finally, fairness, controller alternate green lights two roads",
        "what ideas used reduce number metrics some ideas used reduce number metrics include: identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "the purpose fsm control stoplight stoplight must red one roads times, controller show yellow light showing red light give drivers warning allow slow down controller also alternate green lights two roads",
        "passage - compact approaches comparing functions, solutions subject later class (such ece 462) {two-level logic} { two-level logic} popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams begin one demorgan's laws, illustrate algebraically graphically: c = b+a = {file=part2/figs/demorgan-nandeps,width=095in} let's say function expressed sop form, z=abc+de+fghj diagram left shows function constructed three and gates or gate using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate invert point along wire, slide bubble wire output first column",
        "the inputs fsm states two roads, outputs colors lights two roads fsm ensures lights one roads red times, lights road green fsm also alternates green lights two roads",
        "the fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "why two-level logic popular two-level logic popular simple map expressions cmos gates additionally, easy understand gate diagrams",
        "interrupts priority exceptions interrupts generated external devices, exceptions generated processor itself interrupts also asynchronous, exceptions not",
        "the vending machine fsm designed control release items vending machine based user's purchase request fsm uses priority encoder determine item user requested, decoder generate individual item release signals",
        "the fsm five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs class, focus clocked synchronous fsm implementations, fsm's internal state bits stored flip-flops",
        "the coin accept bit item release bits used indicate whether coin accepted whether item released, respectively",
        "the transitions states well-defined fsm timer counts produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the numeric representation money held used track value money inserted machine allows machine keep track much money inserted reject coins value high",
        "the fsm responsible controlling stoplights busy intersection ensures lights always red one roads, green light always followed yellow light, green lights alternated two roads",
        "the fsm needs keep track loop index, current minimum value, progress serial comparator",
        "the fsm needs track state stoplight duration state",
        "the fsm responsible controlling stoplights busy intersection ensures lights one roads red times, road green light, controller show yellow light showing red light",
        "the output fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "a priority encoder type encoder generates signal whenever input lines active, encodes index highest active input two-bit unsigned number priority encoder used determine input lines highest priority",
        "a decoder type logic circuit takes input signal produces one output possible value signal decoder similar multiplexer number inputs outputs however, decoder one input signal, multiplexer multiple input signals",
        "what difference sop pos sop (sum products) boolean algebra expression or anded terms, pos (product sums) expression and ored terms",
        "the main difference mux decoder mux multiple inputs one output, decoder one input multiple outputs mux used select one several input signals send output, decoder used interpret input signal produce several output signals",
        "a decoder logic circuit converts binary code set signals used operate device decoder takes input signal, typically one coded binary number, produces one output possible value signal decoder enabled (en=1), and gates produces one minterm input signal s decoder enabled (en=0), decoder produces 0 bits",
        "how multi-metric optimization useful engineering multi-metric optimization useful engineering allows engineers identify important metrics balance design effectively according them multi-metric optimization also allows engineers get rid many metrics possible focus important ones",
        "a decoder device converts coded signals usable information decoders used variety applications, error detection correction",
        "a decoder logic circuit converts coded inputs coded outputs, usually one output code input code decoders used variety applications, including data storage transmission, error detection correction, data compression",
        "a decoder similar mux allows one digital signal select several others forwarded output decoder one input multiple outputs, mux multiple inputs one output decoder thought special case mux",
        "a decoder logic device converts binary information form one code another, usually natural binary code multiplexer device selects one several analog digital input signals forwards selected input single output line",
        "a priority encoder type encoder assigns priority certain input signals used determine input signal given priority multiple input signals present",
        "a priority encoder type encoder assigns priority certain input signals priority encoder takes signal produces output signal indicates input signal highest priority output signal typically binary number used select one input signals",
        "a decoder logic circuit converts signals one form another binary form, decoder used convert binary number decimal number",
        "a priority encoder circuit takes number input signals, outputs code represents highest priority input signal output code usually binary number",
        "a mux logic block allows us use one digital signal select several others forwarded output decoder logic block converts binary code set signals",
        "the decoder generates release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "a decoder used context simplify expression logic function using decoder, function expressed two-level logic function, easier understand manipulate",
        "the value register price1 price first item machine, determined owner machine",
        "the value register price2 number nickels machine multiplied price item question way, machine keep track much money inserted much owed item",
        "the value register price3 price third item machine, determined owner machine",
        "the value register n corresponds number nickels inserted machine user inserts quarter, machine transition state n+5, indicating 5 nickels inserted user attempts purchase item without inserting enough money first, machine remain state reject request",
        "the value register equivalence class sum two 4-bit numbers case, sum 18, equivalent 2 (mod 16)",
        "what significance demorgan's law demorgan's law popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "the register price1 six bits allows machine keep track 315 (63 nickels)",
        "what difference two-level logic forms logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "the value register price2 number nickels inserted machine",
        "what reason popularity two-level logic the reason popularity two-level logic simple way express logic functions two-level logic popular way expressing logic functions simple way express logic functions",
        "what difference sop pos sop form two-level logic, pos form multi-level logic sop popular simpler manipulate expressions algebraically graphically",
        "the value v 10 cents dime inserted dime worth 10 cents, machine tracks value money inserted terms nickels therefore, dime inserted, machine records 2 nickels",
        "passage - two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams question - what two levels two-level logic",
        "the vending machine knows much item costs owner machine sets prices dynamically machine keeps track much money inserted multiple 5 cents (one nickel) expensive item machine might cost dollar two, fsm must track least 20 40 nickels value",
        "the vending machine keeps track much money inserted multiple 5 cents (one nickel) six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "the vending machine uses sensors detect coin inserted first sensor positioned dime pass beneath it, second sensor positioned coins pass front it signal second sensor used clock fsm, signal first sensor indicates whether coin dime quarter",
        "the vending machine releases item using decoder generate three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the vending machine knows purchase requested user pushes one item selection buttons causes priority encoder produce signal p indicating user trying make purchase",
        "the input fsm reset button r, four buttons b_f, b_x, b_g, b_c fsm produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs",
        "the output fsm position farmer, fox, goose, corn output either left bank right bank river game also two indicators: w reaching winning state, l reaching losing state",
        "the state represented fxgc, f position farmer, x position fox, g position goose, c position corn game five buttons: reset, cross alone, cross fox, cross goose, cross corn game stops player wins loses",
        "the next state fxgc=0101 farmer bank fox, corn, b_x b_c buttons ignored, leading next-state table right notice b_g accepted even b_c pressed farmer bank corn",
        "the player wins game getting four entities (farmer, fox, goose, corn) right bank river player makes mistake, game lose",
        "the player loses game able correctly answer question player gets question wrong, start game beginning",
        "the input fsm 3-bit register 6-bit timer timer used count produce output z=1 reaches 0 register used store state fsm",
        "the output fsm sequence red, yellow, green lights alternate two roads duration state determined signal f f 0, timer set state changes f 1, timer set state changes light one roads green",
        "the priority encoder used determine item user wants purchase, generate signal indicating user trying make purchase output priority encoder used select value one price registers, subtracted current number nickels stored register purchase successful, price subtracted number nickels item released",
        "the player loses game able get correct answer question player gets correct answer, win game",
        "when player loses, output fsm looks like red roads controller must ensure lights one roads red times",
        "the fsm handles multiple input events single clock cycle first storing input events queue fsm ready process input event, dequeues event queue processes it",
        "the outputs fsm states stoplights stoplights either red, green, yellow fsm controls duration light",
        "the purpose fsm control stoplights busy intersection fsm ensures lights one roads red times, road green light, controller show yellow light showing red light",
        "the signal f 1 timer reaches 0 state changes",
        "the fsm ensures lights one roads red times keeping track state light light green, turn yellow red light red, stay red",
        "the fsm shows yellow light showing red light setting timer specific value state fsm changes value set signal f, calculated bottom fsm logic diagram",
        "the fsm alternates green lights two roads setting timer different value state fsm changes causes lights change color cycle-by-cycle basis, green light alternating two roads",
        "the signal f used set timer certain conditions particular, used set timer state changes",
        "the stoplight controller 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the stoplight controller ensures lights one roads red times using state machine six states states determined inputs fsm, states two roads output fsm controls lights two roads controller alternates green red lights two roads",
        "the stoplight controller alternates green lights two roads changing value register s value changed timer reaches 0, timer set enters new state duration state determined value register s",
        "the signal f allows timer set conditions, addition state changes allows flexibility duration state",
        "mapping bits gates means design circuit performs operation single bit passes necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "the control structure code maps high-level fsm design breaking program simple steps mapping step state fsm number states fsm depend number steps program",
        "the general model computer system execute set instructions, called program, store resulting data system set registers hold data instructions, set memory locations store data programs system also set input output devices allow interact outside world",
        "the purpose process find best formulation specific logic function given metric done using heuristic approaches find solutions strike balance various metrics cost, power, performance",
        "the two approaches fsm design state-transition table state diagram state-transition table lists possible states system in, state diagram shows sequence states system goes through state-transition table compact easier use comparing functions, state diagram intuitive easier understand",
        "the purpose notes introduce important abstraction logic design, use abstraction design ripple-carry adder ripple-carry adder adder adds single bit passes necessary information another copy itself design less efficient designs optimized specific purpose, simplicity approach makes tradeoff interesting one",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "a finite state machine model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called transition rule",
        "a computer machine programmed carry set arithmetic logical operations automatically fsm model behavior composed finite set states, transitions states, actions",
        "one way transform code written high-level language fsm use compiler compiler program translates code written high-level language code run computer another way transform code written high-level language fsm use interpreter interpreter program executes code written high-level language",
        "the control structure code maps high-level fsm design breaking program simple steps, one step flow chart may sometimes require one state fsm similarly, one fsm state may able implement several steps flow chart, steps performed simultaneously",
        "one design fsm executes simple pieces flow chart breaking program smaller steps mapping step state fsm one also use registers counters implement variables program, use comparator implement test statement",
        "the general model computer turing machine mathematical model computer used simulate computer",
        "one way build fsm allows pieces executed specified fsm built use state machine output routed different inputs allows fsm configured execute different pieces code based input another way build fsm allows pieces executed specified fsm built use state machine multiple states executed parallel allows fsm configured execute different pieces code parallel based input",
        "the problem code trying solve halting problem halting problem problem cannot solved turing machine problem given turing machine input turing machine, possible determine whether machine finish computing finite number steps",
        "what difference sop pos sop pos two forms two-level logic sop, output true inputs true pos, output true inputs true",
        "the array notation code means code trying convert input user appropriate result, store result memory address given next argument",
        "1 difference two-level three-level logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic three-level logic way expressing logic functions using three levels three levels refer number functions input passes reach output, sop pos forms examples three-level logic",
        "the idx variable used keep track number operations logic expression metric used estimate number transistors needed design, turn estimate area required design",
        "the min variable heuristic metric used estimate time needed compute function metric based longest chain operations performed instance variable rationale metric gate outputs change instantaneously inputs change",
        "the flow chart represents steps taken designing new product first step think carefully metrics possible interest second step get rid many metrics possible third step identify metrics practical impact current technology fourth step set threshold values metrics simplify reasoning them fifth step eliminate redundant metrics sixth step calculate linear sums reduce count metrics seventh step make use notion pareto optimality",
        "what reason popularity two-level logic the popularity two-level logic due fact simple way express logic functions additionally, two-level logic easy map cmos gates",
        "there three variables used code, x, y, z value x initialized 42, value initialized x value z initialized"
    ],
    "55": [
        "the next-state logic equations functions describe relationship current state system next state system functions represented either sop pos form demorgan's law used simplify functions replacing or gates nand gates, and gates nor gates",
        "the similarity equations s_1^+s_0^+ equations {2-to-1} mux used represent logic function two-level logic popular way expressing logic functions simple map expression cmos gates using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate",
        "the design easy test two-level logic design means inputs outputs easily tested nand nor gate additionally, design easy test sop expression means inputs outputs easily tested or gate",
        "passage - compact approaches comparing functions, solutions subject later class (such ece 462) {two-level logic} { two-level logic} popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams begin one demorgan's laws, illustrate algebraically graphically: c = b+a = {file=part2/figs/demorgan-nandeps,width=095in} let's say function expressed sop form, z=abc+de+fghj diagram left shows function constructed three and gates or gate using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate invert point along wire, slide bubble wire output first column",
        "abstraction process simplifying complex system identifying important aspects system ignoring rest context implementation, abstraction used simplify design identifying important features design ignoring rest make design manageable easier understand",
        "the initial state three flip-flops implementation 0s 1s use init input choose normal operation (init=0) fsm forcing fsm next state given i_2i_1i_0 (when init=1)",
        "there two control buttons: one east-west road one north-south road",
        "abstraction powerful tool help simplify complex problems selecting state representation, abstraction help identify important aspects problem ignore irrelevant details make easier find solution effective efficient",
        "abstraction selecting state representation lead better design allowing engineer focus important aspects problem ignoring details important help simplify problem make easier find solution",
        "the next state fxgc=0101 farmer bank fox, corn, b_x b_c buttons ignored, leading next-state table right notice b_g accepted even b_c pressed farmer bank corn",
        "the design process digital fsm includes six steps: developing abstract model, specifying i/o behavior, completing specification, choosing state representation, calculating logic expressions, implementing flip-flops gates",
        "the first examples passage two-level logic, demorgan's law, sop form two-level logic popular way expressing logic functions, demorgan's law way simplify expressions sop form way representing logic function",
        "a multiplexer digital logic block allows one digital signal select several others forwarded output simplest form multiplexer 2-to-1 multiplexer, two inputs left one top top input allows us choose left inputs forwarded output",
        "the design process digital fsm typically consists six steps: (1) developing abstract model, (2) specifying i/o behavior, (3) completing specification, (4) choosing state representation, (5) calculating logic expressions, (6) implementing flip-flops gates",
        "the design process involves manipulation logic expressions order optimize specific metrics, cost, power, performance today, manipulation performed almost entirely computers, human engineers supplying logic functions interest imposing constraints process",
        "a fsm implemented digital system, states represented patterns using fixed number bits, inputs translated bits, outputs translated bits transition rules must complete, meaning given state fsm pattern input bits, transition must defined state another state outputs digital fsm calculated using boolean logic expressions",
        "a gray code counter device used count number operations logic expression device works counting number variables expression adding number operations device used optimize logic expressions reducing number operations needed implement logic function",
        "the implementation gray code counter developed first filling k-maps next-state values, deriving algebraic expressions next-state logic used develop implementation",
        "there benefits using gray code counter first, easy design implement second, easy check correctness logic third, easy read understand logic",
        "a gray code counter designed first creating transition diagram shows states outputs counter next, next-state logic developed creating k-maps next-state values deriving algebraic expressions finally, next-state logic implemented diagram",
        "the internal state value third bit gray code counter s_2s_1s_0=001 hold=1, next-state logic s_1^+ s_0^+ reduces s_1^+=s_1 s_0^+=s_0; words, counter stops counting simply stays current state hold=0, equations become s_1^+=s_0 s_0^+={{s_1}}, produces repeating sequence s_1s_0 00, 01, 11, 10, desired",
        "the next-state logic three-bit gray code counter follows: s_2^+ = s_2 + s_0 s_1^+ = s_2 s_0^+ = s_2 s_1",
        "the implementation diagram three-bit gray code counter logic diagram shows inputs, outputs, next-state logic counter diagram ordered left right {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2, makes easy read check correctness",
        "the vertical lines carrying current state values inverses back next state logic inputs ordered left right (on left side figure) {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2",
        "adding third bit gray code counter increases design complexity requires additional carry bit carry bit must propagated adder bit slice logic, increases number logic gates required overall complexity design",
        "it important reasonable order designing logic diagram help simplify design process make easier understand function logic diagram additionally, help ensure logic diagram compatible products may used system",
        "the purpose vertical lines carrying current state values inverses back next state logic inputs ensure state fsm always consistent necessary safety reasons, fsm must always ensure lights one roads red times",
        "from passage, inferred logical completeness necessarily help efficient design logic functions words, single boolean logic function expressed many different ways therefore, important engineers learn develop efficient implementation function, well determine whether two logic expressions identical without actually writing truth tables",
        "the next-state values s_2, s_1, s_0 given table right states act like counter, examining connections, derive equations next state draw transition diagram six states loop defined next-state logic, two remaining states converging loop single cycle",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills students learn coming months",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways, learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills start learn coming months",
        "the purpose adding and gates input create logic function efficient terms area power done reducing number variables expression",
        "the initial state three flip-flops implementation 0 state explicit mechanism initialization forces flip-flop 0 state alternatively, could add extra logic design would allow us force fsm specific state next cycle",
        "the initial state three flip-flops unknown unless explicit mechanism initialization initialization work two ways first approach makes use flip-flop design know, flip-flop built pair latches, make use internal reset lines latches force flip-flop 0 state (or 1 state) using additional input alternatively, add extra logic design",
        "an abstract model simplified representation system, typically used aid understanding system context logic optimization, abstract model used help understand tradeoffs different logic expressions",
        "an fsm finite state machine, mathematical model computation used design computer programs digital logic circuits abstract machine one finite number states",
        "there several benefits using fsm one benefit fsm used implement wide range logic functions another benefit fsm used construct larger memories multiple smaller memories finally, fsm used reduce number pins needed chip",
        "if use gray code, would compare two expressions determine whether represent logic function would test logical equivalence, important part hardware design however, tools today provide help problem, necessary use gray code",
        "if \"halt\" button pressed (hg=10), logic outputs c_l=00 c_m=00, dispenser gives ice cream buttons pressed (hg=11), outputs c_l=11 c_m=11, dispenser gives two servings flavor, four servings total",
        "one reason important start representation makes sense human humans must supply logic functions interest, must program acceptable transformations equivalent forms second reason complexity problem good way introduce real engineering finally, contextual information help develop better understanding finite state machines higher-level abstractions form core digital systems still defined directly humans today",
        "the next-state logic s_1^+ s_0^+ hold=0 follows: s_1^+ = s_0 + hold s_0^+ = s_1 + hold",
        "the hold variable simplifies design allowing designer separate logic deciding whether advance counter fairly cleanly logic advancing counter itself hold bit diagram used determine whether counter advance current cycle",
        "the use s_2 separates logic deciding whether advance counter allowing counter halted state (s_2=1) counting state (s_2=0) hold=1, counter retains state, hold=0, counts",
        "f two effects operation fsm first, prevents timer reset enters new state effect lengthening duration state second, prevents fsm entering loop defined next-state logic effect halting fsm current state",
        "a good state representation important help reduce number logic gates needed design, thus save chip area additionally, good state representation help improve performance design reducing number logic operations needed",
        "one way improve bad state representation make compact done using two-level logic instead three-level logic another way improve bad state representation make readable done using clear consistent naming conventions",
        "a good state representation important help reduce number transistors needed design, thus save space energy additionally, help improve performance design making easier computer manipulate logic expressions",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context",
        "one build static rams using logic using tri-state buffers tri-state buffers used create larger memories using multiple chips wider memories also created using multiple chips",
        "tri-state buffers used provide logical disconnection tri-state buffer output logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "one build memories using logic creating tri-state buffer logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "a tri-state buffer type digital logic device used either connect disconnect signal line power source ground achieved using two transistors, one connect signal line power source, connect signal line ground buffer enabled, transistors turned on, signal line connected either power source ground, depending value input signal buffer disabled, transistors turned off, effectively disconnecting signal line power source ground",
        "one builds memories (static rams) using logic connecting dual-inverter loop opposing bit lines transistors controlled select line select high, transistors connect inverter loop bit lines writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "a tri-state buffer logic circuit used disconnect output logic circuit achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context element memory assigned unique name, called address, allows external circuit identify particular element interest addresses unlike street addresses use send letter unlike street addresses, however, memory addresses usually little redundancy; possible combination bits address identifies distinct set bits memory",
        "non-volatile memories include magnetic optical storage media dvds, cd-roms, disks, tapes, capacitive storage media flash drives, programmable logic devices",
        "data elements computer memory stored either static random access memory (sram) dynamic random access memory (dram) sram uses active logic form two-inverter loop maintain stored values, dram uses charged capacitor store bit",
        "sram cells combined bit slice sharing bit lines analog read write logic bit slice figure thought 16-address, 1-bit-addressable memory (2^4b) cells bit slice share bit lines analog read write logic, appears right figure",
        "sram cells store data using dual-inverter loop writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "a write operation sram cell performed charging charging capacitor capacitor attached bit line transistor controlled select line select low, capacitor isolated holds charge however, select high write operation, logic driving bit line forces charge onto capacitor removes charge it",
        "sram cells combined bit slice sharing bit lines analog read write logic decoder sets one cell's select line high enable read write operation cell chip select input cs drives enable input decoder, none memory cells active chip select low (cs=0), exactly one memory cells active chip select high (cs=1)",
        "the main benefit using tri-state buffer allows logical disconnection buffer output means multiple memories share output line without need additional multiplexers",
        "a tri-state buffer achieves logical disconnection using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "a tri-state buffer type digital logic circuit used either connect disconnect signal line power supply ground done using two transistors, one connect signal line power supply, connect signal line ground buffer enabled, transistors turned on, signal line connected either power supply ground, depending value input signal buffer disabled, transistors turned off, signal line effectively disconnected power supply ground",
        "the benefit using tri-state buffer allows logical disconnection tri-state buffer output means output shared one memory without need additional multiplexers useful creating larger memories combining multiple chips",
        "a tri-state buffer used create electrical connection tri-state buffer output logical disconnection achieved using outer transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "a dram cell refreshed reading contents writing back active logic process necessary avoid data loss due charge leakage capacitor",
        "the lab simulates two-level logic used map expression cmos gates also shows graphically manipulate expressions understand gate diagrams",
        "this synchronous fsm implemented digital logic fsm finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs",
        "the second optical sensor used detect chip finishes work chip turn save energy metric used guide process optimizing logic expressions balance struck different metrics involved",
        "the device uses sensors generate clock signal alternating 0 1 regular period clock 0, one set latches holds bit values fixed, combinational logic uses latches inputs produce bits copied second set latches clock 1, second set latches stops storing data inputs retains bit values order drive combinational logic, results copied third set latches",
        "the state table represents six states loop defined next-state logic, two remaining states converging loop single cycle lights red states, necessary safety",
        "the final state table state transition diagram appear follows: the final state table lists six states loop defined next-state logic, two remaining states converging loop single cycle table also includes states outside desired loop lights red states, necessary safety the state transition diagram shows six states loop defined next-state logic, two remaining states converging loop single cycle diagram also shows duration state",
        "the outputs needed observe state check output logic values state register timer outputs used determine duration state order states occur",
        "it difficult test sequential logic difficult predict behavior system sequential logic difficult test difficult determine whether system halt finite number steps not",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "a decoder logic circuit converts binary code corresponding decimal code decoders used variety applications, including data storage transmission, error detection correction, address decoding",
        "the game revolves around old logic problem farmer must cross river order reach market farmer traveling market sell fox, goose, corn farmer boat, boat large enough carry fox, goose, corn time fox cannot left alone goose, fox eat goose goose cannot left alone corn, goose eat corn farmer get three items market",
        "one could design game controller logic puzzle would buttons corresponding different operations could performed logic puzzle example, could button add new element puzzle, button remove element puzzle, button change value element puzzle game controller could also display would show current state puzzle player's progress",
        "why two-level logic popular two-level logic popular simple map expressions cmos gates additionally, easy understand gate diagrams",
        "a decoder type logic circuit takes input signal produces one output possible value signal decoder similar multiplexer number inputs outputs however, decoder one input signal, multiplexer multiple input signals",
        "a decoder logic circuit converts binary code set signals used operate device decoder takes input signal, typically one coded binary number, produces one output possible value signal decoder enabled (en=1), and gates produces one minterm input signal s decoder enabled (en=0), decoder produces 0 bits",
        "a decoder logic circuit converts coded inputs coded outputs, usually one output code input code decoders used variety applications, including data storage transmission, error detection correction, data compression",
        "a decoder logic device converts binary information form one code another, usually natural binary code multiplexer device selects one several analog digital input signals forwards selected input single output line",
        "a decoder logic circuit converts signals one form another binary form, decoder used convert binary number decimal number",
        "a mux logic block allows us use one digital signal select several others forwarded output decoder logic block converts binary code set signals",
        "a decoder used context simplify expression logic function using decoder, function expressed two-level logic function, easier understand manipulate",
        "what significance demorgan's law demorgan's law popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "what difference two-level logic forms logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "what reason popularity two-level logic the reason popularity two-level logic simple way express logic functions two-level logic popular way expressing logic functions simple way express logic functions",
        "what difference sop pos sop form two-level logic, pos form multi-level logic sop popular simpler manipulate expressions algebraically graphically",
        "passage - two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams question - what two levels two-level logic",
        "the fsm shows yellow light showing red light setting timer specific value state fsm changes value set signal f, calculated bottom fsm logic diagram",
        "the purpose process find best formulation specific logic function given metric done using heuristic approaches find solutions strike balance various metrics cost, power, performance",
        "the purpose notes introduce important abstraction logic design, use abstraction design ripple-carry adder ripple-carry adder adder adds single bit passes necessary information another copy itself design less efficient designs optimized specific purpose, simplicity approach makes tradeoff interesting one",
        "a computer machine programmed carry set arithmetic logical operations automatically fsm model behavior composed finite set states, transitions states, actions",
        "what difference sop pos sop pos two forms two-level logic sop, output true inputs true pos, output true inputs true",
        "1 difference two-level three-level logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic three-level logic way expressing logic functions using three levels three levels refer number functions input passes reach output, sop pos forms examples three-level logic",
        "the idx variable used keep track number operations logic expression metric used estimate number transistors needed design, turn estimate area required design",
        "what reason popularity two-level logic the popularity two-level logic due fact simple way express logic functions additionally, two-level logic easy map cmos gates",
        "the choice state representation affects implementation fsm terms number gates inverters required, well delay overall design serial comparator design based 2-bit slice variant, example, requires 24 gates 10 inverters, much larger earlier serial design terms gate delays, however, new design identical, meaning comparisons finished half time realistic area timing metrics show slightly difference two designs differences dominate results design carefully considered",
        "one way reduce design complexity make use common algebraic terms sub-expressions help simplify design make easier understand another way reduce complexity use demorgan's laws simplify expression help reduce number gates needed make design efficient",
        "the passage discusses design serial comparator using bit-sliced approach approach leads design 24 gates 10 inverters, much larger earlier serial design however, new design identical terms gate delays, meaning comparison finished half time",
        "mapping bits gates means design circuit performs operation single bit passes necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size"
    ],
    "56": [
        "the choice state representation affects implementation fsm terms number gates inverters required, well delay overall design serial comparator design based 2-bit slice variant, example, requires 24 gates 10 inverters, much larger earlier serial design terms gate delays, however, new design identical, meaning comparisons finished half time realistic area timing metrics show slightly difference two designs differences dominate results design carefully considered",
        "the main difference sram dram sram faster uses transistors, dram slower uses fewer transistors dram also denser sram, meaning bits stored given area",
        "what difference sop pos sop (sum products) boolean algebra expression or anded terms, pos (product sums) expression and ored terms",
        "the main difference mux decoder mux multiple inputs one output, decoder one input multiple outputs mux used select one several input signals send output, decoder used interpret input signal produce several output signals",
        "what difference two-level logic forms logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "what difference sop pos sop form two-level logic, pos form multi-level logic sop popular simpler manipulate expressions algebraically graphically",
        "what difference sop pos sop pos two forms two-level logic sop, output true inputs true pos, output true inputs true",
        "1 difference two-level three-level logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic three-level logic way expressing logic functions using three levels three levels refer number functions input passes reach output, sop pos forms examples three-level logic",
        "different state representations lead different fsm designs example, states represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits fsm implemented digital system, states must represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits"
    ],
    "57": [
        "the design process digital fsm includes six steps: developing abstract model, specifying i/o behavior, completing specification, choosing state representation, calculating logic expressions, implementing flip-flops gates",
        "the choice representation fsm's internal state affects complexity implementation terms number states, number inputs, number outputs, number transition rules",
        "the design process digital fsm typically consists six steps: (1) developing abstract model, (2) specifying i/o behavior, (3) completing specification, (4) choosing state representation, (5) calculating logic expressions, (6) implementing flip-flops gates",
        "the design process counter number states power two choose representation states makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "the choice representation fsm's internal state affects complexity implementation states represented bit patterns, transition rules must complete states represented abstract states, outputs state must specified",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "the choice state representation affects implementation fsm terms number gates inverters required, well delay overall design serial comparator design based 2-bit slice variant, example, requires 24 gates 10 inverters, much larger earlier serial design terms gate delays, however, new design identical, meaning comparisons finished half time realistic area timing metrics show slightly difference two designs differences dominate results design carefully considered",
        "a karnaugh map graphical representation boolean function helps simplify function map consists grid squares, corresponds possible combination input values map used find groups product terms implicants function",
        "the desired pattern one represents number 2's complement representation 2's complement representation defined choosing set integers balanced around zero groups so, want represent number 2's complement representation, need choose pattern represents number representation",
        "an abstract model simplified representation system, typically used aid understanding system context logic optimization, abstract model used help understand tradeoffs different logic expressions",
        "the design counter includes eight states, three state bits used keep track current state choice representation fsm's states dramatically affect design complexity right strategy thus often start selecting representation makes sense human, even requires bits strictly necessary",
        "the design continues choosing state representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "the choice representation fsm's states affect design complexity determines many bits needed represent state bits needed represent state, design complex",
        "the right strategy choosing representation start selecting representation makes sense human, even requires bits strictly necessary make design process simpler efficient long run",
        "the choice state representation affects design complexity ways first, affect number bits needed represent states second, affect number possible states represented third, affect number transitions need considered designing state machine",
        "the right strategy start selecting representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "one reason often best start selecting representation makes sense human easier understand work with additionally, starting representation makes sense human help ensure final product also easy understand use",
        "abstraction powerful tool help simplify complex problems selecting state representation, abstraction help identify important aspects problem ignore irrelevant details make easier find solution effective efficient",
        "abstraction selecting state representation lead better design allowing engineer focus important aspects problem ignoring details important help simplify problem make easier find solution",
        "abstraction important selecting state representation allows designer select representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "different state representations lead different fsm designs example, states represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits fsm implemented digital system, states must represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits",
        "one reason important start representation makes sense human humans must supply logic functions interest, must program acceptable transformations equivalent forms second reason complexity problem good way introduce real engineering finally, contextual information help develop better understanding finite state machines higher-level abstractions form core digital systems still defined directly humans today",
        "abstraction selecting representation impact design metrics reducing number metrics need considered simplify process designing solution make easier find optimal solution",
        "the state representation used determine next state fsm done examining inputs fsm deriving equations next state states fsm act like counter, examining connections, next state determined",
        "there several benefits good state representation first, help reduce number pins needed chip second, improve density memory chip third, improve speed memory chip",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor performance cases, bad state representation also lead increased costs fabrication testing",
        "a good state representation easy understand able capture relevant information problem bad state representation may difficult understand may able capture relevant information",
        "the state representation significant impact overall design system affects way system behaves interacts environment well-chosen state representation simplify design system make efficient",
        "a good state representation important help reduce number logic gates needed design, thus save chip area additionally, good state representation help improve performance design reducing number logic operations needed",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor power consumption cases, two metrics may strongly correlated, meaning design good one metrics frequently also good metric",
        "one way improve bad state representation make compact done using two-level logic instead three-level logic another way improve bad state representation make readable done using clear consistent naming conventions",
        "the state representation impacts fsm determining duration state timer set whenever state changes, duration state determined muxes bottom mux selects s_2=0, selects output top mux s_2=1 top mux selects b s_0=1, selects c s_0=0",
        "a bad state representation lead number problems, including wasted engineering effort, poor performance, even product cancellations",
        "a bad state representation fixed using code larger hamming distance enable system detect correct errors",
        "there best state representation fsm important factor representation complete, meaning states represented inputs accounted for considerations include size state space number inputs outputs",
        "a good state representation important help reduce number transistors needed design, thus save space energy additionally, help improve performance design making easier computer manipulate logic expressions",
        "the 'quarter' state refers fact addition unit 4-bit examples closed addition means value n, easily find two 4-bit unsigned numbers that, added together, cannot represented 4-bit unsigned number n=4, example, add 12 (1100) 6 (0110) obtain 18 since 18 outside range [0,2^4-1] representable using 4-bit unsigned representation, representation breaks try represent sum using representation",
        "the state representation lab fsm 3-bit binary number, following meaning: s_2: type last coin inserted (0 dime, 1 quarter) s_1: one quarter inserted (1 yes, 0 no) s_0: one dime inserted (1 yes, 0 no)",
        "the numeric representation money held used track value money inserted machine allows machine keep track much money inserted reject coins value high"
    ],
    "58": [
        "the choice state representation affects implementation fsm terms number gates inverters required, well delay overall design serial comparator design based 2-bit slice variant, example, requires 24 gates 10 inverters, much larger earlier serial design terms gate delays, however, new design identical, meaning comparisons finished half time realistic area timing metrics show slightly difference two designs differences dominate results design carefully considered",
        "the main difference sram dram sram faster uses transistors, dram slower uses fewer transistors dram also denser sram, meaning bits stored given area",
        "what difference sop pos sop (sum products) boolean algebra expression or anded terms, pos (product sums) expression and ored terms",
        "the main difference mux decoder mux multiple inputs one output, decoder one input multiple outputs mux used select one several input signals send output, decoder used interpret input signal produce several output signals",
        "what difference two-level logic forms logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "what difference sop pos sop form two-level logic, pos form multi-level logic sop popular simpler manipulate expressions algebraically graphically",
        "what difference sop pos sop pos two forms two-level logic sop, output true inputs true pos, output true inputs true",
        "1 difference two-level three-level logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic three-level logic way expressing logic functions using three levels three levels refer number functions input passes reach output, sop pos forms examples three-level logic",
        "the inputs gray code counter current state counter clock signal clock signal triggers state change counter",
        "a gray code counter type digital counter used count number clock pulses named frank gray, invented code 1953 main advantage gray code counter types counters less likely produce errors counting",
        "a gray code counter type digital counter uses gray code generate output input gray code counter digital signal represents number clock pulses applied counter output gray code counter digital signal represents number clock pulses applied counter, plus one",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "if rise fall rising clock edge, processor would able recognize interrupts instructions would cause program terminate unexpectedly",
        "there two optical sensors positioned different heights device first sensor positioned high enough slope dime passes beneath sensor, allowing signal produced sensor tell us whether coin dime quarter second sensor positioned coins pass front it signal second sensor used clock fsm",
        "the device uses two optical sensors differentiate dime quarter first sensor positioned dime passes beneath it, second sensor positioned coins pass front it rising edge clock signal second sensor occurs, signal first sensor indicates whether coin dime quarter",
        "the device uses sensors generate clock signal alternating 0 1 regular period clock 0, one set latches holds bit values fixed, combinational logic uses latches inputs produce bits copied second set latches clock 1, second set latches stops storing data inputs retains bit values order drive combinational logic, results copied third set latches",
        "the fsm uses signal determine whether accept reject coin checking rising edge signal second sensor rising edge occurs, signal first sensor indicates whether coin quarter (t=1) dime (t=0) sample timing diagram lab appears right clock signal generated lab square wave---in words, high low portions equal---but also unlikely periodic instead, ``cycle'' defined time coin insertions",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "the fsm five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs class, focus clocked synchronous fsm implementations, fsm's internal state bits stored flip-flops",
        "the vending machine uses sensors detect coin inserted first sensor positioned dime pass beneath it, second sensor positioned coins pass front it signal second sensor used clock fsm, signal first sensor indicates whether coin dime quarter",
        "the fsm handles multiple input events single clock cycle first storing input events queue fsm ready process input event, dequeues event queue processes it",
        "the fourth step design process choose particular design set possible designs making choice, engineers typically consider variety factors, including cost, performance, manufacturability, reliability",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "the fourth step design process choose particular design set possible designs choice made based number factors, including objectives design, constraints problem, preferences designer",
        "the passage states power consumption important metric engineers must take account designs however, cases, desktop high-end server processors, metrics (such performance) may important always want operate edge interesting range could going wrong, engineers taking power consumption account much be",
        "different state representations lead different fsm designs example, states represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits fsm implemented digital system, states must represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits",
        "the common types memory used digital systems sram dram sram used high-speed applications processor caches embedded designs dram used applications less demanding speed requirements",
        "the two common types memory used digital systems static random access memory (sram) dynamic random access memory (dram) sram used high-speed applications processor caches embedded designs, dram used applications less demanding speed requirements, main memory computers",
        "random access memories (rams) memories support two operations: writing data element, reading data element memories also volatile, means data held memory erased electrical power turned fails static random access memory (sram) used high-speed applications processor caches embedded designs",
        "static random access memory used high-speed applications processor caches embedded designs sram bit density significantly lower dram bit density, applications less demanding speed requirements use dram",
        "scan-based testing type testing used test functionality design type testing typically used test digital designs",
        "the purpose notes introduce important abstraction logic design, use abstraction design ripple-carry adder ripple-carry adder adder adds single bit passes necessary information another copy itself design less efficient designs optimized specific purpose, simplicity approach makes tradeoff interesting one"
    ],
    "59": [
        "a bad state representation fixed using code larger hamming distance enable system detect correct errors",
        "a priority encoder type encoder generates signal whenever input lines active, encodes index highest active input two-bit unsigned number priority encoder used determine input lines highest priority",
        "The Hamming codes are codes used in Hamming",
        "Hamming codes are used because of their ability",
        "People use Hamming codes because of its versatility"
    ],
    "60": [
        "a bad state representation fixed using code larger hamming distance enable system detect correct errors",
        "The hamming distance is the distance between two things",
        "The Hamming distance detects the length between two points",
        "The Hamming distance is the distance between two points",
        "The Hamming distance is a distance"
    ],
    "61": [
        "one build static rams using logic using tri-state buffers tri-state buffers used create larger memories using multiple chips wider memories also created using multiple chips",
        "tri-state buffers used provide logical disconnection tri-state buffer output logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "one build memories using logic creating tri-state buffer logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "a tri-state buffer type digital logic device used either connect disconnect signal line power source ground achieved using two transistors, one connect signal line power source, connect signal line ground buffer enabled, transistors turned on, signal line connected either power source ground, depending value input signal buffer disabled, transistors turned off, effectively disconnecting signal line power source ground",
        "a tri-state buffer logic circuit used disconnect output logic circuit achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "the main benefit using tri-state buffer allows logical disconnection buffer output means multiple memories share output line without need additional multiplexers",
        "a tri-state buffer achieves logical disconnection using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "tri-state buffers used reduce number pins needed chips combining inputs outputs allowed chip designers halve number pins needed",
        "a tri-state buffer type digital logic circuit used either connect disconnect signal line power supply ground done using two transistors, one connect signal line power supply, connect signal line ground buffer enabled, transistors turned on, signal line connected either power supply ground, depending value input signal buffer disabled, transistors turned off, signal line effectively disconnected power supply ground",
        "a tri-state buffer digital circuit used either connect disconnect output signal line buffer three states: high, low, high impedance buffer high state, output connected signal line copies signal input buffer low state, output disconnected signal line buffer high impedance state, output effectively disconnected signal line",
        "the benefit using tri-state buffer allows logical disconnection tri-state buffer output means output shared one memory without need additional multiplexers useful creating larger memories combining multiple chips",
        "tri-state buffers used construct larger memories using multiple chips connecting external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used construct wider memories connecting data inputs outputs multiple memories together allows output line shared one memory without need additional multiplexers",
        "a tri-state buffer digital circuit used either connect disconnect signal circuit buffer three states: high, low, high impedance high impedance state effectively disconnects signal circuit allows multiple memories share output line without need additional multiplexers",
        "a tri-state buffer used create electrical connection tri-state buffer output logical disconnection achieved using outer transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "tri-state buffers used reduce number pins needed chip combining inputs outputs example, data inputs outputs memory combined single set data wires, bidirectional signals reduces number pins needed still allowing amount data transferred",
        "a row natural basis refresh cycle dram data pins provide bidirectional signals reading writing elements dram output enable input, oe, controls tri-state buffers dram determine whether dram drives data pins we input, controls type operation, also present"
    ],
    "62": [
        "the timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle states thus act like counter",
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the outputs needed observe state check output logic values state register timer outputs used determine duration state order states occur",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "the fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the state fsm split two pieces: 3-bit register 6-bit timer timer simply binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the transitions states well-defined fsm timer counts produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the output fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the value register price1 price first item machine, determined owner machine",
        "the value register price2 number nickels machine multiplied price item question way, machine keep track much money inserted much owed item",
        "the value register price3 price third item machine, determined owner machine",
        "the value register n corresponds number nickels inserted machine user inserts quarter, machine transition state n+5, indicating 5 nickels inserted user attempts purchase item without inserting enough money first, machine remain state reject request",
        "the value register equivalence class sum two 4-bit numbers case, sum 18, equivalent 2 (mod 16)",
        "the register price1 six bits allows machine keep track 315 (63 nickels)",
        "the value register price2 number nickels inserted machine",
        "the vending machine releases item using decoder generate three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the input fsm 3-bit register 6-bit timer timer used count produce output z=1 reaches 0 register used store state fsm",
        "the priority encoder used determine item user wants purchase, generate signal indicating user trying make purchase output priority encoder used select value one price registers, subtracted current number nickels stored register purchase successful, price subtracted number nickels item released",
        "the state fsm split two pieces: {3-bit} register {6-bit} timer timer simply binary counter counts downward produces output z=1 reaches 0 notice register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle we thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the stoplight controller 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the stoplight controller alternates green lights two roads changing value register s value changed timer reaches 0, timer set enters new state duration state determined value register s",
        "the general model computer system execute set instructions, called program, store resulting data system set registers hold data instructions, set memory locations store data programs system also set input output devices allow interact outside world",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "one design fsm executes simple pieces flow chart breaking program smaller steps mapping step state fsm one also use registers counters implement variables program, use comparator implement test statement"
    ],
    "63": [
        "the initial state three flip-flops unknown unless explicit mechanism initialization initialization work two ways first approach makes use flip-flop design know, flip-flop built pair latches, make use internal reset lines latches force flip-flop 0 state (or 1 state) using additional input alternatively, add extra logic design",
        "one way make use internal reset lines latches force flip-flop 0 state done connecting reset lines latches 0 voltage source",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the device uses sensors generate clock signal alternating 0 1 regular period clock 0, one set latches holds bit values fixed, combinational logic uses latches inputs produce bits copied second set latches clock 1, second set latches stops storing data inputs retains bit values order drive combinational logic, results copied third set latches",
        "the vending machine releases item using decoder generate three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle"
    ],
    "64": [
        "the inputs gray code counter current state counter clock signal clock signal triggers state change counter",
        "a gray code counter type digital counter used count number clock pulses named frank gray, invented code 1953 main advantage gray code counter types counters less likely produce errors counting",
        "a gray code counter type digital counter uses gray code generate output input gray code counter digital signal represents number clock pulses applied counter output gray code counter digital signal represents number clock pulses applied counter, plus one",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "if rise fall rising clock edge, processor would able recognize interrupts instructions would cause program terminate unexpectedly",
        "there two optical sensors positioned different heights device first sensor positioned high enough slope dime passes beneath sensor, allowing signal produced sensor tell us whether coin dime quarter second sensor positioned coins pass front it signal second sensor used clock fsm",
        "the device uses two optical sensors differentiate dime quarter first sensor positioned dime passes beneath it, second sensor positioned coins pass front it rising edge clock signal second sensor occurs, signal first sensor indicates whether coin dime quarter",
        "the device uses sensors generate clock signal alternating 0 1 regular period clock 0, one set latches holds bit values fixed, combinational logic uses latches inputs produce bits copied second set latches clock 1, second set latches stops storing data inputs retains bit values order drive combinational logic, results copied third set latches",
        "the fsm uses signal determine whether accept reject coin checking rising edge signal second sensor rising edge occurs, signal first sensor indicates whether coin quarter (t=1) dime (t=0) sample timing diagram lab appears right clock signal generated lab square wave---in words, high low portions equal---but also unlikely periodic instead, ``cycle'' defined time coin insertions",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "the fsm five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs class, focus clocked synchronous fsm implementations, fsm's internal state bits stored flip-flops",
        "the vending machine uses sensors detect coin inserted first sensor positioned dime pass beneath it, second sensor positioned coins pass front it signal second sensor used clock fsm, signal first sensor indicates whether coin dime quarter",
        "the fsm handles multiple input events single clock cycle first storing input events queue fsm ready process input event, dequeues event queue processes it",
        "abstraction process simplifying complex system identifying important aspects system ignoring rest context implementation, abstraction used simplify design identifying important features design ignoring rest make design manageable easier understand",
        "abstraction powerful tool help simplify complex problems selecting state representation, abstraction help identify important aspects problem ignore irrelevant details make easier find solution effective efficient",
        "abstraction selecting state representation lead better design allowing engineer focus important aspects problem ignoring details important help simplify problem make easier find solution",
        "abstraction important selecting state representation allows designer select representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "one reason important start representation makes sense human humans must supply logic functions interest, must program acceptable transformations equivalent forms second reason complexity problem good way introduce real engineering finally, contextual information help develop better understanding finite state machines higher-level abstractions form core digital systems still defined directly humans today",
        "abstraction selecting representation impact design metrics reducing number metrics need considered simplify process designing solution make easier find optimal solution",
        "abstraction used build three-bit gray code counter two-bit design using copies bit-sliced adder circuit approach less efficient designing circuit specifically three-bit gray code counter, simpler",
        "the purpose notes introduce important abstraction logic design, use abstraction design ripple-carry adder ripple-carry adder adder adds single bit passes necessary information another copy itself design less efficient designs optimized specific purpose, simplicity approach makes tradeoff interesting one",
        "a multiplexer digital logic block allows one digital signal select several others forwarded output simplest form multiplexer 2-to-1 multiplexer, two inputs left one top top input allows us choose left inputs forwarded output",
        "a multiplexer device allows multiple signals routed onto single channel done selecting one several input signals connecting output multiplexers used variety applications, telecommunications computer networking",
        "the timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle states thus act like counter",
        "the states fsm act like counter, value fsm set whenever state changes timer set state changes, duration state determined value timer fsm also set conditions, signal f calculated",
        "tri-state buffers used provide logical disconnection tri-state buffer output logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "memory chips combined provide larger wider memories using multiple chips example, two 2-bit memories used implement 4-bit memory one address bits used drive decoder determines two chips active (cs=1) decoder enabled chip select signal larger memory, neither chip enabled external cs low, desired",
        "one build memories using logic creating tri-state buffer logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "a tri-state buffer type digital logic device used either connect disconnect signal line power source ground achieved using two transistors, one connect signal line power source, connect signal line ground buffer enabled, transistors turned on, signal line connected either power source ground, depending value input signal buffer disabled, transistors turned off, effectively disconnecting signal line power source ground",
        "a tri-state buffer logic circuit used disconnect output logic circuit achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "one way combine memory chips use create larger memory done using one address bit drive decoder determines two chips active address bits, well external data inputs write enable signal, delivered memories external data outputs also connected memories another way combine memory chips use create wider memory case, chips either active inactive time, external address, write enable, chip select inputs routed chips however, data inputs outputs separate, chip handling different part data",
        "to write data memory element, external circuit sends signal memory indicating address element written data written sent memory, memory stores data element specified address",
        "a tri-state buffer achieves logical disconnection using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "a tri-state buffer type digital logic circuit used either connect disconnect signal line power supply ground done using two transistors, one connect signal line power supply, connect signal line ground buffer enabled, transistors turned on, signal line connected either power supply ground, depending value input signal buffer disabled, transistors turned off, signal line effectively disconnected power supply ground",
        "a tri-state buffer digital circuit used either connect disconnect output signal line buffer three states: high, low, high impedance buffer high state, output connected signal line copies signal input buffer low state, output disconnected signal line buffer high impedance state, output effectively disconnected signal line",
        "a tri-state buffer digital circuit used either connect disconnect signal circuit buffer three states: high, low, high impedance high impedance state effectively disconnects signal circuit allows multiple memories share output line without need additional multiplexers",
        "a tri-state buffer used create electrical connection tri-state buffer output logical disconnection achieved using outer transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "tri-state buffers used reduce number pins needed chip combining inputs outputs example, data inputs outputs memory combined single set data wires, bidirectional signals reduces number pins needed still allowing amount data transferred",
        "one way construct larger memory use multiple chips one address bits drive decoder determines two chips active decoder enabled chip select signal larger memory way, neither chip enabled external cs low",
        "a sense amplifier circuit used read data stored memory cell sense amplifier amplifies small signal memory cell converts digital signal read processor",
        "a row natural basis refresh cycle dram data pins provide bidirectional signals reading writing elements dram output enable input, oe, controls tri-state buffers dram determine whether dram drives data pins we input, controls type operation, also present",
        "a sense amplifier device used amplify signal sensor typically used amplify signal small sensor, pressure sensor, level read larger device, computer",
        "the ras signal indicates row component address available raising ras signal row destructively reads contents cells row, forcing cells rewritten effecting refresh row thus natural basis refresh cycle",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "a signal used set timer f 0, timer set state changes",
        "the signal indicates interrupt occurred interrupt could generated external device, disk drive keyboard, error program executed, undefined instruction attempt divide zero",
        "the significance rising edge signal second sensor indicates presence object field view sensor rising edge signal indicates sensor detected change intensity light receiving",
        "the possible outputs fsm a=1 p=1 f signal used set timer, either 0 1 f=0, timer set state changes f=1, timer set state changes light one roads green",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "an encoder device converts signal message code code usually binary code, sequence 0s 1s code used represent signal message form read machine, computer",
        "an encoder helps implement fsm design translating user's input signal used fsm encoder produces signal p indicating user trying make purchase, two-bit signal indicating item user wants decoder takes signal produces individual item release signals r_1, r_2, r_3",
        "a decoder used fsm design generate release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "the fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the state fsm split two pieces: 3-bit register 6-bit timer timer simply binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the vending machine fsm designed control release items vending machine based user's purchase request fsm uses priority encoder determine item user requested, decoder generate individual item release signals",
        "the transitions states well-defined fsm timer counts produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the output fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "a priority encoder type encoder generates signal whenever input lines active, encodes index highest active input two-bit unsigned number priority encoder used determine input lines highest priority",
        "a decoder type logic circuit takes input signal produces one output possible value signal decoder similar multiplexer number inputs outputs however, decoder one input signal, multiplexer multiple input signals",
        "the main difference mux decoder mux multiple inputs one output, decoder one input multiple outputs mux used select one several input signals send output, decoder used interpret input signal produce several output signals",
        "a decoder logic circuit converts binary code set signals used operate device decoder takes input signal, typically one coded binary number, produces one output possible value signal decoder enabled (en=1), and gates produces one minterm input signal s decoder enabled (en=0), decoder produces 0 bits",
        "a decoder device converts coded signals usable information decoders used variety applications, error detection correction",
        "a decoder similar mux allows one digital signal select several others forwarded output decoder one input multiple outputs, mux multiple inputs one output decoder thought special case mux",
        "a decoder logic device converts binary information form one code another, usually natural binary code multiplexer device selects one several analog digital input signals forwards selected input single output line",
        "a priority encoder type encoder assigns priority certain input signals used determine input signal given priority multiple input signals present",
        "a priority encoder type encoder assigns priority certain input signals priority encoder takes signal produces output signal indicates input signal highest priority output signal typically binary number used select one input signals",
        "a decoder logic circuit converts signals one form another binary form, decoder used convert binary number decimal number",
        "a priority encoder circuit takes number input signals, outputs code represents highest priority input signal output code usually binary number",
        "a mux logic block allows us use one digital signal select several others forwarded output decoder logic block converts binary code set signals",
        "the decoder generates release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "the output or gate 1 signal f 1 f 1 state fsm s_0s_1s_2=001 s_0s_1s_2=011",
        "the vending machine releases item using decoder generate three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the vending machine knows purchase requested user pushes one item selection buttons causes priority encoder produce signal p indicating user trying make purchase",
        "the input fsm reset button r, four buttons b_f, b_x, b_g, b_c fsm produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs",
        "the output fsm sequence red, yellow, green lights alternate two roads duration state determined signal f f 0, timer set state changes f 1, timer set state changes light one roads green",
        "the priority encoder used determine item user wants purchase, generate signal indicating user trying make purchase output priority encoder used select value one price registers, subtracted current number nickels stored register purchase successful, price subtracted number nickels item released",
        "the inputs fsm states two roads, timer, signal f",
        "the signal f 1 timer reaches 0 state changes",
        "the state fsm split two pieces: {3-bit} register {6-bit} timer timer simply binary counter counts downward produces output z=1 reaches 0 notice register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle we thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the fsm shows yellow light showing red light setting timer specific value state fsm changes value set signal f, calculated bottom fsm logic diagram",
        "the signal f used set timer certain conditions particular, used set timer state changes",
        "the stoplight controller 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the signal f allows timer set conditions, addition state changes allows flexibility duration state"
    ],
    "65": [
        "a gray code sequence n-bit patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit construct gray code recursively follows: (n+1)-bit gray code, write sequence n-bit gray code, add 0 front patterns sequence, append second copy n-bit gray code reverse order, put 1 front patterns second copy",
        "there several benefits using fsm one benefit fsm used implement wide range logic functions another benefit fsm used construct larger memories multiple smaller memories finally, fsm used reduce number pins needed chip",
        "a gray code sequence patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit construct gray code recursively follows: (n+1)-bit gray code, write sequence n-bit gray code, add 0 front patterns",
        "multiple chips used construct wider memories connecting address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used construct larger memories using multiple chips connecting external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used construct wider memories connecting data inputs outputs multiple memories together allows output line shared one memory without need additional multiplexers",
        "one way construct wider memory use multiple chips connect data inputs outputs chip separately way, left chip handles high n bits input writes produces high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way construct larger memory use multiple chips one address bits drive decoder determines two chips active decoder enabled chip select signal larger memory way, neither chip enabled external cs low",
        "dram type capacitive storage, bit stored charging charging capacitor capacitor attached bit line transistor controlled select line select line high, capacitor isolated holds charge however, transistor's resistance finite, charge leaks onto bit line charge also leaks substrate transistor constructed",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "prof chris schmitz prototyped constructed physical elements help ece shop designed vending machine application fsm, prof doug jones created wiki documentation altera quartus portions lab casey smith, head guru ece instructional labs, developed new debounce design made changes improve robustness",
        "passage - compact approaches comparing functions, solutions subject later class (such ece 462) {two-level logic} { two-level logic} popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams begin one demorgan's laws, illustrate algebraically graphically: c = b+a = {file=part2/figs/demorgan-nandeps,width=095in} let's say function expressed sop form, z=abc+de+fghj diagram left shows function constructed three and gates or gate using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate invert point along wire, slide bubble wire output first column",
        "the design process digital fsm includes six steps: developing abstract model, specifying i/o behavior, completing specification, choosing state representation, calculating logic expressions, implementing flip-flops gates",
        "the first examples passage two-level logic, demorgan's law, sop form two-level logic popular way expressing logic functions, demorgan's law way simplify expressions sop form way representing logic function",
        "an fsm must initialized ensure starts known state avoid undefined behavior without initialization, fsm may produce incorrect results may work all",
        "a multiplexer digital logic block allows one digital signal select several others forwarded output simplest form multiplexer 2-to-1 multiplexer, two inputs left one top top input allows us choose left inputs forwarded output",
        "the choice representation fsm's internal state affects complexity implementation terms number states, number inputs, number outputs, number transition rules",
        "the design process digital fsm typically consists six steps: (1) developing abstract model, (2) specifying i/o behavior, (3) completing specification, (4) choosing state representation, (5) calculating logic expressions, (6) implementing flip-flops gates",
        "the design process involves manipulation logic expressions order optimize specific metrics, cost, power, performance today, manipulation performed almost entirely computers, human engineers supplying logic functions interest imposing constraints process",
        "an abstract model mathematical model used describe system usually simplified include details system",
        "an fsm must initialized ensure starts known state allows fsm function correctly avoid potential problems could arise unknown starting state",
        "a multiplexer device allows multiple signals routed onto single channel done selecting one several input signals connecting output multiplexers used variety applications, telecommunications computer networking",
        "from passage, seems digital fsm designed abstract model first identifying finite set states, set possible inputs, set possible outputs, set transition rules then, fsm implemented digital system representing states patterns using fixed number bits, translating inputs bits, translating outputs bits finally, transition rules defined given state fsm pattern input bits, transition defined state another state",
        "a fsm implemented digital system, states represented patterns using fixed number bits, inputs translated bits, outputs translated bits transition rules must complete, meaning given state fsm pattern input bits, transition must defined state another state outputs digital fsm calculated using boolean logic expressions",
        "the design process counter number states power two choose representation states makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "the fsm initialized one six states desired loop ensures lights roads red cars waiting one roads",
        "the choice representation fsm's internal state affects complexity implementation states represented bit patterns, transition rules must complete states represented abstract states, outputs state must specified",
        "the first step design process develop abstract model model translation human language description model states desired behavior model particularly thorough exact stage",
        "the second step design process think carefully metrics possible interest set metrics feel complete, next step get rid many can",
        "the third step design process identify metrics practical impact current technology, set threshold values metrics simplify reasoning them, eliminate redundant metrics, calculate linear sums reduce count metrics, and, finally, make use notion pareto optimality",
        "the fourth step design process choose particular design set possible designs making choice, engineers typically consider variety factors, including cost, performance, manufacturability, reliability",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "the first step design process develop abstract model model captures intent description particularly thorough exact",
        "the third step design process evaluate design using multiple metrics includes identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "the fourth step design process choose particular design set possible designs choice made based number factors, including objectives design, constraints problem, preferences designer",
        "abstraction process simplifying complex system identifying important aspects system ignoring rest context implementation, abstraction used simplify design identifying important features design ignoring rest make design manageable easier understand",
        "there reasons important make implicit assumptions clear design process first, assumptions made clear, lead confusion misunderstanding among team members working design second, making assumptions explicit help ensure everyone page working towards goal finally, explicit assumptions help prevent errors mistakes design process",
        "the choice state representation affects implementation fsm terms number gates inverters required, well delay overall design serial comparator design based 2-bit slice variant, example, requires 24 gates 10 inverters, much larger earlier serial design terms gate delays, however, new design identical, meaning comparisons finished half time realistic area timing metrics show slightly difference two designs differences dominate results design carefully considered",
        "the choice fsm's input output behavior affects design process determining set possible states set possible outputs set possible states determined set possible inputs, set possible outputs determined set possible outputs",
        "one important reason compatibility components digital system helps ensure system function correctly components compatible, system may work correctly, may work all additionally, compatibility among components help reduce cost manufacturing system, well cost maintaining repairing system",
        "a gray code counter device used count number operations logic expression device works counting number variables expression adding number operations device used optimize logic expressions reducing number operations needed implement logic function",
        "the inputs gray code counter current state counter clock signal clock signal triggers state change counter",
        "the transition diagram two-bit gray code counter loop counter moving one state next cycle state diagram marked internal state value s_1s_0 (before ``/'') output z_1z_0 (after ``/''), always equal counter",
        "the implementation gray code counter developed first filling k-maps next-state values, deriving algebraic expressions next-state logic used develop implementation",
        "the inputs counter coins inserted machine machine track value coins terms nickels reject coins inserted would cause value exceed maximum value machine track",
        "a gray code counter type digital counter used count number clock pulses named frank gray, invented code 1953 main advantage gray code counter types counters less likely produce errors counting",
        "a gray code counter type counter uses gray code, cycle bit patterns certain length consecutive patterns differ exactly one bit regular counter type counter use gray code",
        "the timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle states thus act like counter",
        "the output counter number successful conversions made scanf function",
        "a gray code counter type counter cycles possible bit patterns certain length states transition diagram gray code counter form loop, counter moving one state next cycle state diagram marked internal state value output value, always equal counter",
        "there benefits using gray code counter first, easy design implement second, easy check correctness logic third, easy read understand logic",
        "a gray code counter used applications digital value must changed incrementally least number steps gray code counter changes one bit time, minimizes number digital values must changed",
        "a gray code counter type digital counter uses gray code generate output input gray code counter digital signal represents number clock pulses applied counter output gray code counter digital signal represents number clock pulses applied counter, plus one",
        "a gray code counter designed first creating transition diagram shows states outputs counter next, next-state logic developed creating k-maps next-state values deriving algebraic expressions finally, next-state logic implemented diagram",
        "the internal state value third bit gray code counter s_2s_1s_0=001 hold=1, next-state logic s_1^+ s_0^+ reduces s_1^+=s_1 s_0^+=s_0; words, counter stops counting simply stays current state hold=0, equations become s_1^+=s_0 s_0^+={{s_1}}, produces repeating sequence s_1s_0 00, 01, 11, 10, desired",
        "the output third bit gray code counter would either 0 1 input 0, output 1 input 1, output 0",
        "the next state value s2 0 timer set state changes, find duration state analyzing muxes bottom mux selects s_2=0, selects output top mux s_2=1",
        "the next state value s0 0 timer set state changes, find duration state analyzing muxes bottom mux selects s_2=0, selects output top mux s_2=1 top mux selects b s_0=1, selects c s_0=0",
        "the fully-specified transition diagram three-bit gray code counter follows: the states counter form loop, counter moving one state next cycle each state diagram marked internal state value s_2s_1s_0 (before \" / \") output z_2z_1z_0 (after \" / \") based transition diagram, next-state values s_2^+, s_1^+, s_0^+ filled shown",
        "the next-state values three-bit gray code counter follows: s_2^+=0, s_1^+=s_0, s_0^+={{s_1}}",
        "the next-state logic three-bit gray code counter follows: s_2^+ = s_2 + s_0 s_1^+ = s_2 s_0^+ = s_2 s_1",
        "the implementation diagram three-bit gray code counter logic diagram shows inputs, outputs, next-state logic counter diagram ordered left right {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2, makes easy read check correctness",
        "the vertical lines carrying current state values inverses back next state logic inputs ordered left right (on left side figure) {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2",
        "adding third bit gray code counter increases design complexity requires additional carry bit carry bit must propagated adder bit slice logic, increases number logic gates required overall complexity design",
        "one way reduce design complexity make use common algebraic terms sub-expressions help simplify design make easier understand another way reduce complexity use demorgan's laws simplify expression help reduce number gates needed make design efficient",
        "it important reasonable order designing logic diagram help simplify design process make easier understand function logic diagram additionally, help ensure logic diagram compatible products may used system",
        "the counter's implementation diagram simplifies understanding diagram breaking smaller, manageable pieces this, easier see various parts diagram interact other additionally, makes easier identify potential problems areas improvement",
        "the purpose vertical lines carrying current state values inverses back next state logic inputs ensure state fsm always consistent necessary safety reasons, fsm must always ensure lights one roads red times",
        "the color mapping three-bit rgb encoding system system colors represented combination red, green, blue light color mapping system shown right imagine charged creating counter drive light sequence colors",
        "the light red one roads times road green light, controller show yellow light showing red light give drivers warning allow slow down finally, fairness, controller alternate green lights two roads",
        "from passage, inferred logical completeness necessarily help efficient design logic functions words, single boolean logic function expressed many different ways therefore, important engineers learn develop efficient implementation function, well determine whether two logic expressions identical without actually writing truth tables",
        "the next-state values s_2, s_1, s_0 given table right states act like counter, examining connections, derive equations next state draw transition diagram six states loop defined next-state logic, two remaining states converging loop single cycle",
        "the equation s_2^+ follows: s_2^+ = + b + c, carry bit, b first bit added, c second bit added overflow occurs, s_2^+ = c",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills students learn coming months",
        "yes, choose use counter's internal state directly output values colors need produce outputs unique bit patterns using counter's internal state directly output values, simplify design",
        "a fully-specified transition diagram diagram specifies states system in, well transitions states allows clear understanding behavior system",
        "a karnaugh map graphical representation boolean function helps simplify function map consists grid squares, corresponds possible combination input values map used find groups product terms implicants function",
        "the next-state logic equations functions describe relationship current state system next state system functions represented either sop pos form demorgan's law used simplify functions replacing or gates nand gates, and gates nor gates",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways, learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills start learn coming months",
        "the color mapping three-bit rgb encoding system colors produced unique bit patterns states form loop, marked internal state value s_2s_1s_0 output rgb",
        "the desired pattern one represents number 2's complement representation 2's complement representation defined choosing set integers balanced around zero groups so, want represent number 2's complement representation, need choose pattern represents number representation",
        "the transition diagram color sequencer loop six states, two remaining states converging loop single cycle lights red states, necessary safety timer set state changes, duration state calculated analyzing muxes",
        "the initial state three flip-flops implementation 0s 1s use init input choose normal operation (init=0) fsm forcing fsm next state given i_2i_1i_0 (when init=1)",
        "the timer set 0, state fsm changed next state sequence new state fsm determines duration next state, timer set accordingly",
        "the passage states power consumption important metric engineers must take account designs however, cases, desktop high-end server processors, metrics (such performance) may important always want operate edge interesting range could going wrong, engineers taking power consumption account much be",
        "one possibility fsm resetting properly, starts unexpected state another possibility race condition fsm, get unexpected state inputs change quickly",
        "the purpose adding and gates input create logic function efficient terms area power done reducing number variables expression",
        "the issue fsm getting unexpected states cause output circuit glitch problematic applications stable output required",
        "the fsm get unexpected states inputs set properly example, input set 111, fsm stay white state indefinitely",
        "the initial state three flip-flops implementation 0 state explicit mechanism initialization forces flip-flop 0 state alternatively, could add extra logic design would allow us force fsm specific state next cycle",
        "the first approach use flip-flop design add single bit pass necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "interrupts powerful exceptions occur asynchronously respect program means processor check interrupts instructions, allows flexibility design processor",
        "the light sometimes glows cyan red briefly appearing white controller must ensure lights one roads red times similarly, road green light, controller show yellow light showing red light give drivers warning allow slow down",
        "one possibility fsm resetting properly, start expected initial state another possibility race condition fsm, reach unexpected state inputs change quickly",
        "the initial state three flip-flops unknown unless explicit mechanism initialization initialization work two ways first approach makes use flip-flop design know, flip-flop built pair latches, make use internal reset lines latches force flip-flop 0 state (or 1 state) using additional input alternatively, add extra logic design",
        "one way make use internal reset lines latches force flip-flop 0 state done connecting reset lines latches 0 voltage source",
        "the passage discusses design serial comparator using bit-sliced approach approach leads design 24 gates 10 inverters, much larger earlier serial design however, new design identical terms gate delays, meaning comparison finished half time",
        "an abstract model simplified representation system, typically used aid understanding system context logic optimization, abstract model used help understand tradeoffs different logic expressions",
        "there four states second version table states a, b, c, d b on state, c off state",
        "the second version table implies buttons placed ergonomic way possible buttons close together enough space buttons edge table",
        "the design counter includes eight states, three state bits used keep track current state choice representation fsm's states dramatically affect design complexity right strategy thus often start selecting representation makes sense human, even requires bits strictly necessary",
        "the two states first column table states fsm f=0 case, timer set state changes, find duration state analyzing muxes",
        "the four counting states are: 1) state a: timer set s_2=0 duration state a 2) state b: timer set b s_0=1 duration state b 3) state c: timer set c s_0=0 duration state c 4) state d: timer set s_2=1 duration state d",
        "there four halted states: halt a, halt b, halt c, halt d states, counter retains current value user presses \"go\" button",
        "pressing ``halt'' button nothing counter halted counter remains state ``go'' button pressed",
        "pressing ``go'' button causes counter start counting",
        "an fsm finite state machine, mathematical model computation used design computer programs digital logic circuits abstract machine one finite number states",
        "there disadvantages using fsm first, fsm designed carefully, hard understand debug second, fsm use resources simpler design, state machine finally, fsm difficult change extend simpler design",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "the input behavior machine based type coin inserted selection item purchase user inserts coin nickel, machine reject coin remain state user inserts nickel, machine transition next state accept coin user selects item purchase, machine release item user inserted enough money otherwise, machine remain state",
        "the output behavior add3 procedure takes three integers arguments, adds together, returns sum procedure called constants 10, 20, 30, result printed calling convention, call made, r0 must contain value 10, r1 value 20, r2 value 30",
        "the ``halt'' button ice cream dispenser stops machine dispensing ice cream useful user wants stop machine dispensing ice cream, machine malfunctioning needs stopped",
        "the \"go\" button initiates system call causes processor enter kernel mode execute instructions associated system call instructions part operating system used perform desired action, printing character console",
        "the two-bit gray code sequence two-bit patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit",
        "there two control buttons: one east-west road one north-south road",
        "the states transition diagram represent different colors stoplight first two states red, followed yellow, green last two states red",
        "the uninterrupted counting cycle represents duration state fsm used calculate duration state fsm f=0",
        "system calls initiated trap instruction, system calls also known traps many architectures, system call places processor privileged kernel mode, instructions implement call considered part operating system",
        "the purpose using gray code create sequence patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit",
        "the design continues choosing state representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "if use gray code, would compare two expressions determine whether represent logic function would test logical equivalence, important part hardware design however, tools today provide help problem, necessary use gray code",
        "if user presses \"go\" button state {count a}, outputs c_l=11 c_m=01 means user get one half servings lychee half serving mango",
        "there explicit answer question passage however, based information given, seems user presses ``halt'' button state { count a}, system reset state { halt a}",
        "there two possible outcomes user presses ``go'' button state { halt a} first outcome fsm moves state { count b}, next state sequence second outcome fsm resets state { count a}, initial state",
        "there possible ways answer question one way would say user presses ``halt'' button state { halt a}, system reset state { count a} another way answer question would say user presses ``halt'' button state { halt a}, system remain state { halt a}",
        "there two possible ways user could press buttons state { halt a} first way user could press \"halt\" button \"go\" button case, fsm would move state { halt a} state { count b} second way user could press \"go\" button \"halt\" button case, fsm would move state { count b} state { halt a}",
        "if user presses \"go\" button (hg=01), ice cream cup overflow outputs c_l=11 c_m=10, means dispenser release full serving flavor, two servings total",
        "if ``halt'' button pressed (hg=10), counter remains halted state { halt a} buttons pressed (hg=11), ``halt'' overrides ``go,'' nothing special alone pressed counter halted thus, input patterns hg=10 hg=11 also take state { halt a} back itself",
        "if user presses buttons (hg=11), ice cream cup overflows outputs c_l=11 c_m=10, dispenser releases full serving flavor, two servings total",
        "if \"halt\" button pressed (hg=10), logic outputs c_l=00 c_m=00, dispenser gives ice cream buttons pressed (hg=11), outputs c_l=11 c_m=11, dispenser gives two servings flavor, four servings total",
        "the design counter completed applying decisions made { count a} state counting states, decisions made { halt a} state halted states results design states labeled internal state outputs (s_2s_1s_0/z_1z_0)",
        "one important reason consider possible input conditions possible states help ensure design correct example, design ever receives input values within certain range, possible design actually correct input values considering possible input conditions help catch errors like this another reason consider possible input conditions help optimize design example, design ever receives input values within certain range, possible simplify design make efficient considering possible input conditions help identify opportunities optimization",
        "a transition diagram help process helping identify important metrics helping balance design effectively according metrics",
        "the state table form specification make missing parts specification obvious showing different states system transitions states help identify parts specification missing needs added order complete specification",
        "if user presses \"go\" button (hg=01), machine dispense one half servings lychee half serving mango",
        "if ``halt'' button pressed (hg=10), counter remains halted state buttons pressed (hg=11), counter also remains halted state",
        "the fsm needs least three states order eight states three possible items purchased, item purchased one two ways (with without enough money)",
        "when turing machine given input, either finishes finite number steps, not finish finite number steps, machine said \"halted\"",
        "a counter \"counting\" process incrementing, counter \"halted\" incrementing",
        "the choice representation fsm's states affect design complexity determines many bits needed represent state bits needed represent state, design complex",
        "the right strategy choosing representation start selecting representation makes sense human, even requires bits strictly necessary make design process simpler efficient long run",
        "the choice state representation affects design complexity ways first, affect number bits needed represent states second, affect number possible states represented third, affect number transitions need considered designing state machine",
        "the right strategy start selecting representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "one reason often best start selecting representation makes sense human easier understand work with additionally, starting representation makes sense human help ensure final product also easy understand use",
        "abstraction powerful tool help simplify complex problems selecting state representation, abstraction help identify important aspects problem ignore irrelevant details make easier find solution effective efficient",
        "abstraction selecting state representation lead better design allowing engineer focus important aspects problem ignoring details important help simplify problem make easier find solution",
        "the number state bits affects design complexity determines number possible states fsm in larger number state bits means possible states design must able handle them",
        "abstraction important selecting state representation allows designer select representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "one reason important start representation makes sense human humans must supply logic functions interest, must program acceptable transformations equivalent forms second reason complexity problem good way introduce real engineering finally, contextual information help develop better understanding finite state machines higher-level abstractions form core digital systems still defined directly humans today",
        "abstraction selecting representation impact design metrics reducing number metrics need considered simplify process designing solution make easier find optimal solution",
        "hold 1 counter count state s_2=0 counter already halted press \"go\" button",
        "hold = h + s_2 when counter halt state s_2=1, hold = 1 counter stop (move halted state without changing value) h true, halted states, s_2=1, counter stops (stays halted state) h+ true",
        "the value s_2 counter count state hold=0 undefined because, passage states, overflow occurs either operands negative operands positive operands negative, resulting sum equal c however, operands positive, resulting sum less c thus, impossible determine value s_2 without knowing values operands",
        "s_2 1 counter halt state hold=1 s_2=1, counter halted, hold=1, counter retain current value",
        "the value s_1s_0 counter count state hold=1 01",
        "the hold variable used save energy chip finishes work, turn off, saving energy variable allows chip turn finished, saving energy",
        "the value hold counter counting 0 value hold counter halted 1",
        "the value hold counter halted value last input given machine",
        "the value hold determines whether counter counts determining whether counter hold current value (stop counting) ``halt'' button pressed counter already halted ``go'' button pressed",
        "the next-state logic s_1^+ s_0^+ hold=0 follows: s_1^+ = s_0 + hold s_0^+ = s_1 + hold",
        "the hold variable simplifies design allowing designer separate logic deciding whether advance counter fairly cleanly logic advancing counter itself hold bit diagram used determine whether counter advance current cycle",
        "the similarity equations s_1^+s_0^+ equations {2-to-1} mux used represent logic function two-level logic popular way expressing logic functions simple map expression cmos gates using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate",
        "the use s_2 separates logic deciding whether advance counter allowing counter halted state (s_2=1) counting state (s_2=0) hold=1, counter retains state, hold=0, counts",
        "f two effects operation fsm first, prevents timer reset enters new state effect lengthening duration state second, prevents fsm entering loop defined next-state logic effect halting fsm current state",
        "abstraction used build three-bit gray code counter two-bit design using copies bit-sliced adder circuit approach less efficient designing circuit specifically three-bit gray code counter, simpler",
        "the state representation used determine next state fsm done examining inputs fsm deriving equations next state states fsm act like counter, examining connections, next state determined",
        "there several benefits good state representation first, help reduce number pins needed chip second, improve density memory chip third, improve speed memory chip",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor performance cases, bad state representation also lead increased costs fabrication testing",
        "one way verify implementation correct test known set inputs compare results expected results results match, implementation likely correct another way verify implementation examine code look errors done manually help software tool",
        "a good state representation easy understand able capture relevant information problem bad state representation may difficult understand may able capture relevant information",
        "the state representation significant impact overall design system affects way system behaves interacts environment well-chosen state representation simplify design system make efficient",
        "the states fsm act like counter, value fsm set whenever state changes timer set state changes, duration state determined value timer fsm also set conditions, signal f calculated",
        "a good state representation important help reduce number logic gates needed design, thus save chip area additionally, good state representation help improve performance design reducing number logic operations needed",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor power consumption cases, two metrics may strongly correlated, meaning design good one metrics frequently also good metric",
        "one way improve bad state representation make compact done using two-level logic instead three-level logic another way improve bad state representation make readable done using clear consistent naming conventions",
        "the state representation impacts fsm determining duration state timer set whenever state changes, duration state determined muxes bottom mux selects s_2=0, selects output top mux s_2=1 top mux selects b s_0=1, selects c s_0=0",
        "a bad state representation lead number problems, including wasted engineering effort, poor performance, even product cancellations",
        "a bad state representation fixed using code larger hamming distance enable system detect correct errors",
        "there best state representation fsm important factor representation complete, meaning states represented inputs accounted for considerations include size state space number inputs outputs",
        "a good state representation important help reduce number transistors needed design, thus save space energy additionally, help improve performance design making easier computer manipulate logic expressions",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context",
        "the common types memory used digital systems sram dram sram used high-speed applications processor caches embedded designs dram used applications less demanding speed requirements",
        "one build static rams using logic using tri-state buffers tri-state buffers used create larger memories using multiple chips wider memories also created using multiple chips",
        "tri-state buffers used provide logical disconnection tri-state buffer output logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "memory chips combined provide larger wider memories using multiple chips example, two 2-bit memories used implement 4-bit memory one address bits used drive decoder determines two chips active (cs=1) decoder enabled chip select signal larger memory, neither chip enabled external cs low, desired",
        "the two common types memory used digital systems static random access memory (sram) dynamic random access memory (dram) sram used high-speed applications processor caches embedded designs, dram used applications less demanding speed requirements, main memory computers",
        "one build memories using logic creating tri-state buffer logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "a tri-state buffer type digital logic device used either connect disconnect signal line power source ground achieved using two transistors, one connect signal line power source, connect signal line ground buffer enabled, transistors turned on, signal line connected either power source ground, depending value input signal buffer disabled, transistors turned off, effectively disconnecting signal line power source ground",
        "one way combine memory chips use multiple chips implement larger memory done using one address bit drive decoder determines two chips active another way combine memory chips use multiple chips implement wider memory done routing external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one builds memories (static rams) using logic connecting dual-inverter loop opposing bit lines transistors controlled select line select high, transistors connect inverter loop bit lines writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "a tri-state buffer logic circuit used disconnect output logic circuit achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "one way combine memory chips use create larger memory done using one address bit drive decoder determines two chips active address bits, well external data inputs write enable signal, delivered memories external data outputs also connected memories another way combine memory chips use create wider memory case, chips either active inactive time, external address, write enable, chip select inputs routed chips however, data inputs outputs separate, chip handling different part data",
        "dynamic rams memories use charged capacitor store bit charge drains time must replaced, giving rise qualifier ``dynamic'' dram also unavailable recharging capacitors, problem applications stringent real-time needs",
        "random access memories (rams) memories support two operations: writing data element, reading data element memories also volatile, means data held memory erased electrical power turned fails static random access memory (sram) used high-speed applications processor caches embedded designs",
        "the addressability computer memory number bits stored element memory size elements memory vary single binary digit, bit, byte (8 bits) more typically, data elements larger byte referred words, size word depends context",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors, dram cell uses one transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "to write data memory element, external circuit sends signal memory indicating address element written data written sent memory, memory stores data element specified address",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context element memory assigned unique name, called address, allows external circuit identify particular element interest addresses unlike street addresses use send letter unlike street addresses, however, memory addresses usually little redundancy; possible combination bits address identifies distinct set bits memory",
        "a chip select input input chip allows chip turned off input used save energy turning chip needed",
        "a word context computer memory sequence bits represents unit data words represent numbers, characters, data types size word typically determined computer's word size, number bits computer process time",
        "non-volatile memories include magnetic optical storage media dvds, cd-roms, disks, tapes, capacitive storage media flash drives, programmable logic devices",
        "a ram type memory used store data volatile memory, means data stored memory erased power turned fails ram random access memory, means time required access element memory independent element accessed",
        "sram faster dram, dram denser (has bits per chip area) substantial part dram density due transistor count: typical sram cells use six transistors (two inverter, two connect inverters bit lines), dram cells use single transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "a computer memory storage device data two main types memory: sram dram sram faster expensive, dram slower cheaper dram commonly used main memory computers",
        "data elements computer memory stored either static random access memory (sram) dynamic random access memory (dram) sram uses active logic form two-inverter loop maintain stored values, dram uses charged capacitor store bit",
        "the addressability computer memory number bits stored element memory size elements memory vary single bit byte more typically, data elements larger byte referred words, size word depends context",
        "words computer memory stored bits, either 0 1 group bits makes byte, smallest unit data stored computer memory group bytes makes word, smallest unit data read written computer memory",
        "a random access memory (ram) type memory allows data stored retrieved order ram volatile, means loses data power supply removed two types ram: static ram (sram) dynamic ram (dram)",
        "static random access memory used high-speed applications processor caches embedded designs sram bit density significantly lower dram bit density, applications less demanding speed requirements use dram",
        "an sram cell flip-flop made two cross-coupled inverters output one inverter connected input other, vice versa power applied, sram cell one two stable states, represent 0 1 state cell changed applying correct sequence voltages inputs",
        "sram cells combined bit slice sharing bit lines analog read write logic bit slice figure thought 16-address, 1-bit-addressable memory (2^4b) cells bit slice share bit lines analog read write logic, appears right figure",
        "a chip select input used enable disable chip input used save power turning chip needed",
        "the main advantage sram dram speed sram faster dram need refresh memory cells often dram denser sram, store data given area",
        "sram cells store data using dual-inverter loop writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "a read operation performed sram cell first bringing bit line intermediate voltage level, raising select line allows capacitor either pull small amount charge bit line push small amount charge onto bit line resulting change voltage detected sense amplifier",
        "a write operation sram cell performed charging charging capacitor capacitor attached bit line transistor controlled select line select low, capacitor isolated holds charge however, select high write operation, logic driving bit line forces charge onto capacitor removes charge it",
        "sram type memory used computers made number transistors store data way easy computer access sram faster types memory, also expensive",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors (two inverter, two connect inverters bit lines), dram cell uses single transistor",
        "a sram cell organized flip-flop, one transistor one capacitor per bit capacitor stores data bit, transistor controls access bit",
        "sram cells combined bit slice sharing bit lines analog read write logic decoder sets one cell's select line high enable read write operation cell chip select input cs drives enable input decoder, none memory cells active chip select low (cs=0), exactly one memory cells active chip select high (cs=1)",
        "a write operation sram cell performed bringing bit line intermediate voltage level, raising select line, allows capacitor either pull small amount charge bit line push small amount charge onto bit line resulting change voltage detected sense amplifier end bit line",
        "the main benefit using tri-state buffer allows logical disconnection buffer output means multiple memories share output line without need additional multiplexers",
        "a tri-state buffer achieves logical disconnection using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "the decoder memory chip responsible translating memory address correct location memory chip necessary ensure correct data read written correct location memory chip",
        "tri-state buffers used reduce number pins needed chips combining inputs outputs allowed chip designers halve number pins needed",
        "a tri-state buffer type digital logic circuit used either connect disconnect signal line power supply ground done using two transistors, one connect signal line power supply, connect signal line ground buffer enabled, transistors turned on, signal line connected either power supply ground, depending value input signal buffer disabled, transistors turned off, signal line effectively disconnected power supply ground",
        "a tri-state buffer digital circuit used either connect disconnect output signal line buffer three states: high, low, high impedance buffer high state, output connected signal line copies signal input buffer low state, output disconnected signal line buffer high impedance state, output effectively disconnected signal line",
        "the benefit using tri-state buffer allows logical disconnection tri-state buffer output means output shared one memory without need additional multiplexers useful creating larger memories combining multiple chips",
        "a tri-state buffer digital circuit used either connect disconnect signal circuit buffer three states: high, low, high impedance high impedance state effectively disconnects signal circuit allows multiple memories share output line without need additional multiplexers",
        "a tri-state buffer used create electrical connection tri-state buffer output logical disconnection achieved using outer transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "tri-state buffers used reduce number pins needed chip combining inputs outputs example, data inputs outputs memory combined single set data wires, bidirectional signals reduces number pins needed still allowing amount data transferred",
        "the main difference sram dram sram faster uses transistors, dram slower uses fewer transistors dram also denser sram, meaning bits stored given area",
        "a dram cell stores bit using charged capacitor charge capacitor drains time must replaced order maintain stored value",
        "a sense amplifier circuit used read data stored memory cell sense amplifier amplifies small signal memory cell converts digital signal read processor",
        "a row natural basis refresh cycle dram data pins provide bidirectional signals reading writing elements dram output enable input, oe, controls tri-state buffers dram determine whether dram drives data pins we input, controls type operation, also present",
        "sdram type dram used main memory computers ddr4 sdram newer type dram faster sdram",
        "dram used storing data capacitor capacitor attached bit line transistor controlled select line select line low, capacitor isolated holds charge however, transistor's resistance finite, charge leaks onto bit line",
        "dram type memory uses capacitors store data row dram selected, cells row read written back, refreshes data cells dram said destructive reads read operation brings voltage capacitor closer intermediate voltage level, effectively destroys data cell",
        "the benefits using dram denser sram uses fewer transistors makes dram ideal applications size important speed",
        "there several disadvantages using dram first, dram slower sram second, dram less dense sram, requires chip area store amount data finally, dram cells complex sram cells, difficult design manufacture",
        "dram type memory slower sram denser (has bits per chip area) dram cells use single transistor, sram cells use six transistors dram designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor count",
        "a dram cell refreshed reading contents writing back active logic process necessary avoid data loss due charge leakage capacitor",
        "a sense amplifier device used amplify signal sensor typically used amplify signal small sensor, pressure sensor, level read larger device, computer",
        "the ras signal indicates row component address available raising ras signal row destructively reads contents cells row, forcing cells rewritten effecting refresh row thus natural basis refresh cycle",
        "the column address strobe (cas) input used indicate address components available used control type operation (read write)",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, problem solved",
        "the lab simulates two-level logic used map expression cmos gates also shows graphically manipulate expressions understand gate diagrams",
        "the fsm stoplight controller ensures lights one roads red times controller also alternates green lights two roads",
        "the vending machine application fsm designed team engineers fsm designed control simple vending machine accepts us coins payment offers choice three items sale machine adjustable item prices, fsm needs keep track much money inserted order decide whether user purchase one items",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, servo held place, desired",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab",
        "juan jos'e jaramillo identified common failure modes, including variability caused sunshine windows eceb, made changes improve robustness also created powerpoint slides typically used describe lab lecture",
        "prof doug jones designed vending machine application fsm first identifying different states machine could in created state diagram showed machine would transition one state another finally, implemented fsm hardware using altera quartus software",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab based lab earlier mentor graphics work prof herman prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "prof kindratenko helped scale design way made possible deliver 400 students entering ece every semester creating wiki documentation altera quartus portions lab also helped improve robustness lab identifying common failure modes making changes design",
        "jaramillo later identified common failure modes, including variability caused sunshine windows eceb, made changes improve robustness also created powerpoint slides typically used describe lab lecture",
        "a signal used set timer f 0, timer set state changes",
        "this synchronous fsm implemented digital logic fsm finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs",
        "the first optical sensor used detect presence chip chip present, sensor turns chip used chip present, sensor turns chip cannot used sensor used save energy turning chip needed",
        "the second optical sensor used detect chip finishes work chip turn save energy metric used guide process optimizing logic expressions balance struck different metrics involved",
        "if rise fall rising clock edge, processor would able recognize interrupts instructions would cause program terminate unexpectedly",
        "the device used turn save energy done using heuristic approaches find solutions strike balance different metrics, cost, power, performance human engineer impose constraints, limits chip area limits minimum performance, order guide process",
        "to use device, user presses one buttons user presses one button, device produces lychee ice cream user presses blend button, device produces blend user presses mango button, device produces mango ice cream",
        "the signal indicates interrupt occurred interrupt could generated external device, disk drive keyboard, error program executed, undefined instruction attempt divide zero",
        "the significance rising edge signal second sensor indicates presence object field view sensor rising edge signal indicates sensor detected change intensity light receiving",
        "a input operand and function and function evaluates 1 input operands equal 1 input operand or function or function evaluates 1 input operand equal 1",
        "there two optical sensors positioned different heights device first sensor positioned high enough slope dime passes beneath sensor, allowing signal produced sensor tell us whether coin dime quarter second sensor positioned coins pass front it signal second sensor used clock fsm",
        "the device uses two optical sensors differentiate dime quarter first sensor positioned dime passes beneath it, second sensor positioned coins pass front it rising edge clock signal second sensor occurs, signal first sensor indicates whether coin dime quarter",
        "the device uses sensors generate clock signal alternating 0 1 regular period clock 0, one set latches holds bit values fixed, combinational logic uses latches inputs produce bits copied second set latches clock 1, second set latches stops storing data inputs retains bit values order drive combinational logic, results copied third set latches",
        "the fsm uses signal determine whether accept reject coin checking rising edge signal second sensor rising edge occurs, signal first sensor indicates whether coin quarter (t=1) dime (t=0) sample timing diagram lab appears right clock signal generated lab square wave---in words, high low portions equal---but also unlikely periodic instead, ``cycle'' defined time coin insertions",
        "the output depend input function and evaluate 1 input values 1 input value 0, function evaluate 0",
        "the possible inputs fsm dime (t=0) quarter (t=1) machine reject input user tries purchase item without inserting enough money first, fsm also reject request",
        "the possible outputs fsm a=1 p=1 f signal used set timer, either 0 1 f=0, timer set state changes f=1, timer set state changes light one roads green",
        "the start state initial state fsm state, money deposited yet fsm needs keep track much money inserted order decide whether user purchase one items information alone enough simplest machine, let's create machine adjustable item prices",
        "the dime quarter states used represent user inserted one coin purpose states output a=1 p=0, indicating user yet paid full price another coin needed",
        "the rejectd rejectq states used handle user mistakes user enters second dime dime state, fsm reject coin rejectd state rejects dime (a=0) continues wait quarter (p=0) rejectq state used handle user inserts one quarter",
        "the start state first state fsm sequence used initialize fsm",
        "the dime state state machine waiting dime inserted first state machine accepts coin machine outputs a=1 p=0 state, indicating user yet paid full price 35 cents",
        "the 'quarter' state refers fact addition unit 4-bit examples closed addition means value n, easily find two 4-bit unsigned numbers that, added together, cannot represented 4-bit unsigned number n=4, example, add 12 (1100) 6 (0110) obtain 18 since 18 outside range [0,2^4-1] representable using 4-bit unsigned representation, representation breaks try represent sum using representation",
        "the paid state state user paid full price 35 cents next states paid dime dime inserted quarter quarter inserted",
        "the 'rejectd' state state processor interrupts program due error unexpected behavior state usually causes program terminate",
        "the user purchases item inserting either dime followed quarter, quarter followed dime user inserts second dime, machine reject coin user inserts second quarter, machine accept coin user paid full price 35 cents",
        "the state representation lab fsm 3-bit binary number, following meaning: s_2: type last coin inserted (0 dime, 1 quarter) s_1: one quarter inserted (1 yes, 0 no) s_0: one dime inserted (1 yes, 0 no)",
        "based passage, least 33 bits internal state needed fsm needs track number cycles needed serial comparator execute comparison, least 32 cycles additionally, fsm needs track whether loop done, requires least one additional bit",
        "each bit pattern represents column addition problem carry bit (c_) added b bits produce sum bit (s_) carry bit (c_)",
        "the meaning assigned bit patterns makes easier understand behavior fsm example, paid state, last coin inserted may either type, type all, since decided start fsm state well however, four states, meanings provide clear understanding state fsm",
        "our machine accept pennies, let's fsm keep track much money inserted multiple 5 cents (one nickel) table right shows five types coins, value dollars, value terms nickels expensive item machine might cost dollar two, fsm must track least 20 40 nickels value let's decide use six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "the state table represents six states loop defined next-state logic, two remaining states converging loop single cycle lights red states, necessary safety",
        "the k-map represents domain function form hypercube hypercube divided regions, corresponds product literals function evaluated point hypercube, product literals implicant function function evaluates 1 point",
        "there 63 possible states paid state machine track 315 dollars worth nickels, 63 nickels",
        "prof jones assigns bit patterns way makes easy humans understand meaning states example, paid state, last coin inserted may either type, type all, since fsm starts state however, four states, meanings clear easy apply",
        "this particular example tricky requires reader understand concept bit-sliced addition order understand passage furthermore, passage provide clear explanation bit-sliced adder circuit works, making difficult reader follow along",
        "the s_2 value specifies number inputs must satisfied order output 1 cuts number possible choices four two case two possible combinations inputs satisfy condition",
        "one reason try leverage fact next-state patterns two states relevant may simplify design system next-state patterns needed, system designed without them, may make design process simpler faster additionally, eliminating next-state patterns may also reduce cost system",
        "the final state table state transition diagram appear follows: the final state table lists six states loop defined next-state logic, two remaining states converging loop single cycle table also includes states outside desired loop lights red states, necessary safety the state transition diagram shows six states loop defined next-state logic, two remaining states converging loop single cycle diagram also shows duration state",
        "the purpose fsm control stoplights busy intersection fsm ensures lights always red one roads, yellow light shown green light, green lights alternated two roads",
        "the input sequence 111010010001 significant determines duration state fsm",
        "the input sequence 001 causes stoplight turn red roads necessary safety",
        "the design easy test two-level logic design means inputs outputs easily tested nand nor gate additionally, design easy test sop expression means inputs outputs easily tested or gate",
        "scan-based testing method testing input scanned converted appropriate result programmer responsible ensuring number conversions format string matches number arguments provided programmer must also ensure type information produced conversion stored address passed conversion",
        "we test circuit build lab see correctly implements fsm outlined notes this, input known sequence 0s 1s see circuit outputs correct responses does, confident circuit functioning correctly",
        "scan-based testing type testing used test functionality design type testing typically used test digital designs",
        "the input sequence used initialize fsm sequence 0s 1s input fsm order set state fsm desired state",
        "the input sequence used test fsm sequence 0s 1s applied inputs fsm input sequence used determine output fsm",
        "the outputs needed observe state check output logic values state register timer outputs used determine duration state order states occur",
        "it difficult test sequential logic difficult predict behavior system sequential logic difficult test difficult determine whether system halt finite number steps not",
        "scan-based testing type testing input scanned errors processed type testing often used test software errors",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "the input sequence initialization is: 1) value r0 10, 2) value r1 20, 3) value r2 30",
        "the input sequence testing follows: first, user prompted input two integers decimal form, converted 2's complement stored variables 'a' 'b' next, user prompted input ascii character, value hexadecimal, double-precision floating-point number, stored variables 'c', 'u', 'd', respectively finally, user prompted input two real numbers decimal form, converted single- double-precision floating-point numbers stored variables 'f' 'd', respectively",
        "an fsm finite state machine, model computation used design computer programs hardware fsm defined set states, set inputs, set outputs, set transitions states",
        "an encoder device converts signal message code code usually binary code, sequence 0s 1s code used represent signal message form read machine, computer",
        "a decoder logic circuit converts binary code corresponding decimal code decoders used variety applications, including data storage transmission, error detection correction, address decoding",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "a digital fsm model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called { transition rule} fsm comprises five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs",
        "an encoder helps implement fsm design translating user's input signal used fsm encoder produces signal p indicating user trying make purchase, two-bit signal indicating item user wants decoder takes signal produces individual item release signals r_1, r_2, r_3",
        "a decoder used fsm design generate release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "a digital fsm finite state machine implemented digital system means states must represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits addition, transition rules must complete, meaning given state fsm pattern input bits, transition must defined another state",
        "the game revolves around old logic problem farmer must cross river order reach market farmer traveling market sell fox, goose, corn farmer boat, boat large enough carry fox, goose, corn time fox cannot left alone goose, fox eat goose goose cannot left alone corn, goose eat corn farmer get three items market",
        "a digital fsm used control stoplights intersection two roads fsm two inputs, f, two outputs, l1 l0 output fsm used control stoplights fsm designed stoplights red one roads times road green light, controller show yellow light showing red light give drivers warning allow slow down finally, fairness, controller alternate green lights two roads",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "one could design game controller logic puzzle would buttons corresponding different operations could performed logic puzzle example, could button add new element puzzle, button remove element puzzle, button change value element puzzle game controller could also display would show current state puzzle player's progress",
        "the stoplight controller must ensure lights one roads red times similarly, road green light, controller show yellow light showing red light give drivers warning allow slow down finally, fairness, controller alternate green lights two roads",
        "what ideas used reduce number metrics some ideas used reduce number metrics include: identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "the purpose fsm control stoplight stoplight must red one roads times, controller show yellow light showing red light give drivers warning allow slow down controller also alternate green lights two roads",
        "the inputs fsm states two roads, outputs colors lights two roads fsm ensures lights one roads red times, lights road green fsm also alternates green lights two roads",
        "the fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "why two-level logic popular two-level logic popular simple map expressions cmos gates additionally, easy understand gate diagrams",
        "the state fsm split two pieces: 3-bit register 6-bit timer timer simply binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "1 three ranges possible measurement values given metric the three ranges possible measurement values given metric values equivalently useful, ordered interesting respect one another, impossible use practice",
        "interrupts priority exceptions interrupts generated external devices, exceptions generated processor itself interrupts also asynchronous, exceptions not",
        "the vending machine fsm designed control release items vending machine based user's purchase request fsm uses priority encoder determine item user requested, decoder generate individual item release signals",
        "the fsm five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs class, focus clocked synchronous fsm implementations, fsm's internal state bits stored flip-flops",
        "the coin accept bit item release bits used indicate whether coin accepted whether item released, respectively",
        "the transitions states well-defined fsm timer counts produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the numeric representation money held used track value money inserted machine allows machine keep track much money inserted reject coins value high",
        "the fsm responsible controlling stoplights busy intersection ensures lights always red one roads, green light always followed yellow light, green lights alternated two roads",
        "the fsm needs keep track loop index, current minimum value, progress serial comparator",
        "the fsm needs track state stoplight duration state",
        "the fsm responsible controlling stoplights busy intersection ensures lights one roads red times, road green light, controller show yellow light showing red light",
        "the output fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "a priority encoder type encoder generates signal whenever input lines active, encodes index highest active input two-bit unsigned number priority encoder used determine input lines highest priority",
        "what three ranges given metric the first range measurement values equivalently useful second range possible values ordered interesting respect one another values third range impossible use practice",
        "a decoder type logic circuit takes input signal produces one output possible value signal decoder similar multiplexer number inputs outputs however, decoder one input signal, multiplexer multiple input signals",
        "what difference sop pos sop (sum products) boolean algebra expression or anded terms, pos (product sums) expression and ored terms",
        "the main difference mux decoder mux multiple inputs one output, decoder one input multiple outputs mux used select one several input signals send output, decoder used interpret input signal produce several output signals",
        "a decoder logic circuit converts binary code set signals used operate device decoder takes input signal, typically one coded binary number, produces one output possible value signal decoder enabled (en=1), and gates produces one minterm input signal s decoder enabled (en=0), decoder produces 0 bits",
        "how multi-metric optimization useful engineering multi-metric optimization useful engineering allows engineers identify important metrics balance design effectively according them multi-metric optimization also allows engineers get rid many metrics possible focus important ones",
        "a decoder device converts coded signals usable information decoders used variety applications, error detection correction",
        "a decoder logic circuit converts coded inputs coded outputs, usually one output code input code decoders used variety applications, including data storage transmission, error detection correction, data compression",
        "a decoder similar mux allows one digital signal select several others forwarded output decoder one input multiple outputs, mux multiple inputs one output decoder thought special case mux",
        "a decoder logic device converts binary information form one code another, usually natural binary code multiplexer device selects one several analog digital input signals forwards selected input single output line",
        "a priority encoder type encoder assigns priority certain input signals used determine input signal given priority multiple input signals present",
        "a priority encoder type encoder assigns priority certain input signals priority encoder takes signal produces output signal indicates input signal highest priority output signal typically binary number used select one input signals",
        "a decoder logic circuit converts signals one form another binary form, decoder used convert binary number decimal number",
        "a priority encoder circuit takes number input signals, outputs code represents highest priority input signal output code usually binary number",
        "a mux logic block allows us use one digital signal select several others forwarded output decoder logic block converts binary code set signals",
        "the decoder generates release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "a decoder used context simplify expression logic function using decoder, function expressed two-level logic function, easier understand manipulate",
        "the value register price1 price first item machine, determined owner machine",
        "the value register price2 number nickels machine multiplied price item question way, machine keep track much money inserted much owed item",
        "the value register price3 price third item machine, determined owner machine",
        "the value register n corresponds number nickels inserted machine user inserts quarter, machine transition state n+5, indicating 5 nickels inserted user attempts purchase item without inserting enough money first, machine remain state reject request",
        "the value register equivalence class sum two 4-bit numbers case, sum 18, equivalent 2 (mod 16)",
        "what significance demorgan's law demorgan's law popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "the register price1 six bits allows machine keep track 315 (63 nickels)",
        "what difference two-level logic forms logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "the value register price2 number nickels inserted machine",
        "what reason popularity two-level logic the reason popularity two-level logic simple way express logic functions two-level logic popular way expressing logic functions simple way express logic functions",
        "what difference sop pos sop form two-level logic, pos form multi-level logic sop popular simpler manipulate expressions algebraically graphically",
        "the value v 10 cents dime inserted dime worth 10 cents, machine tracks value money inserted terms nickels therefore, dime inserted, machine records 2 nickels",
        "passage - two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams question - what two levels two-level logic",
        "the vending machine knows much item costs owner machine sets prices dynamically machine keeps track much money inserted multiple 5 cents (one nickel) expensive item machine might cost dollar two, fsm must track least 20 40 nickels value",
        "the vending machine keeps track much money inserted multiple 5 cents (one nickel) six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "the vending machine uses sensors detect coin inserted first sensor positioned dime pass beneath it, second sensor positioned coins pass front it signal second sensor used clock fsm, signal first sensor indicates whether coin dime quarter",
        "the vending machine releases item using decoder generate three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the vending machine knows purchase requested user pushes one item selection buttons causes priority encoder produce signal p indicating user trying make purchase",
        "the input fsm reset button r, four buttons b_f, b_x, b_g, b_c fsm produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs",
        "the output fsm position farmer, fox, goose, corn output either left bank right bank river game also two indicators: w reaching winning state, l reaching losing state",
        "the state represented fxgc, f position farmer, x position fox, g position goose, c position corn game five buttons: reset, cross alone, cross fox, cross goose, cross corn game stops player wins loses",
        "the next state fxgc=0101 farmer bank fox, corn, b_x b_c buttons ignored, leading next-state table right notice b_g accepted even b_c pressed farmer bank corn",
        "the player wins game getting four entities (farmer, fox, goose, corn) right bank river player makes mistake, game lose",
        "the player loses game able correctly answer question player gets question wrong, start game beginning",
        "the input fsm 3-bit register 6-bit timer timer used count produce output z=1 reaches 0 register used store state fsm",
        "the output fsm sequence red, yellow, green lights alternate two roads duration state determined signal f f 0, timer set state changes f 1, timer set state changes light one roads green",
        "the priority encoder used determine item user wants purchase, generate signal indicating user trying make purchase output priority encoder used select value one price registers, subtracted current number nickels stored register purchase successful, price subtracted number nickels item released",
        "the player loses game able get correct answer question player gets correct answer, win game",
        "when player loses, output fsm looks like red roads controller must ensure lights one roads red times",
        "the fsm handles multiple input events single clock cycle first storing input events queue fsm ready process input event, dequeues event queue processes it",
        "the outputs fsm states stoplights stoplights either red, green, yellow fsm controls duration light",
        "the purpose fsm control stoplights busy intersection fsm ensures lights one roads red times, road green light, controller show yellow light showing red light",
        "the signal f 1 timer reaches 0 state changes",
        "the state fsm split two pieces: {3-bit} register {6-bit} timer timer simply binary counter counts downward produces output z=1 reaches 0 notice register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle we thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the fsm ensures lights one roads red times keeping track state light light green, turn yellow red light red, stay red",
        "the fsm shows yellow light showing red light setting timer specific value state fsm changes value set signal f, calculated bottom fsm logic diagram",
        "the fsm alternates green lights two roads setting timer different value state fsm changes causes lights change color cycle-by-cycle basis, green light alternating two roads",
        "the signal f used set timer certain conditions particular, used set timer state changes",
        "the fsm initialized state \"000\" order ensure lights one roads red times timer set \"a\" order maintain new value number cycles",
        "the stoplight controller 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the stoplight controller ensures lights one roads red times using state machine six states states determined inputs fsm, states two roads output fsm controls lights two roads controller alternates green red lights two roads",
        "the stoplight controller shows yellow light showing red light order give drivers warning allow slow down",
        "the stoplight controller alternates green lights two roads changing value register s value changed timer reaches 0, timer set enters new state duration state determined value register s",
        "the signal f allows timer set conditions, addition state changes allows flexibility duration state",
        "starting human-based design process typically results design efficient effective one mapped high-level programming language human designers easily optimize design specific metrics, power consumption performance additionally, human designers easily impose constraints design, limits chip area minimum performance, order guide design process",
        "mapping bits gates means design circuit performs operation single bit passes necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "the control structure code maps high-level fsm design breaking program simple steps mapping step state fsm number states fsm depend number steps program",
        "the general model computer system execute set instructions, called program, store resulting data system set registers hold data instructions, set memory locations store data programs system also set input output devices allow interact outside world",
        "the purpose process find best formulation specific logic function given metric done using heuristic approaches find solutions strike balance various metrics cost, power, performance",
        "the two approaches fsm design state-transition table state diagram state-transition table lists possible states system in, state diagram shows sequence states system goes through state-transition table compact easier use comparing functions, state diagram intuitive easier understand",
        "the purpose notes introduce important abstraction logic design, use abstraction design ripple-carry adder ripple-carry adder adder adds single bit passes necessary information another copy itself design less efficient designs optimized specific purpose, simplicity approach makes tradeoff interesting one",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "a finite state machine model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called transition rule",
        "a computer machine programmed carry set arithmetic logical operations automatically fsm model behavior composed finite set states, transitions states, actions",
        "one way transform code written high-level language fsm use compiler compiler program translates code written high-level language code run computer another way transform code written high-level language fsm use interpreter interpreter program executes code written high-level language",
        "the control structure code maps high-level fsm design breaking program simple steps, one step flow chart may sometimes require one state fsm similarly, one fsm state may able implement several steps flow chart, steps performed simultaneously",
        "one design fsm executes simple pieces flow chart breaking program smaller steps mapping step state fsm one also use registers counters implement variables program, use comparator implement test statement",
        "the general model computer turing machine mathematical model computer used simulate computer",
        "one way build fsm allows pieces executed specified fsm built use state machine output routed different inputs allows fsm configured execute different pieces code based input another way build fsm allows pieces executed specified fsm built use state machine multiple states executed parallel allows fsm configured execute different pieces code parallel based input",
        "the problem code trying solve halting problem halting problem problem cannot solved turing machine problem given turing machine input turing machine, possible determine whether machine finish computing finite number steps",
        "what difference sop pos sop pos two forms two-level logic sop, output true inputs true pos, output true inputs true",
        "the array notation code means code trying convert input user appropriate result, store result memory address given next argument",
        "1 difference two-level three-level logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic three-level logic way expressing logic functions using three levels three levels refer number functions input passes reach output, sop pos forms examples three-level logic",
        "the idx variable used keep track number operations logic expression metric used estimate number transistors needed design, turn estimate area required design",
        "the min variable heuristic metric used estimate time needed compute function metric based longest chain operations performed instance variable rationale metric gate outputs change instantaneously inputs change",
        "the flow chart represents steps taken designing new product first step think carefully metrics possible interest second step get rid many metrics possible third step identify metrics practical impact current technology fourth step set threshold values metrics simplify reasoning them fifth step eliminate redundant metrics sixth step calculate linear sums reduce count metrics seventh step make use notion pareto optimality",
        "what reason popularity two-level logic the popularity two-level logic due fact simple way express logic functions additionally, two-level logic easy map cmos gates",
        "there three variables used code, x, y, z value x initialized 42, value initialized x value z initialized"
    ],
    "66": [
        "a gray code sequence n-bit patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit construct gray code recursively follows: (n+1)-bit gray code, write sequence n-bit gray code, add 0 front patterns sequence, append second copy n-bit gray code reverse order, put 1 front patterns second copy",
        "there several benefits using fsm one benefit fsm used implement wide range logic functions another benefit fsm used construct larger memories multiple smaller memories finally, fsm used reduce number pins needed chip",
        "a gray code sequence patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit construct gray code recursively follows: (n+1)-bit gray code, write sequence n-bit gray code, add 0 front patterns",
        "multiple chips used construct wider memories connecting address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used construct larger memories using multiple chips connecting external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used construct wider memories connecting data inputs outputs multiple memories together allows output line shared one memory without need additional multiplexers",
        "one way construct wider memory use multiple chips connect data inputs outputs chip separately way, left chip handles high n bits input writes produces high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way construct larger memory use multiple chips one address bits drive decoder determines two chips active decoder enabled chip select signal larger memory way, neither chip enabled external cs low",
        "dram type capacitive storage, bit stored charging charging capacitor capacitor attached bit line transistor controlled select line select line high, capacitor isolated holds charge however, transistor's resistance finite, charge leaks onto bit line charge also leaks substrate transistor constructed",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "prof chris schmitz prototyped constructed physical elements help ece shop designed vending machine application fsm, prof doug jones created wiki documentation altera quartus portions lab casey smith, head guru ece instructional labs, developed new debounce design made changes improve robustness",
        "passage - compact approaches comparing functions, solutions subject later class (such ece 462) {two-level logic} { two-level logic} popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams begin one demorgan's laws, illustrate algebraically graphically: c = b+a = {file=part2/figs/demorgan-nandeps,width=095in} let's say function expressed sop form, z=abc+de+fghj diagram left shows function constructed three and gates or gate using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate invert point along wire, slide bubble wire output first column",
        "the design process digital fsm includes six steps: developing abstract model, specifying i/o behavior, completing specification, choosing state representation, calculating logic expressions, implementing flip-flops gates",
        "the first examples passage two-level logic, demorgan's law, sop form two-level logic popular way expressing logic functions, demorgan's law way simplify expressions sop form way representing logic function",
        "an fsm must initialized ensure starts known state avoid undefined behavior without initialization, fsm may produce incorrect results may work all",
        "a multiplexer digital logic block allows one digital signal select several others forwarded output simplest form multiplexer 2-to-1 multiplexer, two inputs left one top top input allows us choose left inputs forwarded output",
        "the choice representation fsm's internal state affects complexity implementation terms number states, number inputs, number outputs, number transition rules",
        "the design process digital fsm typically consists six steps: (1) developing abstract model, (2) specifying i/o behavior, (3) completing specification, (4) choosing state representation, (5) calculating logic expressions, (6) implementing flip-flops gates",
        "the design process involves manipulation logic expressions order optimize specific metrics, cost, power, performance today, manipulation performed almost entirely computers, human engineers supplying logic functions interest imposing constraints process",
        "an abstract model mathematical model used describe system usually simplified include details system",
        "an fsm must initialized ensure starts known state allows fsm function correctly avoid potential problems could arise unknown starting state",
        "a multiplexer device allows multiple signals routed onto single channel done selecting one several input signals connecting output multiplexers used variety applications, telecommunications computer networking",
        "from passage, seems digital fsm designed abstract model first identifying finite set states, set possible inputs, set possible outputs, set transition rules then, fsm implemented digital system representing states patterns using fixed number bits, translating inputs bits, translating outputs bits finally, transition rules defined given state fsm pattern input bits, transition defined state another state",
        "a fsm implemented digital system, states represented patterns using fixed number bits, inputs translated bits, outputs translated bits transition rules must complete, meaning given state fsm pattern input bits, transition must defined state another state outputs digital fsm calculated using boolean logic expressions",
        "the design process counter number states power two choose representation states makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "the fsm initialized one six states desired loop ensures lights roads red cars waiting one roads",
        "the choice representation fsm's internal state affects complexity implementation states represented bit patterns, transition rules must complete states represented abstract states, outputs state must specified",
        "the first step design process develop abstract model model translation human language description model states desired behavior model particularly thorough exact stage",
        "the second step design process think carefully metrics possible interest set metrics feel complete, next step get rid many can",
        "the third step design process identify metrics practical impact current technology, set threshold values metrics simplify reasoning them, eliminate redundant metrics, calculate linear sums reduce count metrics, and, finally, make use notion pareto optimality",
        "the fourth step design process choose particular design set possible designs making choice, engineers typically consider variety factors, including cost, performance, manufacturability, reliability",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "the first step design process develop abstract model model captures intent description particularly thorough exact",
        "the third step design process evaluate design using multiple metrics includes identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "the fourth step design process choose particular design set possible designs choice made based number factors, including objectives design, constraints problem, preferences designer",
        "abstraction process simplifying complex system identifying important aspects system ignoring rest context implementation, abstraction used simplify design identifying important features design ignoring rest make design manageable easier understand",
        "there reasons important make implicit assumptions clear design process first, assumptions made clear, lead confusion misunderstanding among team members working design second, making assumptions explicit help ensure everyone page working towards goal finally, explicit assumptions help prevent errors mistakes design process",
        "the choice state representation affects implementation fsm terms number gates inverters required, well delay overall design serial comparator design based 2-bit slice variant, example, requires 24 gates 10 inverters, much larger earlier serial design terms gate delays, however, new design identical, meaning comparisons finished half time realistic area timing metrics show slightly difference two designs differences dominate results design carefully considered",
        "the choice fsm's input output behavior affects design process determining set possible states set possible outputs set possible states determined set possible inputs, set possible outputs determined set possible outputs",
        "one important reason compatibility components digital system helps ensure system function correctly components compatible, system may work correctly, may work all additionally, compatibility among components help reduce cost manufacturing system, well cost maintaining repairing system",
        "a gray code counter device used count number operations logic expression device works counting number variables expression adding number operations device used optimize logic expressions reducing number operations needed implement logic function",
        "the inputs gray code counter current state counter clock signal clock signal triggers state change counter",
        "the transition diagram two-bit gray code counter loop counter moving one state next cycle state diagram marked internal state value s_1s_0 (before ``/'') output z_1z_0 (after ``/''), always equal counter",
        "the implementation gray code counter developed first filling k-maps next-state values, deriving algebraic expressions next-state logic used develop implementation",
        "the inputs counter coins inserted machine machine track value coins terms nickels reject coins inserted would cause value exceed maximum value machine track",
        "a gray code counter type digital counter used count number clock pulses named frank gray, invented code 1953 main advantage gray code counter types counters less likely produce errors counting",
        "a gray code counter type counter uses gray code, cycle bit patterns certain length consecutive patterns differ exactly one bit regular counter type counter use gray code",
        "the timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle states thus act like counter",
        "the output counter number successful conversions made scanf function",
        "a gray code counter type counter cycles possible bit patterns certain length states transition diagram gray code counter form loop, counter moving one state next cycle state diagram marked internal state value output value, always equal counter",
        "there benefits using gray code counter first, easy design implement second, easy check correctness logic third, easy read understand logic",
        "a gray code counter used applications digital value must changed incrementally least number steps gray code counter changes one bit time, minimizes number digital values must changed",
        "a gray code counter type digital counter uses gray code generate output input gray code counter digital signal represents number clock pulses applied counter output gray code counter digital signal represents number clock pulses applied counter, plus one",
        "a gray code counter designed first creating transition diagram shows states outputs counter next, next-state logic developed creating k-maps next-state values deriving algebraic expressions finally, next-state logic implemented diagram",
        "the internal state value third bit gray code counter s_2s_1s_0=001 hold=1, next-state logic s_1^+ s_0^+ reduces s_1^+=s_1 s_0^+=s_0; words, counter stops counting simply stays current state hold=0, equations become s_1^+=s_0 s_0^+={{s_1}}, produces repeating sequence s_1s_0 00, 01, 11, 10, desired",
        "the output third bit gray code counter would either 0 1 input 0, output 1 input 1, output 0",
        "the next state value s2 0 timer set state changes, find duration state analyzing muxes bottom mux selects s_2=0, selects output top mux s_2=1",
        "the next state value s0 0 timer set state changes, find duration state analyzing muxes bottom mux selects s_2=0, selects output top mux s_2=1 top mux selects b s_0=1, selects c s_0=0",
        "the fully-specified transition diagram three-bit gray code counter follows: the states counter form loop, counter moving one state next cycle each state diagram marked internal state value s_2s_1s_0 (before \" / \") output z_2z_1z_0 (after \" / \") based transition diagram, next-state values s_2^+, s_1^+, s_0^+ filled shown",
        "the next-state values three-bit gray code counter follows: s_2^+=0, s_1^+=s_0, s_0^+={{s_1}}",
        "the next-state logic three-bit gray code counter follows: s_2^+ = s_2 + s_0 s_1^+ = s_2 s_0^+ = s_2 s_1",
        "the implementation diagram three-bit gray code counter logic diagram shows inputs, outputs, next-state logic counter diagram ordered left right {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2, makes easy read check correctness",
        "the vertical lines carrying current state values inverses back next state logic inputs ordered left right (on left side figure) {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2",
        "adding third bit gray code counter increases design complexity requires additional carry bit carry bit must propagated adder bit slice logic, increases number logic gates required overall complexity design",
        "one way reduce design complexity make use common algebraic terms sub-expressions help simplify design make easier understand another way reduce complexity use demorgan's laws simplify expression help reduce number gates needed make design efficient",
        "it important reasonable order designing logic diagram help simplify design process make easier understand function logic diagram additionally, help ensure logic diagram compatible products may used system",
        "the counter's implementation diagram simplifies understanding diagram breaking smaller, manageable pieces this, easier see various parts diagram interact other additionally, makes easier identify potential problems areas improvement",
        "the purpose vertical lines carrying current state values inverses back next state logic inputs ensure state fsm always consistent necessary safety reasons, fsm must always ensure lights one roads red times",
        "the color mapping three-bit rgb encoding system system colors represented combination red, green, blue light color mapping system shown right imagine charged creating counter drive light sequence colors",
        "the light red one roads times road green light, controller show yellow light showing red light give drivers warning allow slow down finally, fairness, controller alternate green lights two roads",
        "from passage, inferred logical completeness necessarily help efficient design logic functions words, single boolean logic function expressed many different ways therefore, important engineers learn develop efficient implementation function, well determine whether two logic expressions identical without actually writing truth tables",
        "the next-state values s_2, s_1, s_0 given table right states act like counter, examining connections, derive equations next state draw transition diagram six states loop defined next-state logic, two remaining states converging loop single cycle",
        "the equation s_2^+ follows: s_2^+ = + b + c, carry bit, b first bit added, c second bit added overflow occurs, s_2^+ = c",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills students learn coming months",
        "yes, choose use counter's internal state directly output values colors need produce outputs unique bit patterns using counter's internal state directly output values, simplify design",
        "a fully-specified transition diagram diagram specifies states system in, well transitions states allows clear understanding behavior system",
        "a karnaugh map graphical representation boolean function helps simplify function map consists grid squares, corresponds possible combination input values map used find groups product terms implicants function",
        "the next-state logic equations functions describe relationship current state system next state system functions represented either sop pos form demorgan's law used simplify functions replacing or gates nand gates, and gates nor gates",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways, learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills start learn coming months",
        "the color mapping three-bit rgb encoding system colors produced unique bit patterns states form loop, marked internal state value s_2s_1s_0 output rgb",
        "the desired pattern one represents number 2's complement representation 2's complement representation defined choosing set integers balanced around zero groups so, want represent number 2's complement representation, need choose pattern represents number representation",
        "the transition diagram color sequencer loop six states, two remaining states converging loop single cycle lights red states, necessary safety timer set state changes, duration state calculated analyzing muxes",
        "the initial state three flip-flops implementation 0s 1s use init input choose normal operation (init=0) fsm forcing fsm next state given i_2i_1i_0 (when init=1)",
        "the timer set 0, state fsm changed next state sequence new state fsm determines duration next state, timer set accordingly",
        "the passage states power consumption important metric engineers must take account designs however, cases, desktop high-end server processors, metrics (such performance) may important always want operate edge interesting range could going wrong, engineers taking power consumption account much be",
        "one possibility fsm resetting properly, starts unexpected state another possibility race condition fsm, get unexpected state inputs change quickly",
        "the purpose adding and gates input create logic function efficient terms area power done reducing number variables expression",
        "the issue fsm getting unexpected states cause output circuit glitch problematic applications stable output required",
        "the fsm get unexpected states inputs set properly example, input set 111, fsm stay white state indefinitely",
        "the initial state three flip-flops implementation 0 state explicit mechanism initialization forces flip-flop 0 state alternatively, could add extra logic design would allow us force fsm specific state next cycle",
        "the first approach use flip-flop design add single bit pass necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "interrupts powerful exceptions occur asynchronously respect program means processor check interrupts instructions, allows flexibility design processor",
        "the light sometimes glows cyan red briefly appearing white controller must ensure lights one roads red times similarly, road green light, controller show yellow light showing red light give drivers warning allow slow down",
        "one possibility fsm resetting properly, start expected initial state another possibility race condition fsm, reach unexpected state inputs change quickly",
        "the initial state three flip-flops unknown unless explicit mechanism initialization initialization work two ways first approach makes use flip-flop design know, flip-flop built pair latches, make use internal reset lines latches force flip-flop 0 state (or 1 state) using additional input alternatively, add extra logic design",
        "one way make use internal reset lines latches force flip-flop 0 state done connecting reset lines latches 0 voltage source",
        "the passage discusses design serial comparator using bit-sliced approach approach leads design 24 gates 10 inverters, much larger earlier serial design however, new design identical terms gate delays, meaning comparison finished half time",
        "an abstract model simplified representation system, typically used aid understanding system context logic optimization, abstract model used help understand tradeoffs different logic expressions",
        "there four states second version table states a, b, c, d b on state, c off state",
        "the second version table implies buttons placed ergonomic way possible buttons close together enough space buttons edge table",
        "the design counter includes eight states, three state bits used keep track current state choice representation fsm's states dramatically affect design complexity right strategy thus often start selecting representation makes sense human, even requires bits strictly necessary",
        "the two states first column table states fsm f=0 case, timer set state changes, find duration state analyzing muxes",
        "the four counting states are: 1) state a: timer set s_2=0 duration state a 2) state b: timer set b s_0=1 duration state b 3) state c: timer set c s_0=0 duration state c 4) state d: timer set s_2=1 duration state d",
        "there four halted states: halt a, halt b, halt c, halt d states, counter retains current value user presses \"go\" button",
        "pressing ``halt'' button nothing counter halted counter remains state ``go'' button pressed",
        "pressing ``go'' button causes counter start counting",
        "an fsm finite state machine, mathematical model computation used design computer programs digital logic circuits abstract machine one finite number states",
        "there disadvantages using fsm first, fsm designed carefully, hard understand debug second, fsm use resources simpler design, state machine finally, fsm difficult change extend simpler design",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "the input behavior machine based type coin inserted selection item purchase user inserts coin nickel, machine reject coin remain state user inserts nickel, machine transition next state accept coin user selects item purchase, machine release item user inserted enough money otherwise, machine remain state",
        "the output behavior add3 procedure takes three integers arguments, adds together, returns sum procedure called constants 10, 20, 30, result printed calling convention, call made, r0 must contain value 10, r1 value 20, r2 value 30",
        "the ``halt'' button ice cream dispenser stops machine dispensing ice cream useful user wants stop machine dispensing ice cream, machine malfunctioning needs stopped",
        "the \"go\" button initiates system call causes processor enter kernel mode execute instructions associated system call instructions part operating system used perform desired action, printing character console",
        "the two-bit gray code sequence two-bit patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit",
        "there two control buttons: one east-west road one north-south road",
        "the states transition diagram represent different colors stoplight first two states red, followed yellow, green last two states red",
        "the uninterrupted counting cycle represents duration state fsm used calculate duration state fsm f=0",
        "system calls initiated trap instruction, system calls also known traps many architectures, system call places processor privileged kernel mode, instructions implement call considered part operating system",
        "the purpose using gray code create sequence patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit",
        "the design continues choosing state representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "if use gray code, would compare two expressions determine whether represent logic function would test logical equivalence, important part hardware design however, tools today provide help problem, necessary use gray code",
        "if user presses \"go\" button state {count a}, outputs c_l=11 c_m=01 means user get one half servings lychee half serving mango",
        "there explicit answer question passage however, based information given, seems user presses ``halt'' button state { count a}, system reset state { halt a}",
        "there two possible outcomes user presses ``go'' button state { halt a} first outcome fsm moves state { count b}, next state sequence second outcome fsm resets state { count a}, initial state",
        "there possible ways answer question one way would say user presses ``halt'' button state { halt a}, system reset state { count a} another way answer question would say user presses ``halt'' button state { halt a}, system remain state { halt a}",
        "there two possible ways user could press buttons state { halt a} first way user could press \"halt\" button \"go\" button case, fsm would move state { halt a} state { count b} second way user could press \"go\" button \"halt\" button case, fsm would move state { count b} state { halt a}",
        "if user presses \"go\" button (hg=01), ice cream cup overflow outputs c_l=11 c_m=10, means dispenser release full serving flavor, two servings total",
        "if ``halt'' button pressed (hg=10), counter remains halted state { halt a} buttons pressed (hg=11), ``halt'' overrides ``go,'' nothing special alone pressed counter halted thus, input patterns hg=10 hg=11 also take state { halt a} back itself",
        "if user presses buttons (hg=11), ice cream cup overflows outputs c_l=11 c_m=10, dispenser releases full serving flavor, two servings total",
        "if \"halt\" button pressed (hg=10), logic outputs c_l=00 c_m=00, dispenser gives ice cream buttons pressed (hg=11), outputs c_l=11 c_m=11, dispenser gives two servings flavor, four servings total",
        "the design counter completed applying decisions made { count a} state counting states, decisions made { halt a} state halted states results design states labeled internal state outputs (s_2s_1s_0/z_1z_0)",
        "one important reason consider possible input conditions possible states help ensure design correct example, design ever receives input values within certain range, possible design actually correct input values considering possible input conditions help catch errors like this another reason consider possible input conditions help optimize design example, design ever receives input values within certain range, possible simplify design make efficient considering possible input conditions help identify opportunities optimization",
        "a transition diagram help process helping identify important metrics helping balance design effectively according metrics",
        "the state table form specification make missing parts specification obvious showing different states system transitions states help identify parts specification missing needs added order complete specification",
        "if user presses \"go\" button (hg=01), machine dispense one half servings lychee half serving mango",
        "if ``halt'' button pressed (hg=10), counter remains halted state buttons pressed (hg=11), counter also remains halted state",
        "the fsm needs least three states order eight states three possible items purchased, item purchased one two ways (with without enough money)",
        "when turing machine given input, either finishes finite number steps, not finish finite number steps, machine said \"halted\"",
        "a counter \"counting\" process incrementing, counter \"halted\" incrementing",
        "the choice representation fsm's states affect design complexity determines many bits needed represent state bits needed represent state, design complex",
        "the right strategy choosing representation start selecting representation makes sense human, even requires bits strictly necessary make design process simpler efficient long run",
        "the choice state representation affects design complexity ways first, affect number bits needed represent states second, affect number possible states represented third, affect number transitions need considered designing state machine",
        "the right strategy start selecting representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "one reason often best start selecting representation makes sense human easier understand work with additionally, starting representation makes sense human help ensure final product also easy understand use",
        "abstraction powerful tool help simplify complex problems selecting state representation, abstraction help identify important aspects problem ignore irrelevant details make easier find solution effective efficient",
        "abstraction selecting state representation lead better design allowing engineer focus important aspects problem ignoring details important help simplify problem make easier find solution",
        "the number state bits affects design complexity determines number possible states fsm in larger number state bits means possible states design must able handle them",
        "abstraction important selecting state representation allows designer select representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "one reason important start representation makes sense human humans must supply logic functions interest, must program acceptable transformations equivalent forms second reason complexity problem good way introduce real engineering finally, contextual information help develop better understanding finite state machines higher-level abstractions form core digital systems still defined directly humans today",
        "abstraction selecting representation impact design metrics reducing number metrics need considered simplify process designing solution make easier find optimal solution",
        "hold 1 counter count state s_2=0 counter already halted press \"go\" button",
        "hold = h + s_2 when counter halt state s_2=1, hold = 1 counter stop (move halted state without changing value) h true, halted states, s_2=1, counter stops (stays halted state) h+ true",
        "the value s_2 counter count state hold=0 undefined because, passage states, overflow occurs either operands negative operands positive operands negative, resulting sum equal c however, operands positive, resulting sum less c thus, impossible determine value s_2 without knowing values operands",
        "s_2 1 counter halt state hold=1 s_2=1, counter halted, hold=1, counter retain current value",
        "the value s_1s_0 counter count state hold=1 01",
        "the hold variable used save energy chip finishes work, turn off, saving energy variable allows chip turn finished, saving energy",
        "the value hold counter counting 0 value hold counter halted 1",
        "the value hold counter halted value last input given machine",
        "the value hold determines whether counter counts determining whether counter hold current value (stop counting) ``halt'' button pressed counter already halted ``go'' button pressed",
        "the next-state logic s_1^+ s_0^+ hold=0 follows: s_1^+ = s_0 + hold s_0^+ = s_1 + hold",
        "the hold variable simplifies design allowing designer separate logic deciding whether advance counter fairly cleanly logic advancing counter itself hold bit diagram used determine whether counter advance current cycle",
        "the similarity equations s_1^+s_0^+ equations {2-to-1} mux used represent logic function two-level logic popular way expressing logic functions simple map expression cmos gates using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate",
        "the use s_2 separates logic deciding whether advance counter allowing counter halted state (s_2=1) counting state (s_2=0) hold=1, counter retains state, hold=0, counts",
        "f two effects operation fsm first, prevents timer reset enters new state effect lengthening duration state second, prevents fsm entering loop defined next-state logic effect halting fsm current state",
        "abstraction used build three-bit gray code counter two-bit design using copies bit-sliced adder circuit approach less efficient designing circuit specifically three-bit gray code counter, simpler",
        "the state representation used determine next state fsm done examining inputs fsm deriving equations next state states fsm act like counter, examining connections, next state determined",
        "there several benefits good state representation first, help reduce number pins needed chip second, improve density memory chip third, improve speed memory chip",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor performance cases, bad state representation also lead increased costs fabrication testing",
        "one way verify implementation correct test known set inputs compare results expected results results match, implementation likely correct another way verify implementation examine code look errors done manually help software tool",
        "a good state representation easy understand able capture relevant information problem bad state representation may difficult understand may able capture relevant information",
        "the state representation significant impact overall design system affects way system behaves interacts environment well-chosen state representation simplify design system make efficient",
        "the states fsm act like counter, value fsm set whenever state changes timer set state changes, duration state determined value timer fsm also set conditions, signal f calculated",
        "a good state representation important help reduce number logic gates needed design, thus save chip area additionally, good state representation help improve performance design reducing number logic operations needed",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor power consumption cases, two metrics may strongly correlated, meaning design good one metrics frequently also good metric",
        "one way improve bad state representation make compact done using two-level logic instead three-level logic another way improve bad state representation make readable done using clear consistent naming conventions",
        "the state representation impacts fsm determining duration state timer set whenever state changes, duration state determined muxes bottom mux selects s_2=0, selects output top mux s_2=1 top mux selects b s_0=1, selects c s_0=0",
        "a bad state representation lead number problems, including wasted engineering effort, poor performance, even product cancellations",
        "a bad state representation fixed using code larger hamming distance enable system detect correct errors",
        "there best state representation fsm important factor representation complete, meaning states represented inputs accounted for considerations include size state space number inputs outputs",
        "a good state representation important help reduce number transistors needed design, thus save space energy additionally, help improve performance design making easier computer manipulate logic expressions",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context",
        "the common types memory used digital systems sram dram sram used high-speed applications processor caches embedded designs dram used applications less demanding speed requirements",
        "one build static rams using logic using tri-state buffers tri-state buffers used create larger memories using multiple chips wider memories also created using multiple chips",
        "tri-state buffers used provide logical disconnection tri-state buffer output logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "memory chips combined provide larger wider memories using multiple chips example, two 2-bit memories used implement 4-bit memory one address bits used drive decoder determines two chips active (cs=1) decoder enabled chip select signal larger memory, neither chip enabled external cs low, desired",
        "the two common types memory used digital systems static random access memory (sram) dynamic random access memory (dram) sram used high-speed applications processor caches embedded designs, dram used applications less demanding speed requirements, main memory computers",
        "one build memories using logic creating tri-state buffer logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "a tri-state buffer type digital logic device used either connect disconnect signal line power source ground achieved using two transistors, one connect signal line power source, connect signal line ground buffer enabled, transistors turned on, signal line connected either power source ground, depending value input signal buffer disabled, transistors turned off, effectively disconnecting signal line power source ground",
        "one way combine memory chips use multiple chips implement larger memory done using one address bit drive decoder determines two chips active another way combine memory chips use multiple chips implement wider memory done routing external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one builds memories (static rams) using logic connecting dual-inverter loop opposing bit lines transistors controlled select line select high, transistors connect inverter loop bit lines writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "a tri-state buffer logic circuit used disconnect output logic circuit achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "one way combine memory chips use create larger memory done using one address bit drive decoder determines two chips active address bits, well external data inputs write enable signal, delivered memories external data outputs also connected memories another way combine memory chips use create wider memory case, chips either active inactive time, external address, write enable, chip select inputs routed chips however, data inputs outputs separate, chip handling different part data",
        "dynamic rams memories use charged capacitor store bit charge drains time must replaced, giving rise qualifier ``dynamic'' dram also unavailable recharging capacitors, problem applications stringent real-time needs",
        "random access memories (rams) memories support two operations: writing data element, reading data element memories also volatile, means data held memory erased electrical power turned fails static random access memory (sram) used high-speed applications processor caches embedded designs",
        "the addressability computer memory number bits stored element memory size elements memory vary single binary digit, bit, byte (8 bits) more typically, data elements larger byte referred words, size word depends context",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors, dram cell uses one transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "to write data memory element, external circuit sends signal memory indicating address element written data written sent memory, memory stores data element specified address",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context element memory assigned unique name, called address, allows external circuit identify particular element interest addresses unlike street addresses use send letter unlike street addresses, however, memory addresses usually little redundancy; possible combination bits address identifies distinct set bits memory",
        "a chip select input input chip allows chip turned off input used save energy turning chip needed",
        "a word context computer memory sequence bits represents unit data words represent numbers, characters, data types size word typically determined computer's word size, number bits computer process time",
        "non-volatile memories include magnetic optical storage media dvds, cd-roms, disks, tapes, capacitive storage media flash drives, programmable logic devices",
        "a ram type memory used store data volatile memory, means data stored memory erased power turned fails ram random access memory, means time required access element memory independent element accessed",
        "sram faster dram, dram denser (has bits per chip area) substantial part dram density due transistor count: typical sram cells use six transistors (two inverter, two connect inverters bit lines), dram cells use single transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "a computer memory storage device data two main types memory: sram dram sram faster expensive, dram slower cheaper dram commonly used main memory computers",
        "data elements computer memory stored either static random access memory (sram) dynamic random access memory (dram) sram uses active logic form two-inverter loop maintain stored values, dram uses charged capacitor store bit",
        "the addressability computer memory number bits stored element memory size elements memory vary single bit byte more typically, data elements larger byte referred words, size word depends context",
        "words computer memory stored bits, either 0 1 group bits makes byte, smallest unit data stored computer memory group bytes makes word, smallest unit data read written computer memory",
        "a random access memory (ram) type memory allows data stored retrieved order ram volatile, means loses data power supply removed two types ram: static ram (sram) dynamic ram (dram)",
        "static random access memory used high-speed applications processor caches embedded designs sram bit density significantly lower dram bit density, applications less demanding speed requirements use dram",
        "an sram cell flip-flop made two cross-coupled inverters output one inverter connected input other, vice versa power applied, sram cell one two stable states, represent 0 1 state cell changed applying correct sequence voltages inputs",
        "sram cells combined bit slice sharing bit lines analog read write logic bit slice figure thought 16-address, 1-bit-addressable memory (2^4b) cells bit slice share bit lines analog read write logic, appears right figure",
        "a chip select input used enable disable chip input used save power turning chip needed",
        "the main advantage sram dram speed sram faster dram need refresh memory cells often dram denser sram, store data given area",
        "sram cells store data using dual-inverter loop writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "a read operation performed sram cell first bringing bit line intermediate voltage level, raising select line allows capacitor either pull small amount charge bit line push small amount charge onto bit line resulting change voltage detected sense amplifier",
        "a write operation sram cell performed charging charging capacitor capacitor attached bit line transistor controlled select line select low, capacitor isolated holds charge however, select high write operation, logic driving bit line forces charge onto capacitor removes charge it",
        "sram type memory used computers made number transistors store data way easy computer access sram faster types memory, also expensive",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors (two inverter, two connect inverters bit lines), dram cell uses single transistor",
        "a sram cell organized flip-flop, one transistor one capacitor per bit capacitor stores data bit, transistor controls access bit",
        "sram cells combined bit slice sharing bit lines analog read write logic decoder sets one cell's select line high enable read write operation cell chip select input cs drives enable input decoder, none memory cells active chip select low (cs=0), exactly one memory cells active chip select high (cs=1)",
        "a write operation sram cell performed bringing bit line intermediate voltage level, raising select line, allows capacitor either pull small amount charge bit line push small amount charge onto bit line resulting change voltage detected sense amplifier end bit line",
        "the main benefit using tri-state buffer allows logical disconnection buffer output means multiple memories share output line without need additional multiplexers",
        "a tri-state buffer achieves logical disconnection using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "the decoder memory chip responsible translating memory address correct location memory chip necessary ensure correct data read written correct location memory chip",
        "tri-state buffers used reduce number pins needed chips combining inputs outputs allowed chip designers halve number pins needed",
        "a tri-state buffer type digital logic circuit used either connect disconnect signal line power supply ground done using two transistors, one connect signal line power supply, connect signal line ground buffer enabled, transistors turned on, signal line connected either power supply ground, depending value input signal buffer disabled, transistors turned off, signal line effectively disconnected power supply ground",
        "a tri-state buffer digital circuit used either connect disconnect output signal line buffer three states: high, low, high impedance buffer high state, output connected signal line copies signal input buffer low state, output disconnected signal line buffer high impedance state, output effectively disconnected signal line",
        "the benefit using tri-state buffer allows logical disconnection tri-state buffer output means output shared one memory without need additional multiplexers useful creating larger memories combining multiple chips",
        "a tri-state buffer digital circuit used either connect disconnect signal circuit buffer three states: high, low, high impedance high impedance state effectively disconnects signal circuit allows multiple memories share output line without need additional multiplexers",
        "a tri-state buffer used create electrical connection tri-state buffer output logical disconnection achieved using outer transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "tri-state buffers used reduce number pins needed chip combining inputs outputs example, data inputs outputs memory combined single set data wires, bidirectional signals reduces number pins needed still allowing amount data transferred",
        "the main difference sram dram sram faster uses transistors, dram slower uses fewer transistors dram also denser sram, meaning bits stored given area",
        "a dram cell stores bit using charged capacitor charge capacitor drains time must replaced order maintain stored value",
        "a sense amplifier circuit used read data stored memory cell sense amplifier amplifies small signal memory cell converts digital signal read processor",
        "a row natural basis refresh cycle dram data pins provide bidirectional signals reading writing elements dram output enable input, oe, controls tri-state buffers dram determine whether dram drives data pins we input, controls type operation, also present",
        "sdram type dram used main memory computers ddr4 sdram newer type dram faster sdram",
        "dram used storing data capacitor capacitor attached bit line transistor controlled select line select line low, capacitor isolated holds charge however, transistor's resistance finite, charge leaks onto bit line",
        "dram type memory uses capacitors store data row dram selected, cells row read written back, refreshes data cells dram said destructive reads read operation brings voltage capacitor closer intermediate voltage level, effectively destroys data cell",
        "the benefits using dram denser sram uses fewer transistors makes dram ideal applications size important speed",
        "there several disadvantages using dram first, dram slower sram second, dram less dense sram, requires chip area store amount data finally, dram cells complex sram cells, difficult design manufacture",
        "dram type memory slower sram denser (has bits per chip area) dram cells use single transistor, sram cells use six transistors dram designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor count",
        "a dram cell refreshed reading contents writing back active logic process necessary avoid data loss due charge leakage capacitor",
        "a sense amplifier device used amplify signal sensor typically used amplify signal small sensor, pressure sensor, level read larger device, computer",
        "the ras signal indicates row component address available raising ras signal row destructively reads contents cells row, forcing cells rewritten effecting refresh row thus natural basis refresh cycle",
        "the column address strobe (cas) input used indicate address components available used control type operation (read write)",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, problem solved",
        "the lab simulates two-level logic used map expression cmos gates also shows graphically manipulate expressions understand gate diagrams",
        "the fsm stoplight controller ensures lights one roads red times controller also alternates green lights two roads",
        "the vending machine application fsm designed team engineers fsm designed control simple vending machine accepts us coins payment offers choice three items sale machine adjustable item prices, fsm needs keep track much money inserted order decide whether user purchase one items",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, servo held place, desired",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab",
        "juan jos'e jaramillo identified common failure modes, including variability caused sunshine windows eceb, made changes improve robustness also created powerpoint slides typically used describe lab lecture",
        "prof doug jones designed vending machine application fsm first identifying different states machine could in created state diagram showed machine would transition one state another finally, implemented fsm hardware using altera quartus software",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab based lab earlier mentor graphics work prof herman prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "prof kindratenko helped scale design way made possible deliver 400 students entering ece every semester creating wiki documentation altera quartus portions lab also helped improve robustness lab identifying common failure modes making changes design",
        "jaramillo later identified common failure modes, including variability caused sunshine windows eceb, made changes improve robustness also created powerpoint slides typically used describe lab lecture",
        "a signal used set timer f 0, timer set state changes",
        "this synchronous fsm implemented digital logic fsm finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs",
        "the first optical sensor used detect presence chip chip present, sensor turns chip used chip present, sensor turns chip cannot used sensor used save energy turning chip needed",
        "the second optical sensor used detect chip finishes work chip turn save energy metric used guide process optimizing logic expressions balance struck different metrics involved",
        "if rise fall rising clock edge, processor would able recognize interrupts instructions would cause program terminate unexpectedly",
        "the device used turn save energy done using heuristic approaches find solutions strike balance different metrics, cost, power, performance human engineer impose constraints, limits chip area limits minimum performance, order guide process",
        "to use device, user presses one buttons user presses one button, device produces lychee ice cream user presses blend button, device produces blend user presses mango button, device produces mango ice cream",
        "the signal indicates interrupt occurred interrupt could generated external device, disk drive keyboard, error program executed, undefined instruction attempt divide zero",
        "the significance rising edge signal second sensor indicates presence object field view sensor rising edge signal indicates sensor detected change intensity light receiving",
        "a input operand and function and function evaluates 1 input operands equal 1 input operand or function or function evaluates 1 input operand equal 1",
        "there two optical sensors positioned different heights device first sensor positioned high enough slope dime passes beneath sensor, allowing signal produced sensor tell us whether coin dime quarter second sensor positioned coins pass front it signal second sensor used clock fsm",
        "the device uses two optical sensors differentiate dime quarter first sensor positioned dime passes beneath it, second sensor positioned coins pass front it rising edge clock signal second sensor occurs, signal first sensor indicates whether coin dime quarter",
        "the device uses sensors generate clock signal alternating 0 1 regular period clock 0, one set latches holds bit values fixed, combinational logic uses latches inputs produce bits copied second set latches clock 1, second set latches stops storing data inputs retains bit values order drive combinational logic, results copied third set latches",
        "the fsm uses signal determine whether accept reject coin checking rising edge signal second sensor rising edge occurs, signal first sensor indicates whether coin quarter (t=1) dime (t=0) sample timing diagram lab appears right clock signal generated lab square wave---in words, high low portions equal---but also unlikely periodic instead, ``cycle'' defined time coin insertions",
        "the output depend input function and evaluate 1 input values 1 input value 0, function evaluate 0",
        "the possible inputs fsm dime (t=0) quarter (t=1) machine reject input user tries purchase item without inserting enough money first, fsm also reject request",
        "the possible outputs fsm a=1 p=1 f signal used set timer, either 0 1 f=0, timer set state changes f=1, timer set state changes light one roads green",
        "the start state initial state fsm state, money deposited yet fsm needs keep track much money inserted order decide whether user purchase one items information alone enough simplest machine, let's create machine adjustable item prices",
        "the dime quarter states used represent user inserted one coin purpose states output a=1 p=0, indicating user yet paid full price another coin needed",
        "the rejectd rejectq states used handle user mistakes user enters second dime dime state, fsm reject coin rejectd state rejects dime (a=0) continues wait quarter (p=0) rejectq state used handle user inserts one quarter",
        "the start state first state fsm sequence used initialize fsm",
        "the dime state state machine waiting dime inserted first state machine accepts coin machine outputs a=1 p=0 state, indicating user yet paid full price 35 cents",
        "the 'quarter' state refers fact addition unit 4-bit examples closed addition means value n, easily find two 4-bit unsigned numbers that, added together, cannot represented 4-bit unsigned number n=4, example, add 12 (1100) 6 (0110) obtain 18 since 18 outside range [0,2^4-1] representable using 4-bit unsigned representation, representation breaks try represent sum using representation",
        "the paid state state user paid full price 35 cents next states paid dime dime inserted quarter quarter inserted",
        "the 'rejectd' state state processor interrupts program due error unexpected behavior state usually causes program terminate",
        "the user purchases item inserting either dime followed quarter, quarter followed dime user inserts second dime, machine reject coin user inserts second quarter, machine accept coin user paid full price 35 cents",
        "the state representation lab fsm 3-bit binary number, following meaning: s_2: type last coin inserted (0 dime, 1 quarter) s_1: one quarter inserted (1 yes, 0 no) s_0: one dime inserted (1 yes, 0 no)",
        "based passage, least 33 bits internal state needed fsm needs track number cycles needed serial comparator execute comparison, least 32 cycles additionally, fsm needs track whether loop done, requires least one additional bit",
        "each bit pattern represents column addition problem carry bit (c_) added b bits produce sum bit (s_) carry bit (c_)",
        "the meaning assigned bit patterns makes easier understand behavior fsm example, paid state, last coin inserted may either type, type all, since decided start fsm state well however, four states, meanings provide clear understanding state fsm",
        "our machine accept pennies, let's fsm keep track much money inserted multiple 5 cents (one nickel) table right shows five types coins, value dollars, value terms nickels expensive item machine might cost dollar two, fsm must track least 20 40 nickels value let's decide use six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "the state table represents six states loop defined next-state logic, two remaining states converging loop single cycle lights red states, necessary safety",
        "the k-map represents domain function form hypercube hypercube divided regions, corresponds product literals function evaluated point hypercube, product literals implicant function function evaluates 1 point",
        "there 63 possible states paid state machine track 315 dollars worth nickels, 63 nickels",
        "prof jones assigns bit patterns way makes easy humans understand meaning states example, paid state, last coin inserted may either type, type all, since fsm starts state however, four states, meanings clear easy apply",
        "this particular example tricky requires reader understand concept bit-sliced addition order understand passage furthermore, passage provide clear explanation bit-sliced adder circuit works, making difficult reader follow along",
        "the s_2 value specifies number inputs must satisfied order output 1 cuts number possible choices four two case two possible combinations inputs satisfy condition",
        "one reason try leverage fact next-state patterns two states relevant may simplify design system next-state patterns needed, system designed without them, may make design process simpler faster additionally, eliminating next-state patterns may also reduce cost system",
        "the final state table state transition diagram appear follows: the final state table lists six states loop defined next-state logic, two remaining states converging loop single cycle table also includes states outside desired loop lights red states, necessary safety the state transition diagram shows six states loop defined next-state logic, two remaining states converging loop single cycle diagram also shows duration state",
        "the purpose fsm control stoplights busy intersection fsm ensures lights always red one roads, yellow light shown green light, green lights alternated two roads",
        "the input sequence 111010010001 significant determines duration state fsm",
        "the input sequence 001 causes stoplight turn red roads necessary safety",
        "the design easy test two-level logic design means inputs outputs easily tested nand nor gate additionally, design easy test sop expression means inputs outputs easily tested or gate",
        "scan-based testing method testing input scanned converted appropriate result programmer responsible ensuring number conversions format string matches number arguments provided programmer must also ensure type information produced conversion stored address passed conversion",
        "we test circuit build lab see correctly implements fsm outlined notes this, input known sequence 0s 1s see circuit outputs correct responses does, confident circuit functioning correctly",
        "scan-based testing type testing used test functionality design type testing typically used test digital designs",
        "the input sequence used initialize fsm sequence 0s 1s input fsm order set state fsm desired state",
        "the input sequence used test fsm sequence 0s 1s applied inputs fsm input sequence used determine output fsm",
        "the outputs needed observe state check output logic values state register timer outputs used determine duration state order states occur",
        "it difficult test sequential logic difficult predict behavior system sequential logic difficult test difficult determine whether system halt finite number steps not",
        "scan-based testing type testing input scanned errors processed type testing often used test software errors",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "the input sequence initialization is: 1) value r0 10, 2) value r1 20, 3) value r2 30",
        "the input sequence testing follows: first, user prompted input two integers decimal form, converted 2's complement stored variables 'a' 'b' next, user prompted input ascii character, value hexadecimal, double-precision floating-point number, stored variables 'c', 'u', 'd', respectively finally, user prompted input two real numbers decimal form, converted single- double-precision floating-point numbers stored variables 'f' 'd', respectively",
        "an fsm finite state machine, model computation used design computer programs hardware fsm defined set states, set inputs, set outputs, set transitions states",
        "an encoder device converts signal message code code usually binary code, sequence 0s 1s code used represent signal message form read machine, computer",
        "a decoder logic circuit converts binary code corresponding decimal code decoders used variety applications, including data storage transmission, error detection correction, address decoding",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "a digital fsm model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called { transition rule} fsm comprises five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs",
        "an encoder helps implement fsm design translating user's input signal used fsm encoder produces signal p indicating user trying make purchase, two-bit signal indicating item user wants decoder takes signal produces individual item release signals r_1, r_2, r_3",
        "a decoder used fsm design generate release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "a digital fsm finite state machine implemented digital system means states must represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits addition, transition rules must complete, meaning given state fsm pattern input bits, transition must defined another state",
        "the game revolves around old logic problem farmer must cross river order reach market farmer traveling market sell fox, goose, corn farmer boat, boat large enough carry fox, goose, corn time fox cannot left alone goose, fox eat goose goose cannot left alone corn, goose eat corn farmer get three items market",
        "a digital fsm used control stoplights intersection two roads fsm two inputs, f, two outputs, l1 l0 output fsm used control stoplights fsm designed stoplights red one roads times road green light, controller show yellow light showing red light give drivers warning allow slow down finally, fairness, controller alternate green lights two roads",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "one could design game controller logic puzzle would buttons corresponding different operations could performed logic puzzle example, could button add new element puzzle, button remove element puzzle, button change value element puzzle game controller could also display would show current state puzzle player's progress",
        "the stoplight controller must ensure lights one roads red times similarly, road green light, controller show yellow light showing red light give drivers warning allow slow down finally, fairness, controller alternate green lights two roads",
        "what ideas used reduce number metrics some ideas used reduce number metrics include: identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "the purpose fsm control stoplight stoplight must red one roads times, controller show yellow light showing red light give drivers warning allow slow down controller also alternate green lights two roads",
        "the inputs fsm states two roads, outputs colors lights two roads fsm ensures lights one roads red times, lights road green fsm also alternates green lights two roads",
        "the fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "why two-level logic popular two-level logic popular simple map expressions cmos gates additionally, easy understand gate diagrams",
        "the state fsm split two pieces: 3-bit register 6-bit timer timer simply binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "1 three ranges possible measurement values given metric the three ranges possible measurement values given metric values equivalently useful, ordered interesting respect one another, impossible use practice",
        "interrupts priority exceptions interrupts generated external devices, exceptions generated processor itself interrupts also asynchronous, exceptions not",
        "the vending machine fsm designed control release items vending machine based user's purchase request fsm uses priority encoder determine item user requested, decoder generate individual item release signals",
        "the fsm five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs class, focus clocked synchronous fsm implementations, fsm's internal state bits stored flip-flops",
        "the coin accept bit item release bits used indicate whether coin accepted whether item released, respectively",
        "the transitions states well-defined fsm timer counts produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the numeric representation money held used track value money inserted machine allows machine keep track much money inserted reject coins value high",
        "the fsm responsible controlling stoplights busy intersection ensures lights always red one roads, green light always followed yellow light, green lights alternated two roads",
        "the fsm needs keep track loop index, current minimum value, progress serial comparator",
        "the fsm needs track state stoplight duration state",
        "the fsm responsible controlling stoplights busy intersection ensures lights one roads red times, road green light, controller show yellow light showing red light",
        "the output fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "a priority encoder type encoder generates signal whenever input lines active, encodes index highest active input two-bit unsigned number priority encoder used determine input lines highest priority",
        "what three ranges given metric the first range measurement values equivalently useful second range possible values ordered interesting respect one another values third range impossible use practice",
        "a decoder type logic circuit takes input signal produces one output possible value signal decoder similar multiplexer number inputs outputs however, decoder one input signal, multiplexer multiple input signals",
        "what difference sop pos sop (sum products) boolean algebra expression or anded terms, pos (product sums) expression and ored terms",
        "the main difference mux decoder mux multiple inputs one output, decoder one input multiple outputs mux used select one several input signals send output, decoder used interpret input signal produce several output signals",
        "a decoder logic circuit converts binary code set signals used operate device decoder takes input signal, typically one coded binary number, produces one output possible value signal decoder enabled (en=1), and gates produces one minterm input signal s decoder enabled (en=0), decoder produces 0 bits",
        "how multi-metric optimization useful engineering multi-metric optimization useful engineering allows engineers identify important metrics balance design effectively according them multi-metric optimization also allows engineers get rid many metrics possible focus important ones",
        "a decoder device converts coded signals usable information decoders used variety applications, error detection correction",
        "a decoder logic circuit converts coded inputs coded outputs, usually one output code input code decoders used variety applications, including data storage transmission, error detection correction, data compression",
        "a decoder similar mux allows one digital signal select several others forwarded output decoder one input multiple outputs, mux multiple inputs one output decoder thought special case mux",
        "a decoder logic device converts binary information form one code another, usually natural binary code multiplexer device selects one several analog digital input signals forwards selected input single output line",
        "a priority encoder type encoder assigns priority certain input signals used determine input signal given priority multiple input signals present",
        "a priority encoder type encoder assigns priority certain input signals priority encoder takes signal produces output signal indicates input signal highest priority output signal typically binary number used select one input signals",
        "a decoder logic circuit converts signals one form another binary form, decoder used convert binary number decimal number",
        "a priority encoder circuit takes number input signals, outputs code represents highest priority input signal output code usually binary number",
        "a mux logic block allows us use one digital signal select several others forwarded output decoder logic block converts binary code set signals",
        "the decoder generates release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "a decoder used context simplify expression logic function using decoder, function expressed two-level logic function, easier understand manipulate",
        "the value register price1 price first item machine, determined owner machine",
        "the value register price2 number nickels machine multiplied price item question way, machine keep track much money inserted much owed item",
        "the value register price3 price third item machine, determined owner machine",
        "the value register n corresponds number nickels inserted machine user inserts quarter, machine transition state n+5, indicating 5 nickels inserted user attempts purchase item without inserting enough money first, machine remain state reject request",
        "the value register equivalence class sum two 4-bit numbers case, sum 18, equivalent 2 (mod 16)",
        "what significance demorgan's law demorgan's law popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "the register price1 six bits allows machine keep track 315 (63 nickels)",
        "what difference two-level logic forms logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "the value register price2 number nickels inserted machine",
        "what reason popularity two-level logic the reason popularity two-level logic simple way express logic functions two-level logic popular way expressing logic functions simple way express logic functions",
        "what difference sop pos sop form two-level logic, pos form multi-level logic sop popular simpler manipulate expressions algebraically graphically",
        "the value v 10 cents dime inserted dime worth 10 cents, machine tracks value money inserted terms nickels therefore, dime inserted, machine records 2 nickels",
        "passage - two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams question - what two levels two-level logic",
        "the vending machine knows much item costs owner machine sets prices dynamically machine keeps track much money inserted multiple 5 cents (one nickel) expensive item machine might cost dollar two, fsm must track least 20 40 nickels value",
        "the vending machine keeps track much money inserted multiple 5 cents (one nickel) six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "the vending machine uses sensors detect coin inserted first sensor positioned dime pass beneath it, second sensor positioned coins pass front it signal second sensor used clock fsm, signal first sensor indicates whether coin dime quarter",
        "the vending machine releases item using decoder generate three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the vending machine knows purchase requested user pushes one item selection buttons causes priority encoder produce signal p indicating user trying make purchase",
        "the input fsm reset button r, four buttons b_f, b_x, b_g, b_c fsm produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs",
        "the output fsm position farmer, fox, goose, corn output either left bank right bank river game also two indicators: w reaching winning state, l reaching losing state",
        "the state represented fxgc, f position farmer, x position fox, g position goose, c position corn game five buttons: reset, cross alone, cross fox, cross goose, cross corn game stops player wins loses",
        "the next state fxgc=0101 farmer bank fox, corn, b_x b_c buttons ignored, leading next-state table right notice b_g accepted even b_c pressed farmer bank corn",
        "the player wins game getting four entities (farmer, fox, goose, corn) right bank river player makes mistake, game lose",
        "the player loses game able correctly answer question player gets question wrong, start game beginning",
        "the input fsm 3-bit register 6-bit timer timer used count produce output z=1 reaches 0 register used store state fsm",
        "the output fsm sequence red, yellow, green lights alternate two roads duration state determined signal f f 0, timer set state changes f 1, timer set state changes light one roads green",
        "the priority encoder used determine item user wants purchase, generate signal indicating user trying make purchase output priority encoder used select value one price registers, subtracted current number nickels stored register purchase successful, price subtracted number nickels item released",
        "the player loses game able get correct answer question player gets correct answer, win game",
        "when player loses, output fsm looks like red roads controller must ensure lights one roads red times",
        "the fsm handles multiple input events single clock cycle first storing input events queue fsm ready process input event, dequeues event queue processes it",
        "the outputs fsm states stoplights stoplights either red, green, yellow fsm controls duration light",
        "the purpose fsm control stoplights busy intersection fsm ensures lights one roads red times, road green light, controller show yellow light showing red light",
        "the signal f 1 timer reaches 0 state changes",
        "the state fsm split two pieces: {3-bit} register {6-bit} timer timer simply binary counter counts downward produces output z=1 reaches 0 notice register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle we thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the fsm ensures lights one roads red times keeping track state light light green, turn yellow red light red, stay red",
        "the fsm shows yellow light showing red light setting timer specific value state fsm changes value set signal f, calculated bottom fsm logic diagram",
        "the fsm alternates green lights two roads setting timer different value state fsm changes causes lights change color cycle-by-cycle basis, green light alternating two roads",
        "the signal f used set timer certain conditions particular, used set timer state changes",
        "the fsm initialized state \"000\" order ensure lights one roads red times timer set \"a\" order maintain new value number cycles",
        "the stoplight controller 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the stoplight controller ensures lights one roads red times using state machine six states states determined inputs fsm, states two roads output fsm controls lights two roads controller alternates green red lights two roads",
        "the stoplight controller shows yellow light showing red light order give drivers warning allow slow down",
        "the stoplight controller alternates green lights two roads changing value register s value changed timer reaches 0, timer set enters new state duration state determined value register s",
        "the signal f allows timer set conditions, addition state changes allows flexibility duration state",
        "starting human-based design process typically results design efficient effective one mapped high-level programming language human designers easily optimize design specific metrics, power consumption performance additionally, human designers easily impose constraints design, limits chip area minimum performance, order guide design process",
        "mapping bits gates means design circuit performs operation single bit passes necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "the control structure code maps high-level fsm design breaking program simple steps mapping step state fsm number states fsm depend number steps program",
        "the general model computer system execute set instructions, called program, store resulting data system set registers hold data instructions, set memory locations store data programs system also set input output devices allow interact outside world",
        "the purpose process find best formulation specific logic function given metric done using heuristic approaches find solutions strike balance various metrics cost, power, performance",
        "the two approaches fsm design state-transition table state diagram state-transition table lists possible states system in, state diagram shows sequence states system goes through state-transition table compact easier use comparing functions, state diagram intuitive easier understand",
        "the purpose notes introduce important abstraction logic design, use abstraction design ripple-carry adder ripple-carry adder adder adds single bit passes necessary information another copy itself design less efficient designs optimized specific purpose, simplicity approach makes tradeoff interesting one",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "a finite state machine model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called transition rule",
        "a computer machine programmed carry set arithmetic logical operations automatically fsm model behavior composed finite set states, transitions states, actions",
        "one way transform code written high-level language fsm use compiler compiler program translates code written high-level language code run computer another way transform code written high-level language fsm use interpreter interpreter program executes code written high-level language",
        "the control structure code maps high-level fsm design breaking program simple steps, one step flow chart may sometimes require one state fsm similarly, one fsm state may able implement several steps flow chart, steps performed simultaneously",
        "one design fsm executes simple pieces flow chart breaking program smaller steps mapping step state fsm one also use registers counters implement variables program, use comparator implement test statement",
        "the general model computer turing machine mathematical model computer used simulate computer",
        "one way build fsm allows pieces executed specified fsm built use state machine output routed different inputs allows fsm configured execute different pieces code based input another way build fsm allows pieces executed specified fsm built use state machine multiple states executed parallel allows fsm configured execute different pieces code parallel based input",
        "the problem code trying solve halting problem halting problem problem cannot solved turing machine problem given turing machine input turing machine, possible determine whether machine finish computing finite number steps",
        "what difference sop pos sop pos two forms two-level logic sop, output true inputs true pos, output true inputs true",
        "the array notation code means code trying convert input user appropriate result, store result memory address given next argument",
        "1 difference two-level three-level logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic three-level logic way expressing logic functions using three levels three levels refer number functions input passes reach output, sop pos forms examples three-level logic",
        "the idx variable used keep track number operations logic expression metric used estimate number transistors needed design, turn estimate area required design",
        "the min variable heuristic metric used estimate time needed compute function metric based longest chain operations performed instance variable rationale metric gate outputs change instantaneously inputs change",
        "the flow chart represents steps taken designing new product first step think carefully metrics possible interest second step get rid many metrics possible third step identify metrics practical impact current technology fourth step set threshold values metrics simplify reasoning them fifth step eliminate redundant metrics sixth step calculate linear sums reduce count metrics seventh step make use notion pareto optimality",
        "what reason popularity two-level logic the popularity two-level logic due fact simple way express logic functions additionally, two-level logic easy map cmos gates",
        "there three variables used code, x, y, z value x initialized 42, value initialized x value z initialized"
    ],
    "67": [
        "the design process digital fsm includes six steps: developing abstract model, specifying i/o behavior, completing specification, choosing state representation, calculating logic expressions, implementing flip-flops gates",
        "the first examples passage two-level logic, demorgan's law, sop form two-level logic popular way expressing logic functions, demorgan's law way simplify expressions sop form way representing logic function",
        "an fsm must initialized ensure starts known state avoid undefined behavior without initialization, fsm may produce incorrect results may work all",
        "a multiplexer digital logic block allows one digital signal select several others forwarded output simplest form multiplexer 2-to-1 multiplexer, two inputs left one top top input allows us choose left inputs forwarded output",
        "the choice representation fsm's internal state affects complexity implementation terms number states, number inputs, number outputs, number transition rules",
        "the design process digital fsm typically consists six steps: (1) developing abstract model, (2) specifying i/o behavior, (3) completing specification, (4) choosing state representation, (5) calculating logic expressions, (6) implementing flip-flops gates",
        "the design process involves manipulation logic expressions order optimize specific metrics, cost, power, performance today, manipulation performed almost entirely computers, human engineers supplying logic functions interest imposing constraints process",
        "an abstract model mathematical model used describe system usually simplified include details system",
        "an fsm must initialized ensure starts known state allows fsm function correctly avoid potential problems could arise unknown starting state",
        "a multiplexer device allows multiple signals routed onto single channel done selecting one several input signals connecting output multiplexers used variety applications, telecommunications computer networking",
        "from passage, seems digital fsm designed abstract model first identifying finite set states, set possible inputs, set possible outputs, set transition rules then, fsm implemented digital system representing states patterns using fixed number bits, translating inputs bits, translating outputs bits finally, transition rules defined given state fsm pattern input bits, transition defined state another state",
        "a fsm implemented digital system, states represented patterns using fixed number bits, inputs translated bits, outputs translated bits transition rules must complete, meaning given state fsm pattern input bits, transition must defined state another state outputs digital fsm calculated using boolean logic expressions",
        "the design process counter number states power two choose representation states makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "the fsm initialized one six states desired loop ensures lights roads red cars waiting one roads",
        "the choice representation fsm's internal state affects complexity implementation states represented bit patterns, transition rules must complete states represented abstract states, outputs state must specified",
        "the first step design process develop abstract model model translation human language description model states desired behavior model particularly thorough exact stage",
        "the second step design process think carefully metrics possible interest set metrics feel complete, next step get rid many can",
        "the third step design process identify metrics practical impact current technology, set threshold values metrics simplify reasoning them, eliminate redundant metrics, calculate linear sums reduce count metrics, and, finally, make use notion pareto optimality",
        "the fourth step design process choose particular design set possible designs making choice, engineers typically consider variety factors, including cost, performance, manufacturability, reliability",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "the first step design process develop abstract model model captures intent description particularly thorough exact",
        "the third step design process evaluate design using multiple metrics includes identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "the fourth step design process choose particular design set possible designs choice made based number factors, including objectives design, constraints problem, preferences designer",
        "abstraction process simplifying complex system identifying important aspects system ignoring rest context implementation, abstraction used simplify design identifying important features design ignoring rest make design manageable easier understand",
        "there reasons important make implicit assumptions clear design process first, assumptions made clear, lead confusion misunderstanding among team members working design second, making assumptions explicit help ensure everyone page working towards goal finally, explicit assumptions help prevent errors mistakes design process",
        "the choice state representation affects implementation fsm terms number gates inverters required, well delay overall design serial comparator design based 2-bit slice variant, example, requires 24 gates 10 inverters, much larger earlier serial design terms gate delays, however, new design identical, meaning comparisons finished half time realistic area timing metrics show slightly difference two designs differences dominate results design carefully considered",
        "the choice fsm's input output behavior affects design process determining set possible states set possible outputs set possible states determined set possible inputs, set possible outputs determined set possible outputs",
        "one important reason compatibility components digital system helps ensure system function correctly components compatible, system may work correctly, may work all additionally, compatibility among components help reduce cost manufacturing system, well cost maintaining repairing system",
        "a gray code sequence n-bit patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit construct gray code recursively follows: (n+1)-bit gray code, write sequence n-bit gray code, add 0 front patterns sequence, append second copy n-bit gray code reverse order, put 1 front patterns second copy",
        "a gray code counter device used count number operations logic expression device works counting number variables expression adding number operations device used optimize logic expressions reducing number operations needed implement logic function",
        "the inputs gray code counter current state counter clock signal clock signal triggers state change counter",
        "the transition diagram two-bit gray code counter loop counter moving one state next cycle state diagram marked internal state value s_1s_0 (before ``/'') output z_1z_0 (after ``/''), always equal counter",
        "the implementation gray code counter developed first filling k-maps next-state values, deriving algebraic expressions next-state logic used develop implementation",
        "the inputs counter coins inserted machine machine track value coins terms nickels reject coins inserted would cause value exceed maximum value machine track",
        "a gray code counter type digital counter used count number clock pulses named frank gray, invented code 1953 main advantage gray code counter types counters less likely produce errors counting",
        "a gray code counter type counter uses gray code, cycle bit patterns certain length consecutive patterns differ exactly one bit regular counter type counter use gray code",
        "the timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle states thus act like counter",
        "the output counter number successful conversions made scanf function",
        "a gray code counter type counter cycles possible bit patterns certain length states transition diagram gray code counter form loop, counter moving one state next cycle state diagram marked internal state value output value, always equal counter",
        "there benefits using gray code counter first, easy design implement second, easy check correctness logic third, easy read understand logic",
        "a gray code counter used applications digital value must changed incrementally least number steps gray code counter changes one bit time, minimizes number digital values must changed",
        "a gray code counter type digital counter uses gray code generate output input gray code counter digital signal represents number clock pulses applied counter output gray code counter digital signal represents number clock pulses applied counter, plus one",
        "a gray code counter designed first creating transition diagram shows states outputs counter next, next-state logic developed creating k-maps next-state values deriving algebraic expressions finally, next-state logic implemented diagram",
        "the internal state value third bit gray code counter s_2s_1s_0=001 hold=1, next-state logic s_1^+ s_0^+ reduces s_1^+=s_1 s_0^+=s_0; words, counter stops counting simply stays current state hold=0, equations become s_1^+=s_0 s_0^+={{s_1}}, produces repeating sequence s_1s_0 00, 01, 11, 10, desired",
        "the output third bit gray code counter would either 0 1 input 0, output 1 input 1, output 0",
        "the next state value s2 0 timer set state changes, find duration state analyzing muxes bottom mux selects s_2=0, selects output top mux s_2=1",
        "the next state value s0 0 timer set state changes, find duration state analyzing muxes bottom mux selects s_2=0, selects output top mux s_2=1 top mux selects b s_0=1, selects c s_0=0",
        "the fully-specified transition diagram three-bit gray code counter follows: the states counter form loop, counter moving one state next cycle each state diagram marked internal state value s_2s_1s_0 (before \" / \") output z_2z_1z_0 (after \" / \") based transition diagram, next-state values s_2^+, s_1^+, s_0^+ filled shown",
        "the next-state values three-bit gray code counter follows: s_2^+=0, s_1^+=s_0, s_0^+={{s_1}}",
        "the next-state logic three-bit gray code counter follows: s_2^+ = s_2 + s_0 s_1^+ = s_2 s_0^+ = s_2 s_1",
        "the implementation diagram three-bit gray code counter logic diagram shows inputs, outputs, next-state logic counter diagram ordered left right {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2, makes easy read check correctness",
        "the vertical lines carrying current state values inverses back next state logic inputs ordered left right (on left side figure) {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2",
        "adding third bit gray code counter increases design complexity requires additional carry bit carry bit must propagated adder bit slice logic, increases number logic gates required overall complexity design",
        "one way reduce design complexity make use common algebraic terms sub-expressions help simplify design make easier understand another way reduce complexity use demorgan's laws simplify expression help reduce number gates needed make design efficient",
        "it important reasonable order designing logic diagram help simplify design process make easier understand function logic diagram additionally, help ensure logic diagram compatible products may used system",
        "the counter's implementation diagram simplifies understanding diagram breaking smaller, manageable pieces this, easier see various parts diagram interact other additionally, makes easier identify potential problems areas improvement",
        "the purpose vertical lines carrying current state values inverses back next state logic inputs ensure state fsm always consistent necessary safety reasons, fsm must always ensure lights one roads red times",
        "the color mapping three-bit rgb encoding system system colors represented combination red, green, blue light color mapping system shown right imagine charged creating counter drive light sequence colors",
        "the light red one roads times road green light, controller show yellow light showing red light give drivers warning allow slow down finally, fairness, controller alternate green lights two roads",
        "from passage, inferred logical completeness necessarily help efficient design logic functions words, single boolean logic function expressed many different ways therefore, important engineers learn develop efficient implementation function, well determine whether two logic expressions identical without actually writing truth tables",
        "the next-state values s_2, s_1, s_0 given table right states act like counter, examining connections, derive equations next state draw transition diagram six states loop defined next-state logic, two remaining states converging loop single cycle",
        "the equation s_2^+ follows: s_2^+ = + b + c, carry bit, b first bit added, c second bit added overflow occurs, s_2^+ = c",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills students learn coming months",
        "yes, choose use counter's internal state directly output values colors need produce outputs unique bit patterns using counter's internal state directly output values, simplify design",
        "a fully-specified transition diagram diagram specifies states system in, well transitions states allows clear understanding behavior system",
        "a karnaugh map graphical representation boolean function helps simplify function map consists grid squares, corresponds possible combination input values map used find groups product terms implicants function",
        "the next-state logic equations functions describe relationship current state system next state system functions represented either sop pos form demorgan's law used simplify functions replacing or gates nand gates, and gates nor gates",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways, learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills start learn coming months",
        "the color mapping three-bit rgb encoding system colors produced unique bit patterns states form loop, marked internal state value s_2s_1s_0 output rgb",
        "the desired pattern one represents number 2's complement representation 2's complement representation defined choosing set integers balanced around zero groups so, want represent number 2's complement representation, need choose pattern represents number representation",
        "the transition diagram color sequencer loop six states, two remaining states converging loop single cycle lights red states, necessary safety timer set state changes, duration state calculated analyzing muxes",
        "the initial state three flip-flops implementation 0s 1s use init input choose normal operation (init=0) fsm forcing fsm next state given i_2i_1i_0 (when init=1)",
        "the timer set 0, state fsm changed next state sequence new state fsm determines duration next state, timer set accordingly",
        "the passage states power consumption important metric engineers must take account designs however, cases, desktop high-end server processors, metrics (such performance) may important always want operate edge interesting range could going wrong, engineers taking power consumption account much be",
        "one possibility fsm resetting properly, starts unexpected state another possibility race condition fsm, get unexpected state inputs change quickly",
        "the purpose adding and gates input create logic function efficient terms area power done reducing number variables expression",
        "the issue fsm getting unexpected states cause output circuit glitch problematic applications stable output required",
        "the fsm get unexpected states inputs set properly example, input set 111, fsm stay white state indefinitely",
        "the initial state three flip-flops implementation 0 state explicit mechanism initialization forces flip-flop 0 state alternatively, could add extra logic design would allow us force fsm specific state next cycle",
        "the first approach use flip-flop design add single bit pass necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "interrupts powerful exceptions occur asynchronously respect program means processor check interrupts instructions, allows flexibility design processor",
        "the light sometimes glows cyan red briefly appearing white controller must ensure lights one roads red times similarly, road green light, controller show yellow light showing red light give drivers warning allow slow down",
        "one possibility fsm resetting properly, start expected initial state another possibility race condition fsm, reach unexpected state inputs change quickly",
        "the initial state three flip-flops unknown unless explicit mechanism initialization initialization work two ways first approach makes use flip-flop design know, flip-flop built pair latches, make use internal reset lines latches force flip-flop 0 state (or 1 state) using additional input alternatively, add extra logic design",
        "one way make use internal reset lines latches force flip-flop 0 state done connecting reset lines latches 0 voltage source",
        "the passage discusses design serial comparator using bit-sliced approach approach leads design 24 gates 10 inverters, much larger earlier serial design however, new design identical terms gate delays, meaning comparison finished half time",
        "an abstract model simplified representation system, typically used aid understanding system context logic optimization, abstract model used help understand tradeoffs different logic expressions",
        "there four states second version table states a, b, c, d b on state, c off state",
        "the second version table implies buttons placed ergonomic way possible buttons close together enough space buttons edge table",
        "the design counter includes eight states, three state bits used keep track current state choice representation fsm's states dramatically affect design complexity right strategy thus often start selecting representation makes sense human, even requires bits strictly necessary",
        "the two states first column table states fsm f=0 case, timer set state changes, find duration state analyzing muxes",
        "the four counting states are: 1) state a: timer set s_2=0 duration state a 2) state b: timer set b s_0=1 duration state b 3) state c: timer set c s_0=0 duration state c 4) state d: timer set s_2=1 duration state d",
        "there four halted states: halt a, halt b, halt c, halt d states, counter retains current value user presses \"go\" button",
        "pressing ``halt'' button nothing counter halted counter remains state ``go'' button pressed",
        "pressing ``go'' button causes counter start counting",
        "an fsm finite state machine, mathematical model computation used design computer programs digital logic circuits abstract machine one finite number states",
        "there several benefits using fsm one benefit fsm used implement wide range logic functions another benefit fsm used construct larger memories multiple smaller memories finally, fsm used reduce number pins needed chip",
        "there disadvantages using fsm first, fsm designed carefully, hard understand debug second, fsm use resources simpler design, state machine finally, fsm difficult change extend simpler design",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "the input behavior machine based type coin inserted selection item purchase user inserts coin nickel, machine reject coin remain state user inserts nickel, machine transition next state accept coin user selects item purchase, machine release item user inserted enough money otherwise, machine remain state",
        "the output behavior add3 procedure takes three integers arguments, adds together, returns sum procedure called constants 10, 20, 30, result printed calling convention, call made, r0 must contain value 10, r1 value 20, r2 value 30",
        "the ``halt'' button ice cream dispenser stops machine dispensing ice cream useful user wants stop machine dispensing ice cream, machine malfunctioning needs stopped",
        "the \"go\" button initiates system call causes processor enter kernel mode execute instructions associated system call instructions part operating system used perform desired action, printing character console",
        "the two-bit gray code sequence two-bit patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit",
        "there two control buttons: one east-west road one north-south road",
        "a gray code sequence patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit construct gray code recursively follows: (n+1)-bit gray code, write sequence n-bit gray code, add 0 front patterns",
        "the states transition diagram represent different colors stoplight first two states red, followed yellow, green last two states red",
        "the uninterrupted counting cycle represents duration state fsm used calculate duration state fsm f=0",
        "system calls initiated trap instruction, system calls also known traps many architectures, system call places processor privileged kernel mode, instructions implement call considered part operating system",
        "the purpose using gray code create sequence patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit",
        "the design continues choosing state representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "if use gray code, would compare two expressions determine whether represent logic function would test logical equivalence, important part hardware design however, tools today provide help problem, necessary use gray code",
        "if user presses \"go\" button state {count a}, outputs c_l=11 c_m=01 means user get one half servings lychee half serving mango",
        "there explicit answer question passage however, based information given, seems user presses ``halt'' button state { count a}, system reset state { halt a}",
        "there two possible outcomes user presses ``go'' button state { halt a} first outcome fsm moves state { count b}, next state sequence second outcome fsm resets state { count a}, initial state",
        "there possible ways answer question one way would say user presses ``halt'' button state { halt a}, system reset state { count a} another way answer question would say user presses ``halt'' button state { halt a}, system remain state { halt a}",
        "there two possible ways user could press buttons state { halt a} first way user could press \"halt\" button \"go\" button case, fsm would move state { halt a} state { count b} second way user could press \"go\" button \"halt\" button case, fsm would move state { count b} state { halt a}",
        "if user presses \"go\" button (hg=01), ice cream cup overflow outputs c_l=11 c_m=10, means dispenser release full serving flavor, two servings total",
        "if ``halt'' button pressed (hg=10), counter remains halted state { halt a} buttons pressed (hg=11), ``halt'' overrides ``go,'' nothing special alone pressed counter halted thus, input patterns hg=10 hg=11 also take state { halt a} back itself",
        "if user presses buttons (hg=11), ice cream cup overflows outputs c_l=11 c_m=10, dispenser releases full serving flavor, two servings total",
        "if \"halt\" button pressed (hg=10), logic outputs c_l=00 c_m=00, dispenser gives ice cream buttons pressed (hg=11), outputs c_l=11 c_m=11, dispenser gives two servings flavor, four servings total",
        "the design counter completed applying decisions made { count a} state counting states, decisions made { halt a} state halted states results design states labeled internal state outputs (s_2s_1s_0/z_1z_0)",
        "one important reason consider possible input conditions possible states help ensure design correct example, design ever receives input values within certain range, possible design actually correct input values considering possible input conditions help catch errors like this another reason consider possible input conditions help optimize design example, design ever receives input values within certain range, possible simplify design make efficient considering possible input conditions help identify opportunities optimization",
        "a transition diagram help process helping identify important metrics helping balance design effectively according metrics",
        "the state table form specification make missing parts specification obvious showing different states system transitions states help identify parts specification missing needs added order complete specification",
        "if user presses \"go\" button (hg=01), machine dispense one half servings lychee half serving mango",
        "if ``halt'' button pressed (hg=10), counter remains halted state buttons pressed (hg=11), counter also remains halted state",
        "the fsm needs least three states order eight states three possible items purchased, item purchased one two ways (with without enough money)",
        "when turing machine given input, either finishes finite number steps, not finish finite number steps, machine said \"halted\"",
        "a counter \"counting\" process incrementing, counter \"halted\" incrementing",
        "the choice representation fsm's states affect design complexity determines many bits needed represent state bits needed represent state, design complex",
        "the right strategy choosing representation start selecting representation makes sense human, even requires bits strictly necessary make design process simpler efficient long run",
        "the choice state representation affects design complexity ways first, affect number bits needed represent states second, affect number possible states represented third, affect number transitions need considered designing state machine",
        "the right strategy start selecting representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "one reason often best start selecting representation makes sense human easier understand work with additionally, starting representation makes sense human help ensure final product also easy understand use",
        "abstraction powerful tool help simplify complex problems selecting state representation, abstraction help identify important aspects problem ignore irrelevant details make easier find solution effective efficient",
        "abstraction selecting state representation lead better design allowing engineer focus important aspects problem ignoring details important help simplify problem make easier find solution",
        "the number state bits affects design complexity determines number possible states fsm in larger number state bits means possible states design must able handle them",
        "abstraction important selecting state representation allows designer select representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "one reason important start representation makes sense human humans must supply logic functions interest, must program acceptable transformations equivalent forms second reason complexity problem good way introduce real engineering finally, contextual information help develop better understanding finite state machines higher-level abstractions form core digital systems still defined directly humans today",
        "abstraction selecting representation impact design metrics reducing number metrics need considered simplify process designing solution make easier find optimal solution",
        "hold 1 counter count state s_2=0 counter already halted press \"go\" button",
        "hold = h + s_2 when counter halt state s_2=1, hold = 1 counter stop (move halted state without changing value) h true, halted states, s_2=1, counter stops (stays halted state) h+ true",
        "the value s_2 counter count state hold=0 undefined because, passage states, overflow occurs either operands negative operands positive operands negative, resulting sum equal c however, operands positive, resulting sum less c thus, impossible determine value s_2 without knowing values operands",
        "s_2 1 counter halt state hold=1 s_2=1, counter halted, hold=1, counter retain current value",
        "the value s_1s_0 counter count state hold=1 01",
        "the hold variable used save energy chip finishes work, turn off, saving energy variable allows chip turn finished, saving energy",
        "the value hold counter counting 0 value hold counter halted 1",
        "the value hold counter halted value last input given machine",
        "the value hold determines whether counter counts determining whether counter hold current value (stop counting) ``halt'' button pressed counter already halted ``go'' button pressed",
        "the next-state logic s_1^+ s_0^+ hold=0 follows: s_1^+ = s_0 + hold s_0^+ = s_1 + hold",
        "the hold variable simplifies design allowing designer separate logic deciding whether advance counter fairly cleanly logic advancing counter itself hold bit diagram used determine whether counter advance current cycle",
        "the similarity equations s_1^+s_0^+ equations {2-to-1} mux used represent logic function two-level logic popular way expressing logic functions simple map expression cmos gates using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate",
        "the use s_2 separates logic deciding whether advance counter allowing counter halted state (s_2=1) counting state (s_2=0) hold=1, counter retains state, hold=0, counts",
        "f two effects operation fsm first, prevents timer reset enters new state effect lengthening duration state second, prevents fsm entering loop defined next-state logic effect halting fsm current state",
        "abstraction used build three-bit gray code counter two-bit design using copies bit-sliced adder circuit approach less efficient designing circuit specifically three-bit gray code counter, simpler",
        "the state representation used determine next state fsm done examining inputs fsm deriving equations next state states fsm act like counter, examining connections, next state determined",
        "there several benefits good state representation first, help reduce number pins needed chip second, improve density memory chip third, improve speed memory chip",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor performance cases, bad state representation also lead increased costs fabrication testing",
        "one way verify implementation correct test known set inputs compare results expected results results match, implementation likely correct another way verify implementation examine code look errors done manually help software tool",
        "a good state representation easy understand able capture relevant information problem bad state representation may difficult understand may able capture relevant information",
        "the state representation significant impact overall design system affects way system behaves interacts environment well-chosen state representation simplify design system make efficient",
        "the states fsm act like counter, value fsm set whenever state changes timer set state changes, duration state determined value timer fsm also set conditions, signal f calculated",
        "a good state representation important help reduce number logic gates needed design, thus save chip area additionally, good state representation help improve performance design reducing number logic operations needed",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor power consumption cases, two metrics may strongly correlated, meaning design good one metrics frequently also good metric",
        "one way improve bad state representation make compact done using two-level logic instead three-level logic another way improve bad state representation make readable done using clear consistent naming conventions",
        "the state representation impacts fsm determining duration state timer set whenever state changes, duration state determined muxes bottom mux selects s_2=0, selects output top mux s_2=1 top mux selects b s_0=1, selects c s_0=0",
        "a bad state representation lead number problems, including wasted engineering effort, poor performance, even product cancellations",
        "a bad state representation fixed using code larger hamming distance enable system detect correct errors",
        "there best state representation fsm important factor representation complete, meaning states represented inputs accounted for considerations include size state space number inputs outputs",
        "a good state representation important help reduce number transistors needed design, thus save space energy additionally, help improve performance design making easier computer manipulate logic expressions",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context",
        "the common types memory used digital systems sram dram sram used high-speed applications processor caches embedded designs dram used applications less demanding speed requirements",
        "one build static rams using logic using tri-state buffers tri-state buffers used create larger memories using multiple chips wider memories also created using multiple chips",
        "tri-state buffers used provide logical disconnection tri-state buffer output logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "memory chips combined provide larger wider memories using multiple chips example, two 2-bit memories used implement 4-bit memory one address bits used drive decoder determines two chips active (cs=1) decoder enabled chip select signal larger memory, neither chip enabled external cs low, desired",
        "the two common types memory used digital systems static random access memory (sram) dynamic random access memory (dram) sram used high-speed applications processor caches embedded designs, dram used applications less demanding speed requirements, main memory computers",
        "one build memories using logic creating tri-state buffer logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "a tri-state buffer type digital logic device used either connect disconnect signal line power source ground achieved using two transistors, one connect signal line power source, connect signal line ground buffer enabled, transistors turned on, signal line connected either power source ground, depending value input signal buffer disabled, transistors turned off, effectively disconnecting signal line power source ground",
        "one way combine memory chips use multiple chips implement larger memory done using one address bit drive decoder determines two chips active another way combine memory chips use multiple chips implement wider memory done routing external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one builds memories (static rams) using logic connecting dual-inverter loop opposing bit lines transistors controlled select line select high, transistors connect inverter loop bit lines writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "a tri-state buffer logic circuit used disconnect output logic circuit achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "one way combine memory chips use create larger memory done using one address bit drive decoder determines two chips active address bits, well external data inputs write enable signal, delivered memories external data outputs also connected memories another way combine memory chips use create wider memory case, chips either active inactive time, external address, write enable, chip select inputs routed chips however, data inputs outputs separate, chip handling different part data",
        "dynamic rams memories use charged capacitor store bit charge drains time must replaced, giving rise qualifier ``dynamic'' dram also unavailable recharging capacitors, problem applications stringent real-time needs",
        "random access memories (rams) memories support two operations: writing data element, reading data element memories also volatile, means data held memory erased electrical power turned fails static random access memory (sram) used high-speed applications processor caches embedded designs",
        "the addressability computer memory number bits stored element memory size elements memory vary single binary digit, bit, byte (8 bits) more typically, data elements larger byte referred words, size word depends context",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors, dram cell uses one transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "to write data memory element, external circuit sends signal memory indicating address element written data written sent memory, memory stores data element specified address",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context element memory assigned unique name, called address, allows external circuit identify particular element interest addresses unlike street addresses use send letter unlike street addresses, however, memory addresses usually little redundancy; possible combination bits address identifies distinct set bits memory",
        "a chip select input input chip allows chip turned off input used save energy turning chip needed",
        "a word context computer memory sequence bits represents unit data words represent numbers, characters, data types size word typically determined computer's word size, number bits computer process time",
        "non-volatile memories include magnetic optical storage media dvds, cd-roms, disks, tapes, capacitive storage media flash drives, programmable logic devices",
        "a ram type memory used store data volatile memory, means data stored memory erased power turned fails ram random access memory, means time required access element memory independent element accessed",
        "sram faster dram, dram denser (has bits per chip area) substantial part dram density due transistor count: typical sram cells use six transistors (two inverter, two connect inverters bit lines), dram cells use single transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "a computer memory storage device data two main types memory: sram dram sram faster expensive, dram slower cheaper dram commonly used main memory computers",
        "data elements computer memory stored either static random access memory (sram) dynamic random access memory (dram) sram uses active logic form two-inverter loop maintain stored values, dram uses charged capacitor store bit",
        "the addressability computer memory number bits stored element memory size elements memory vary single bit byte more typically, data elements larger byte referred words, size word depends context",
        "words computer memory stored bits, either 0 1 group bits makes byte, smallest unit data stored computer memory group bytes makes word, smallest unit data read written computer memory",
        "a random access memory (ram) type memory allows data stored retrieved order ram volatile, means loses data power supply removed two types ram: static ram (sram) dynamic ram (dram)",
        "static random access memory used high-speed applications processor caches embedded designs sram bit density significantly lower dram bit density, applications less demanding speed requirements use dram",
        "an sram cell flip-flop made two cross-coupled inverters output one inverter connected input other, vice versa power applied, sram cell one two stable states, represent 0 1 state cell changed applying correct sequence voltages inputs",
        "sram cells combined bit slice sharing bit lines analog read write logic bit slice figure thought 16-address, 1-bit-addressable memory (2^4b) cells bit slice share bit lines analog read write logic, appears right figure",
        "a chip select input used enable disable chip input used save power turning chip needed",
        "the main advantage sram dram speed sram faster dram need refresh memory cells often dram denser sram, store data given area",
        "sram cells store data using dual-inverter loop writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "a read operation performed sram cell first bringing bit line intermediate voltage level, raising select line allows capacitor either pull small amount charge bit line push small amount charge onto bit line resulting change voltage detected sense amplifier",
        "a write operation sram cell performed charging charging capacitor capacitor attached bit line transistor controlled select line select low, capacitor isolated holds charge however, select high write operation, logic driving bit line forces charge onto capacitor removes charge it",
        "sram type memory used computers made number transistors store data way easy computer access sram faster types memory, also expensive",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors (two inverter, two connect inverters bit lines), dram cell uses single transistor",
        "a sram cell organized flip-flop, one transistor one capacitor per bit capacitor stores data bit, transistor controls access bit",
        "sram cells combined bit slice sharing bit lines analog read write logic decoder sets one cell's select line high enable read write operation cell chip select input cs drives enable input decoder, none memory cells active chip select low (cs=0), exactly one memory cells active chip select high (cs=1)",
        "a write operation sram cell performed bringing bit line intermediate voltage level, raising select line, allows capacitor either pull small amount charge bit line push small amount charge onto bit line resulting change voltage detected sense amplifier end bit line",
        "the main benefit using tri-state buffer allows logical disconnection buffer output means multiple memories share output line without need additional multiplexers",
        "a tri-state buffer achieves logical disconnection using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "the decoder memory chip responsible translating memory address correct location memory chip necessary ensure correct data read written correct location memory chip",
        "multiple chips used construct wider memories connecting address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used reduce number pins needed chips combining inputs outputs allowed chip designers halve number pins needed",
        "a tri-state buffer type digital logic circuit used either connect disconnect signal line power supply ground done using two transistors, one connect signal line power supply, connect signal line ground buffer enabled, transistors turned on, signal line connected either power supply ground, depending value input signal buffer disabled, transistors turned off, signal line effectively disconnected power supply ground",
        "a tri-state buffer digital circuit used either connect disconnect output signal line buffer three states: high, low, high impedance buffer high state, output connected signal line copies signal input buffer low state, output disconnected signal line buffer high impedance state, output effectively disconnected signal line",
        "the benefit using tri-state buffer allows logical disconnection tri-state buffer output means output shared one memory without need additional multiplexers useful creating larger memories combining multiple chips",
        "tri-state buffers used construct larger memories using multiple chips connecting external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used construct wider memories connecting data inputs outputs multiple memories together allows output line shared one memory without need additional multiplexers",
        "a tri-state buffer digital circuit used either connect disconnect signal circuit buffer three states: high, low, high impedance high impedance state effectively disconnects signal circuit allows multiple memories share output line without need additional multiplexers",
        "a tri-state buffer used create electrical connection tri-state buffer output logical disconnection achieved using outer transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "tri-state buffers used reduce number pins needed chip combining inputs outputs example, data inputs outputs memory combined single set data wires, bidirectional signals reduces number pins needed still allowing amount data transferred",
        "one way construct wider memory use multiple chips connect data inputs outputs chip separately way, left chip handles high n bits input writes produces high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way construct larger memory use multiple chips one address bits drive decoder determines two chips active decoder enabled chip select signal larger memory way, neither chip enabled external cs low",
        "the main difference sram dram sram faster uses transistors, dram slower uses fewer transistors dram also denser sram, meaning bits stored given area",
        "a dram cell stores bit using charged capacitor charge capacitor drains time must replaced order maintain stored value",
        "a sense amplifier circuit used read data stored memory cell sense amplifier amplifies small signal memory cell converts digital signal read processor",
        "a row natural basis refresh cycle dram data pins provide bidirectional signals reading writing elements dram output enable input, oe, controls tri-state buffers dram determine whether dram drives data pins we input, controls type operation, also present",
        "sdram type dram used main memory computers ddr4 sdram newer type dram faster sdram",
        "dram used storing data capacitor capacitor attached bit line transistor controlled select line select line low, capacitor isolated holds charge however, transistor's resistance finite, charge leaks onto bit line",
        "dram type memory uses capacitors store data row dram selected, cells row read written back, refreshes data cells dram said destructive reads read operation brings voltage capacitor closer intermediate voltage level, effectively destroys data cell",
        "the benefits using dram denser sram uses fewer transistors makes dram ideal applications size important speed",
        "there several disadvantages using dram first, dram slower sram second, dram less dense sram, requires chip area store amount data finally, dram cells complex sram cells, difficult design manufacture",
        "dram type memory slower sram denser (has bits per chip area) dram cells use single transistor, sram cells use six transistors dram designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor count",
        "dram type capacitive storage, bit stored charging charging capacitor capacitor attached bit line transistor controlled select line select line high, capacitor isolated holds charge however, transistor's resistance finite, charge leaks onto bit line charge also leaks substrate transistor constructed",
        "a dram cell refreshed reading contents writing back active logic process necessary avoid data loss due charge leakage capacitor",
        "a sense amplifier device used amplify signal sensor typically used amplify signal small sensor, pressure sensor, level read larger device, computer",
        "the ras signal indicates row component address available raising ras signal row destructively reads contents cells row, forcing cells rewritten effecting refresh row thus natural basis refresh cycle",
        "the column address strobe (cas) input used indicate address components available used control type operation (read write)",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, problem solved",
        "the lab simulates two-level logic used map expression cmos gates also shows graphically manipulate expressions understand gate diagrams",
        "the fsm stoplight controller ensures lights one roads red times controller also alternates green lights two roads",
        "the vending machine application fsm designed team engineers fsm designed control simple vending machine accepts us coins payment offers choice three items sale machine adjustable item prices, fsm needs keep track much money inserted order decide whether user purchase one items",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, servo held place, desired",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab",
        "juan jos'e jaramillo identified common failure modes, including variability caused sunshine windows eceb, made changes improve robustness also created powerpoint slides typically used describe lab lecture",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "prof doug jones designed vending machine application fsm first identifying different states machine could in created state diagram showed machine would transition one state another finally, implemented fsm hardware using altera quartus software",
        "prof chris schmitz prototyped constructed physical elements help ece shop designed vending machine application fsm, prof doug jones created wiki documentation altera quartus portions lab casey smith, head guru ece instructional labs, developed new debounce design made changes improve robustness",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab based lab earlier mentor graphics work prof herman prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "prof kindratenko helped scale design way made possible deliver 400 students entering ece every semester creating wiki documentation altera quartus portions lab also helped improve robustness lab identifying common failure modes making changes design",
        "jaramillo later identified common failure modes, including variability caused sunshine windows eceb, made changes improve robustness also created powerpoint slides typically used describe lab lecture",
        "a signal used set timer f 0, timer set state changes",
        "this synchronous fsm implemented digital logic fsm finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs",
        "the first optical sensor used detect presence chip chip present, sensor turns chip used chip present, sensor turns chip cannot used sensor used save energy turning chip needed",
        "the second optical sensor used detect chip finishes work chip turn save energy metric used guide process optimizing logic expressions balance struck different metrics involved",
        "if rise fall rising clock edge, processor would able recognize interrupts instructions would cause program terminate unexpectedly",
        "the device used turn save energy done using heuristic approaches find solutions strike balance different metrics, cost, power, performance human engineer impose constraints, limits chip area limits minimum performance, order guide process",
        "to use device, user presses one buttons user presses one button, device produces lychee ice cream user presses blend button, device produces blend user presses mango button, device produces mango ice cream",
        "the signal indicates interrupt occurred interrupt could generated external device, disk drive keyboard, error program executed, undefined instruction attempt divide zero",
        "the significance rising edge signal second sensor indicates presence object field view sensor rising edge signal indicates sensor detected change intensity light receiving",
        "a input operand and function and function evaluates 1 input operands equal 1 input operand or function or function evaluates 1 input operand equal 1",
        "there two optical sensors positioned different heights device first sensor positioned high enough slope dime passes beneath sensor, allowing signal produced sensor tell us whether coin dime quarter second sensor positioned coins pass front it signal second sensor used clock fsm",
        "the device uses two optical sensors differentiate dime quarter first sensor positioned dime passes beneath it, second sensor positioned coins pass front it rising edge clock signal second sensor occurs, signal first sensor indicates whether coin dime quarter",
        "the device uses sensors generate clock signal alternating 0 1 regular period clock 0, one set latches holds bit values fixed, combinational logic uses latches inputs produce bits copied second set latches clock 1, second set latches stops storing data inputs retains bit values order drive combinational logic, results copied third set latches",
        "the fsm uses signal determine whether accept reject coin checking rising edge signal second sensor rising edge occurs, signal first sensor indicates whether coin quarter (t=1) dime (t=0) sample timing diagram lab appears right clock signal generated lab square wave---in words, high low portions equal---but also unlikely periodic instead, ``cycle'' defined time coin insertions",
        "the output depend input function and evaluate 1 input values 1 input value 0, function evaluate 0",
        "the possible inputs fsm dime (t=0) quarter (t=1) machine reject input user tries purchase item without inserting enough money first, fsm also reject request",
        "the possible outputs fsm a=1 p=1 f signal used set timer, either 0 1 f=0, timer set state changes f=1, timer set state changes light one roads green",
        "the start state initial state fsm state, money deposited yet fsm needs keep track much money inserted order decide whether user purchase one items information alone enough simplest machine, let's create machine adjustable item prices",
        "the dime quarter states used represent user inserted one coin purpose states output a=1 p=0, indicating user yet paid full price another coin needed",
        "the rejectd rejectq states used handle user mistakes user enters second dime dime state, fsm reject coin rejectd state rejects dime (a=0) continues wait quarter (p=0) rejectq state used handle user inserts one quarter",
        "the start state first state fsm sequence used initialize fsm",
        "the dime state state machine waiting dime inserted first state machine accepts coin machine outputs a=1 p=0 state, indicating user yet paid full price 35 cents",
        "the 'quarter' state refers fact addition unit 4-bit examples closed addition means value n, easily find two 4-bit unsigned numbers that, added together, cannot represented 4-bit unsigned number n=4, example, add 12 (1100) 6 (0110) obtain 18 since 18 outside range [0,2^4-1] representable using 4-bit unsigned representation, representation breaks try represent sum using representation",
        "the paid state state user paid full price 35 cents next states paid dime dime inserted quarter quarter inserted",
        "the 'rejectd' state state processor interrupts program due error unexpected behavior state usually causes program terminate",
        "the user purchases item inserting either dime followed quarter, quarter followed dime user inserts second dime, machine reject coin user inserts second quarter, machine accept coin user paid full price 35 cents",
        "the state representation lab fsm 3-bit binary number, following meaning: s_2: type last coin inserted (0 dime, 1 quarter) s_1: one quarter inserted (1 yes, 0 no) s_0: one dime inserted (1 yes, 0 no)",
        "based passage, least 33 bits internal state needed fsm needs track number cycles needed serial comparator execute comparison, least 32 cycles additionally, fsm needs track whether loop done, requires least one additional bit",
        "each bit pattern represents column addition problem carry bit (c_) added b bits produce sum bit (s_) carry bit (c_)",
        "the meaning assigned bit patterns makes easier understand behavior fsm example, paid state, last coin inserted may either type, type all, since decided start fsm state well however, four states, meanings provide clear understanding state fsm",
        "our machine accept pennies, let's fsm keep track much money inserted multiple 5 cents (one nickel) table right shows five types coins, value dollars, value terms nickels expensive item machine might cost dollar two, fsm must track least 20 40 nickels value let's decide use six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "the state table represents six states loop defined next-state logic, two remaining states converging loop single cycle lights red states, necessary safety",
        "the k-map represents domain function form hypercube hypercube divided regions, corresponds product literals function evaluated point hypercube, product literals implicant function function evaluates 1 point",
        "there 63 possible states paid state machine track 315 dollars worth nickels, 63 nickels",
        "prof jones assigns bit patterns way makes easy humans understand meaning states example, paid state, last coin inserted may either type, type all, since fsm starts state however, four states, meanings clear easy apply",
        "this particular example tricky requires reader understand concept bit-sliced addition order understand passage furthermore, passage provide clear explanation bit-sliced adder circuit works, making difficult reader follow along",
        "the s_2 value specifies number inputs must satisfied order output 1 cuts number possible choices four two case two possible combinations inputs satisfy condition",
        "one reason try leverage fact next-state patterns two states relevant may simplify design system next-state patterns needed, system designed without them, may make design process simpler faster additionally, eliminating next-state patterns may also reduce cost system",
        "the final state table state transition diagram appear follows: the final state table lists six states loop defined next-state logic, two remaining states converging loop single cycle table also includes states outside desired loop lights red states, necessary safety the state transition diagram shows six states loop defined next-state logic, two remaining states converging loop single cycle diagram also shows duration state",
        "the purpose fsm control stoplights busy intersection fsm ensures lights always red one roads, yellow light shown green light, green lights alternated two roads",
        "the input sequence 111010010001 significant determines duration state fsm",
        "the input sequence 001 causes stoplight turn red roads necessary safety",
        "the design easy test two-level logic design means inputs outputs easily tested nand nor gate additionally, design easy test sop expression means inputs outputs easily tested or gate",
        "scan-based testing method testing input scanned converted appropriate result programmer responsible ensuring number conversions format string matches number arguments provided programmer must also ensure type information produced conversion stored address passed conversion",
        "we test circuit build lab see correctly implements fsm outlined notes this, input known sequence 0s 1s see circuit outputs correct responses does, confident circuit functioning correctly",
        "scan-based testing type testing used test functionality design type testing typically used test digital designs",
        "the input sequence used initialize fsm sequence 0s 1s input fsm order set state fsm desired state",
        "the input sequence used test fsm sequence 0s 1s applied inputs fsm input sequence used determine output fsm",
        "the outputs needed observe state check output logic values state register timer outputs used determine duration state order states occur",
        "it difficult test sequential logic difficult predict behavior system sequential logic difficult test difficult determine whether system halt finite number steps not",
        "scan-based testing type testing input scanned errors processed type testing often used test software errors",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "the input sequence initialization is: 1) value r0 10, 2) value r1 20, 3) value r2 30",
        "the input sequence testing follows: first, user prompted input two integers decimal form, converted 2's complement stored variables 'a' 'b' next, user prompted input ascii character, value hexadecimal, double-precision floating-point number, stored variables 'c', 'u', 'd', respectively finally, user prompted input two real numbers decimal form, converted single- double-precision floating-point numbers stored variables 'f' 'd', respectively",
        "an fsm finite state machine, model computation used design computer programs hardware fsm defined set states, set inputs, set outputs, set transitions states",
        "an encoder device converts signal message code code usually binary code, sequence 0s 1s code used represent signal message form read machine, computer",
        "a decoder logic circuit converts binary code corresponding decimal code decoders used variety applications, including data storage transmission, error detection correction, address decoding",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "a digital fsm model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called { transition rule} fsm comprises five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs",
        "an encoder helps implement fsm design translating user's input signal used fsm encoder produces signal p indicating user trying make purchase, two-bit signal indicating item user wants decoder takes signal produces individual item release signals r_1, r_2, r_3",
        "a decoder used fsm design generate release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "a digital fsm finite state machine implemented digital system means states must represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits addition, transition rules must complete, meaning given state fsm pattern input bits, transition must defined another state",
        "the game revolves around old logic problem farmer must cross river order reach market farmer traveling market sell fox, goose, corn farmer boat, boat large enough carry fox, goose, corn time fox cannot left alone goose, fox eat goose goose cannot left alone corn, goose eat corn farmer get three items market",
        "a digital fsm used control stoplights intersection two roads fsm two inputs, f, two outputs, l1 l0 output fsm used control stoplights fsm designed stoplights red one roads times road green light, controller show yellow light showing red light give drivers warning allow slow down finally, fairness, controller alternate green lights two roads",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "one could design game controller logic puzzle would buttons corresponding different operations could performed logic puzzle example, could button add new element puzzle, button remove element puzzle, button change value element puzzle game controller could also display would show current state puzzle player's progress",
        "the stoplight controller must ensure lights one roads red times similarly, road green light, controller show yellow light showing red light give drivers warning allow slow down finally, fairness, controller alternate green lights two roads",
        "what ideas used reduce number metrics some ideas used reduce number metrics include: identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "the purpose fsm control stoplight stoplight must red one roads times, controller show yellow light showing red light give drivers warning allow slow down controller also alternate green lights two roads",
        "passage - compact approaches comparing functions, solutions subject later class (such ece 462) {two-level logic} { two-level logic} popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams begin one demorgan's laws, illustrate algebraically graphically: c = b+a = {file=part2/figs/demorgan-nandeps,width=095in} let's say function expressed sop form, z=abc+de+fghj diagram left shows function constructed three and gates or gate using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate invert point along wire, slide bubble wire output first column",
        "the inputs fsm states two roads, outputs colors lights two roads fsm ensures lights one roads red times, lights road green fsm also alternates green lights two roads",
        "the fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "why two-level logic popular two-level logic popular simple map expressions cmos gates additionally, easy understand gate diagrams",
        "the state fsm split two pieces: 3-bit register 6-bit timer timer simply binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "1 three ranges possible measurement values given metric the three ranges possible measurement values given metric values equivalently useful, ordered interesting respect one another, impossible use practice",
        "interrupts priority exceptions interrupts generated external devices, exceptions generated processor itself interrupts also asynchronous, exceptions not",
        "the vending machine fsm designed control release items vending machine based user's purchase request fsm uses priority encoder determine item user requested, decoder generate individual item release signals",
        "the fsm five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs class, focus clocked synchronous fsm implementations, fsm's internal state bits stored flip-flops",
        "the coin accept bit item release bits used indicate whether coin accepted whether item released, respectively",
        "the transitions states well-defined fsm timer counts produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the numeric representation money held used track value money inserted machine allows machine keep track much money inserted reject coins value high",
        "the fsm responsible controlling stoplights busy intersection ensures lights always red one roads, green light always followed yellow light, green lights alternated two roads",
        "the fsm needs keep track loop index, current minimum value, progress serial comparator",
        "the fsm needs track state stoplight duration state",
        "the fsm responsible controlling stoplights busy intersection ensures lights one roads red times, road green light, controller show yellow light showing red light",
        "the output fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "a priority encoder type encoder generates signal whenever input lines active, encodes index highest active input two-bit unsigned number priority encoder used determine input lines highest priority",
        "what three ranges given metric the first range measurement values equivalently useful second range possible values ordered interesting respect one another values third range impossible use practice",
        "a decoder type logic circuit takes input signal produces one output possible value signal decoder similar multiplexer number inputs outputs however, decoder one input signal, multiplexer multiple input signals",
        "what difference sop pos sop (sum products) boolean algebra expression or anded terms, pos (product sums) expression and ored terms",
        "the main difference mux decoder mux multiple inputs one output, decoder one input multiple outputs mux used select one several input signals send output, decoder used interpret input signal produce several output signals",
        "a decoder logic circuit converts binary code set signals used operate device decoder takes input signal, typically one coded binary number, produces one output possible value signal decoder enabled (en=1), and gates produces one minterm input signal s decoder enabled (en=0), decoder produces 0 bits",
        "how multi-metric optimization useful engineering multi-metric optimization useful engineering allows engineers identify important metrics balance design effectively according them multi-metric optimization also allows engineers get rid many metrics possible focus important ones",
        "a decoder device converts coded signals usable information decoders used variety applications, error detection correction",
        "a decoder logic circuit converts coded inputs coded outputs, usually one output code input code decoders used variety applications, including data storage transmission, error detection correction, data compression",
        "a decoder similar mux allows one digital signal select several others forwarded output decoder one input multiple outputs, mux multiple inputs one output decoder thought special case mux",
        "a decoder logic device converts binary information form one code another, usually natural binary code multiplexer device selects one several analog digital input signals forwards selected input single output line",
        "a priority encoder type encoder assigns priority certain input signals used determine input signal given priority multiple input signals present",
        "a priority encoder type encoder assigns priority certain input signals priority encoder takes signal produces output signal indicates input signal highest priority output signal typically binary number used select one input signals",
        "a decoder logic circuit converts signals one form another binary form, decoder used convert binary number decimal number",
        "a priority encoder circuit takes number input signals, outputs code represents highest priority input signal output code usually binary number",
        "a mux logic block allows us use one digital signal select several others forwarded output decoder logic block converts binary code set signals",
        "the decoder generates release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "a decoder used context simplify expression logic function using decoder, function expressed two-level logic function, easier understand manipulate",
        "the value register price1 price first item machine, determined owner machine",
        "the value register price2 number nickels machine multiplied price item question way, machine keep track much money inserted much owed item",
        "the value register price3 price third item machine, determined owner machine",
        "the value register n corresponds number nickels inserted machine user inserts quarter, machine transition state n+5, indicating 5 nickels inserted user attempts purchase item without inserting enough money first, machine remain state reject request",
        "the value register equivalence class sum two 4-bit numbers case, sum 18, equivalent 2 (mod 16)",
        "what significance demorgan's law demorgan's law popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "the register price1 six bits allows machine keep track 315 (63 nickels)",
        "what difference two-level logic forms logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "the value register price2 number nickels inserted machine",
        "what reason popularity two-level logic the reason popularity two-level logic simple way express logic functions two-level logic popular way expressing logic functions simple way express logic functions",
        "what difference sop pos sop form two-level logic, pos form multi-level logic sop popular simpler manipulate expressions algebraically graphically",
        "the value v 10 cents dime inserted dime worth 10 cents, machine tracks value money inserted terms nickels therefore, dime inserted, machine records 2 nickels",
        "passage - two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams question - what two levels two-level logic",
        "the vending machine knows much item costs owner machine sets prices dynamically machine keeps track much money inserted multiple 5 cents (one nickel) expensive item machine might cost dollar two, fsm must track least 20 40 nickels value",
        "the vending machine keeps track much money inserted multiple 5 cents (one nickel) six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "the vending machine uses sensors detect coin inserted first sensor positioned dime pass beneath it, second sensor positioned coins pass front it signal second sensor used clock fsm, signal first sensor indicates whether coin dime quarter",
        "the vending machine releases item using decoder generate three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the vending machine knows purchase requested user pushes one item selection buttons causes priority encoder produce signal p indicating user trying make purchase",
        "the input fsm reset button r, four buttons b_f, b_x, b_g, b_c fsm produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs",
        "the output fsm position farmer, fox, goose, corn output either left bank right bank river game also two indicators: w reaching winning state, l reaching losing state",
        "the state represented fxgc, f position farmer, x position fox, g position goose, c position corn game five buttons: reset, cross alone, cross fox, cross goose, cross corn game stops player wins loses",
        "the next state fxgc=0101 farmer bank fox, corn, b_x b_c buttons ignored, leading next-state table right notice b_g accepted even b_c pressed farmer bank corn",
        "the player wins game getting four entities (farmer, fox, goose, corn) right bank river player makes mistake, game lose",
        "the player loses game able correctly answer question player gets question wrong, start game beginning",
        "the input fsm 3-bit register 6-bit timer timer used count produce output z=1 reaches 0 register used store state fsm",
        "the output fsm sequence red, yellow, green lights alternate two roads duration state determined signal f f 0, timer set state changes f 1, timer set state changes light one roads green",
        "the priority encoder used determine item user wants purchase, generate signal indicating user trying make purchase output priority encoder used select value one price registers, subtracted current number nickels stored register purchase successful, price subtracted number nickels item released",
        "the player loses game able get correct answer question player gets correct answer, win game",
        "when player loses, output fsm looks like red roads controller must ensure lights one roads red times",
        "the fsm handles multiple input events single clock cycle first storing input events queue fsm ready process input event, dequeues event queue processes it",
        "the outputs fsm states stoplights stoplights either red, green, yellow fsm controls duration light",
        "the purpose fsm control stoplights busy intersection fsm ensures lights one roads red times, road green light, controller show yellow light showing red light",
        "the signal f 1 timer reaches 0 state changes",
        "the state fsm split two pieces: {3-bit} register {6-bit} timer timer simply binary counter counts downward produces output z=1 reaches 0 notice register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle we thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the fsm ensures lights one roads red times keeping track state light light green, turn yellow red light red, stay red",
        "the fsm shows yellow light showing red light setting timer specific value state fsm changes value set signal f, calculated bottom fsm logic diagram",
        "the fsm alternates green lights two roads setting timer different value state fsm changes causes lights change color cycle-by-cycle basis, green light alternating two roads",
        "the signal f used set timer certain conditions particular, used set timer state changes",
        "the fsm initialized state \"000\" order ensure lights one roads red times timer set \"a\" order maintain new value number cycles",
        "the stoplight controller 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the stoplight controller ensures lights one roads red times using state machine six states states determined inputs fsm, states two roads output fsm controls lights two roads controller alternates green red lights two roads",
        "the stoplight controller shows yellow light showing red light order give drivers warning allow slow down",
        "the stoplight controller alternates green lights two roads changing value register s value changed timer reaches 0, timer set enters new state duration state determined value register s",
        "the signal f allows timer set conditions, addition state changes allows flexibility duration state",
        "starting human-based design process typically results design efficient effective one mapped high-level programming language human designers easily optimize design specific metrics, power consumption performance additionally, human designers easily impose constraints design, limits chip area minimum performance, order guide design process",
        "mapping bits gates means design circuit performs operation single bit passes necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "the control structure code maps high-level fsm design breaking program simple steps mapping step state fsm number states fsm depend number steps program",
        "the general model computer system execute set instructions, called program, store resulting data system set registers hold data instructions, set memory locations store data programs system also set input output devices allow interact outside world",
        "the purpose process find best formulation specific logic function given metric done using heuristic approaches find solutions strike balance various metrics cost, power, performance",
        "the two approaches fsm design state-transition table state diagram state-transition table lists possible states system in, state diagram shows sequence states system goes through state-transition table compact easier use comparing functions, state diagram intuitive easier understand",
        "the purpose notes introduce important abstraction logic design, use abstraction design ripple-carry adder ripple-carry adder adder adds single bit passes necessary information another copy itself design less efficient designs optimized specific purpose, simplicity approach makes tradeoff interesting one",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "a finite state machine model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called transition rule",
        "a computer machine programmed carry set arithmetic logical operations automatically fsm model behavior composed finite set states, transitions states, actions",
        "one way transform code written high-level language fsm use compiler compiler program translates code written high-level language code run computer another way transform code written high-level language fsm use interpreter interpreter program executes code written high-level language",
        "the control structure code maps high-level fsm design breaking program simple steps, one step flow chart may sometimes require one state fsm similarly, one fsm state may able implement several steps flow chart, steps performed simultaneously",
        "one design fsm executes simple pieces flow chart breaking program smaller steps mapping step state fsm one also use registers counters implement variables program, use comparator implement test statement",
        "the general model computer turing machine mathematical model computer used simulate computer",
        "one way build fsm allows pieces executed specified fsm built use state machine output routed different inputs allows fsm configured execute different pieces code based input another way build fsm allows pieces executed specified fsm built use state machine multiple states executed parallel allows fsm configured execute different pieces code parallel based input",
        "the problem code trying solve halting problem halting problem problem cannot solved turing machine problem given turing machine input turing machine, possible determine whether machine finish computing finite number steps",
        "what difference sop pos sop pos two forms two-level logic sop, output true inputs true pos, output true inputs true",
        "the array notation code means code trying convert input user appropriate result, store result memory address given next argument",
        "1 difference two-level three-level logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic three-level logic way expressing logic functions using three levels three levels refer number functions input passes reach output, sop pos forms examples three-level logic",
        "the idx variable used keep track number operations logic expression metric used estimate number transistors needed design, turn estimate area required design",
        "the min variable heuristic metric used estimate time needed compute function metric based longest chain operations performed instance variable rationale metric gate outputs change instantaneously inputs change",
        "the flow chart represents steps taken designing new product first step think carefully metrics possible interest second step get rid many metrics possible third step identify metrics practical impact current technology fourth step set threshold values metrics simplify reasoning them fifth step eliminate redundant metrics sixth step calculate linear sums reduce count metrics seventh step make use notion pareto optimality",
        "what reason popularity two-level logic the popularity two-level logic due fact simple way express logic functions additionally, two-level logic easy map cmos gates",
        "there three variables used code, x, y, z value x initialized 42, value initialized x value z initialized"
    ],
    "68": [
        "the first examples passage two-level logic, demorgan's law, sop form two-level logic popular way expressing logic functions, demorgan's law way simplify expressions sop form way representing logic function",
        "the design process involves manipulation logic expressions order optimize specific metrics, cost, power, performance today, manipulation performed almost entirely computers, human engineers supplying logic functions interest imposing constraints process",
        "an fsm must initialized ensure starts known state allows fsm function correctly avoid potential problems could arise unknown starting state",
        "one important reason compatibility components digital system helps ensure system function correctly components compatible, system may work correctly, may work all additionally, compatibility among components help reduce cost manufacturing system, well cost maintaining repairing system",
        "a gray code counter device used count number operations logic expression device works counting number variables expression adding number operations device used optimize logic expressions reducing number operations needed implement logic function",
        "the output counter number successful conversions made scanf function",
        "it important reasonable order designing logic diagram help simplify design process make easier understand function logic diagram additionally, help ensure logic diagram compatible products may used system",
        "from passage, inferred logical completeness necessarily help efficient design logic functions words, single boolean logic function expressed many different ways therefore, important engineers learn develop efficient implementation function, well determine whether two logic expressions identical without actually writing truth tables",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills students learn coming months",
        "a karnaugh map graphical representation boolean function helps simplify function map consists grid squares, corresponds possible combination input values map used find groups product terms implicants function",
        "the next-state logic equations functions describe relationship current state system next state system functions represented either sop pos form demorgan's law used simplify functions replacing or gates nand gates, and gates nor gates",
        "logical completeness necessarily help efficient design logic functions single boolean logic function expressed many different ways, learning develop efficient implementation function well determine whether two logic expressions identical without actually writing truth tables important engineering skills start learn coming months",
        "the purpose adding and gates input create logic function efficient terms area power done reducing number variables expression",
        "there several benefits using fsm one benefit fsm used implement wide range logic functions another benefit fsm used construct larger memories multiple smaller memories finally, fsm used reduce number pins needed chip",
        "the ``halt'' button ice cream dispenser stops machine dispensing ice cream useful user wants stop machine dispensing ice cream, machine malfunctioning needs stopped",
        "if use gray code, would compare two expressions determine whether represent logic function would test logical equivalence, important part hardware design however, tools today provide help problem, necessary use gray code",
        "one reason important start representation makes sense human humans must supply logic functions interest, must program acceptable transformations equivalent forms second reason complexity problem good way introduce real engineering finally, contextual information help develop better understanding finite state machines higher-level abstractions form core digital systems still defined directly humans today",
        "the similarity equations s_1^+s_0^+ equations {2-to-1} mux used represent logic function two-level logic popular way expressing logic functions simple map expression cmos gates using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate",
        "a input operand and function and function evaluates 1 input operands equal 1 input operand or function or function evaluates 1 input operand equal 1",
        "the output depend input function and evaluate 1 input values 1 input value 0, function evaluate 0",
        "the k-map represents domain function form hypercube hypercube divided regions, corresponds product literals function evaluated point hypercube, product literals implicant function function evaluates 1 point",
        "we test circuit build lab see correctly implements fsm outlined notes this, input known sequence 0s 1s see circuit outputs correct responses does, confident circuit functioning correctly",
        "scan-based testing type testing used test functionality design type testing typically used test digital designs",
        "passage - compact approaches comparing functions, solutions subject later class (such ece 462) {two-level logic} { two-level logic} popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams begin one demorgan's laws, illustrate algebraically graphically: c = b+a = {file=part2/figs/demorgan-nandeps,width=095in} let's say function expressed sop form, z=abc+de+fghj diagram left shows function constructed three and gates or gate using demorgan's law, replace or gate nand inverted inputs bubbles correspond inversion need sit input gate invert point along wire, slide bubble wire output first column",
        "a decoder used context simplify expression logic function using decoder, function expressed two-level logic function, easier understand manipulate",
        "what significance demorgan's law demorgan's law popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "what difference two-level logic forms logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams",
        "what reason popularity two-level logic the reason popularity two-level logic simple way express logic functions two-level logic popular way expressing logic functions simple way express logic functions",
        "passage - two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic section, illustrate one reasons popularity show graphically manipulate expressions, sometimes help trying understand gate diagrams question - what two levels two-level logic",
        "the purpose process find best formulation specific logic function given metric done using heuristic approaches find solutions strike balance various metrics cost, power, performance",
        "the two approaches fsm design state-transition table state diagram state-transition table lists possible states system in, state diagram shows sequence states system goes through state-transition table compact easier use comparing functions, state diagram intuitive easier understand",
        "1 difference two-level three-level logic two-level logic popular way expressing logic functions two levels refer simply number functions input passes reach output, sop pos forms examples two-level logic three-level logic way expressing logic functions using three levels three levels refer number functions input passes reach output, sop pos forms examples three-level logic",
        "the min variable heuristic metric used estimate time needed compute function metric based longest chain operations performed instance variable rationale metric gate outputs change instantaneously inputs change",
        "what reason popularity two-level logic the popularity two-level logic due fact simple way express logic functions additionally, two-level logic easy map cmos gates",
        "the design process digital fsm includes six steps: developing abstract model, specifying i/o behavior, completing specification, choosing state representation, calculating logic expressions, implementing flip-flops gates",
        "an fsm must initialized ensure starts known state avoid undefined behavior without initialization, fsm may produce incorrect results may work all",
        "a multiplexer digital logic block allows one digital signal select several others forwarded output simplest form multiplexer 2-to-1 multiplexer, two inputs left one top top input allows us choose left inputs forwarded output",
        "the choice representation fsm's internal state affects complexity implementation terms number states, number inputs, number outputs, number transition rules",
        "the design process digital fsm typically consists six steps: (1) developing abstract model, (2) specifying i/o behavior, (3) completing specification, (4) choosing state representation, (5) calculating logic expressions, (6) implementing flip-flops gates",
        "an abstract model mathematical model used describe system usually simplified include details system",
        "a multiplexer device allows multiple signals routed onto single channel done selecting one several input signals connecting output multiplexers used variety applications, telecommunications computer networking",
        "from passage, seems digital fsm designed abstract model first identifying finite set states, set possible inputs, set possible outputs, set transition rules then, fsm implemented digital system representing states patterns using fixed number bits, translating inputs bits, translating outputs bits finally, transition rules defined given state fsm pattern input bits, transition defined state another state",
        "a fsm implemented digital system, states represented patterns using fixed number bits, inputs translated bits, outputs translated bits transition rules must complete, meaning given state fsm pattern input bits, transition must defined state another state outputs digital fsm calculated using boolean logic expressions",
        "the design process counter number states power two choose representation states makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "the fsm initialized one six states desired loop ensures lights roads red cars waiting one roads",
        "the choice representation fsm's internal state affects complexity implementation states represented bit patterns, transition rules must complete states represented abstract states, outputs state must specified",
        "the first step design process develop abstract model model translation human language description model states desired behavior model particularly thorough exact stage",
        "the second step design process think carefully metrics possible interest set metrics feel complete, next step get rid many can",
        "the third step design process identify metrics practical impact current technology, set threshold values metrics simplify reasoning them, eliminate redundant metrics, calculate linear sums reduce count metrics, and, finally, make use notion pareto optimality",
        "the fourth step design process choose particular design set possible designs making choice, engineers typically consider variety factors, including cost, performance, manufacturability, reliability",
        "the fifth step design process select internal representation bits necessary encode state fsm practice, small designs, representation selected computer way optimize implementation however, large designs, lc-3 instruction set architecture study later class, humans work hand",
        "the first step design process develop abstract model model captures intent description particularly thorough exact",
        "the third step design process evaluate design using multiple metrics includes identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "the fourth step design process choose particular design set possible designs choice made based number factors, including objectives design, constraints problem, preferences designer",
        "abstraction process simplifying complex system identifying important aspects system ignoring rest context implementation, abstraction used simplify design identifying important features design ignoring rest make design manageable easier understand",
        "there reasons important make implicit assumptions clear design process first, assumptions made clear, lead confusion misunderstanding among team members working design second, making assumptions explicit help ensure everyone page working towards goal finally, explicit assumptions help prevent errors mistakes design process",
        "the choice state representation affects implementation fsm terms number gates inverters required, well delay overall design serial comparator design based 2-bit slice variant, example, requires 24 gates 10 inverters, much larger earlier serial design terms gate delays, however, new design identical, meaning comparisons finished half time realistic area timing metrics show slightly difference two designs differences dominate results design carefully considered",
        "the choice fsm's input output behavior affects design process determining set possible states set possible outputs set possible states determined set possible inputs, set possible outputs determined set possible outputs",
        "a gray code sequence n-bit patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit construct gray code recursively follows: (n+1)-bit gray code, write sequence n-bit gray code, add 0 front patterns sequence, append second copy n-bit gray code reverse order, put 1 front patterns second copy",
        "the inputs gray code counter current state counter clock signal clock signal triggers state change counter",
        "the transition diagram two-bit gray code counter loop counter moving one state next cycle state diagram marked internal state value s_1s_0 (before ``/'') output z_1z_0 (after ``/''), always equal counter",
        "the implementation gray code counter developed first filling k-maps next-state values, deriving algebraic expressions next-state logic used develop implementation",
        "the inputs counter coins inserted machine machine track value coins terms nickels reject coins inserted would cause value exceed maximum value machine track",
        "a gray code counter type digital counter used count number clock pulses named frank gray, invented code 1953 main advantage gray code counter types counters less likely produce errors counting",
        "a gray code counter type counter uses gray code, cycle bit patterns certain length consecutive patterns differ exactly one bit regular counter type counter use gray code",
        "the timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle states thus act like counter",
        "a gray code counter type counter cycles possible bit patterns certain length states transition diagram gray code counter form loop, counter moving one state next cycle state diagram marked internal state value output value, always equal counter",
        "there benefits using gray code counter first, easy design implement second, easy check correctness logic third, easy read understand logic",
        "a gray code counter used applications digital value must changed incrementally least number steps gray code counter changes one bit time, minimizes number digital values must changed",
        "a gray code counter type digital counter uses gray code generate output input gray code counter digital signal represents number clock pulses applied counter output gray code counter digital signal represents number clock pulses applied counter, plus one",
        "a gray code counter designed first creating transition diagram shows states outputs counter next, next-state logic developed creating k-maps next-state values deriving algebraic expressions finally, next-state logic implemented diagram",
        "the internal state value third bit gray code counter s_2s_1s_0=001 hold=1, next-state logic s_1^+ s_0^+ reduces s_1^+=s_1 s_0^+=s_0; words, counter stops counting simply stays current state hold=0, equations become s_1^+=s_0 s_0^+={{s_1}}, produces repeating sequence s_1s_0 00, 01, 11, 10, desired",
        "the output third bit gray code counter would either 0 1 input 0, output 1 input 1, output 0",
        "the next state value s2 0 timer set state changes, find duration state analyzing muxes bottom mux selects s_2=0, selects output top mux s_2=1",
        "the next state value s0 0 timer set state changes, find duration state analyzing muxes bottom mux selects s_2=0, selects output top mux s_2=1 top mux selects b s_0=1, selects c s_0=0",
        "the fully-specified transition diagram three-bit gray code counter follows: the states counter form loop, counter moving one state next cycle each state diagram marked internal state value s_2s_1s_0 (before \" / \") output z_2z_1z_0 (after \" / \") based transition diagram, next-state values s_2^+, s_1^+, s_0^+ filled shown",
        "the next-state values three-bit gray code counter follows: s_2^+=0, s_1^+=s_0, s_0^+={{s_1}}",
        "the next-state logic three-bit gray code counter follows: s_2^+ = s_2 + s_0 s_1^+ = s_2 s_0^+ = s_2 s_1",
        "the implementation diagram three-bit gray code counter logic diagram shows inputs, outputs, next-state logic counter diagram ordered left right {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2, makes easy read check correctness",
        "the vertical lines carrying current state values inverses back next state logic inputs ordered left right (on left side figure) {{s_0}}s_0{{s_1}}s_1{{s_2}}s_2",
        "adding third bit gray code counter increases design complexity requires additional carry bit carry bit must propagated adder bit slice logic, increases number logic gates required overall complexity design",
        "one way reduce design complexity make use common algebraic terms sub-expressions help simplify design make easier understand another way reduce complexity use demorgan's laws simplify expression help reduce number gates needed make design efficient",
        "the counter's implementation diagram simplifies understanding diagram breaking smaller, manageable pieces this, easier see various parts diagram interact other additionally, makes easier identify potential problems areas improvement",
        "the purpose vertical lines carrying current state values inverses back next state logic inputs ensure state fsm always consistent necessary safety reasons, fsm must always ensure lights one roads red times",
        "the color mapping three-bit rgb encoding system system colors represented combination red, green, blue light color mapping system shown right imagine charged creating counter drive light sequence colors",
        "the light red one roads times road green light, controller show yellow light showing red light give drivers warning allow slow down finally, fairness, controller alternate green lights two roads",
        "the next-state values s_2, s_1, s_0 given table right states act like counter, examining connections, derive equations next state draw transition diagram six states loop defined next-state logic, two remaining states converging loop single cycle",
        "the equation s_2^+ follows: s_2^+ = + b + c, carry bit, b first bit added, c second bit added overflow occurs, s_2^+ = c",
        "yes, choose use counter's internal state directly output values colors need produce outputs unique bit patterns using counter's internal state directly output values, simplify design",
        "a fully-specified transition diagram diagram specifies states system in, well transitions states allows clear understanding behavior system",
        "the color mapping three-bit rgb encoding system colors produced unique bit patterns states form loop, marked internal state value s_2s_1s_0 output rgb",
        "the desired pattern one represents number 2's complement representation 2's complement representation defined choosing set integers balanced around zero groups so, want represent number 2's complement representation, need choose pattern represents number representation",
        "the transition diagram color sequencer loop six states, two remaining states converging loop single cycle lights red states, necessary safety timer set state changes, duration state calculated analyzing muxes",
        "the initial state three flip-flops implementation 0s 1s use init input choose normal operation (init=0) fsm forcing fsm next state given i_2i_1i_0 (when init=1)",
        "the timer set 0, state fsm changed next state sequence new state fsm determines duration next state, timer set accordingly",
        "the passage states power consumption important metric engineers must take account designs however, cases, desktop high-end server processors, metrics (such performance) may important always want operate edge interesting range could going wrong, engineers taking power consumption account much be",
        "one possibility fsm resetting properly, starts unexpected state another possibility race condition fsm, get unexpected state inputs change quickly",
        "the issue fsm getting unexpected states cause output circuit glitch problematic applications stable output required",
        "the fsm get unexpected states inputs set properly example, input set 111, fsm stay white state indefinitely",
        "the initial state three flip-flops implementation 0 state explicit mechanism initialization forces flip-flop 0 state alternatively, could add extra logic design would allow us force fsm specific state next cycle",
        "the first approach use flip-flop design add single bit pass necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "interrupts powerful exceptions occur asynchronously respect program means processor check interrupts instructions, allows flexibility design processor",
        "the light sometimes glows cyan red briefly appearing white controller must ensure lights one roads red times similarly, road green light, controller show yellow light showing red light give drivers warning allow slow down",
        "one possibility fsm resetting properly, start expected initial state another possibility race condition fsm, reach unexpected state inputs change quickly",
        "the initial state three flip-flops unknown unless explicit mechanism initialization initialization work two ways first approach makes use flip-flop design know, flip-flop built pair latches, make use internal reset lines latches force flip-flop 0 state (or 1 state) using additional input alternatively, add extra logic design",
        "one way make use internal reset lines latches force flip-flop 0 state done connecting reset lines latches 0 voltage source",
        "the passage discusses design serial comparator using bit-sliced approach approach leads design 24 gates 10 inverters, much larger earlier serial design however, new design identical terms gate delays, meaning comparison finished half time",
        "an abstract model simplified representation system, typically used aid understanding system context logic optimization, abstract model used help understand tradeoffs different logic expressions",
        "there four states second version table states a, b, c, d b on state, c off state",
        "the second version table implies buttons placed ergonomic way possible buttons close together enough space buttons edge table",
        "the design counter includes eight states, three state bits used keep track current state choice representation fsm's states dramatically affect design complexity right strategy thus often start selecting representation makes sense human, even requires bits strictly necessary",
        "the two states first column table states fsm f=0 case, timer set state changes, find duration state analyzing muxes",
        "the four counting states are: 1) state a: timer set s_2=0 duration state a 2) state b: timer set b s_0=1 duration state b 3) state c: timer set c s_0=0 duration state c 4) state d: timer set s_2=1 duration state d",
        "there four halted states: halt a, halt b, halt c, halt d states, counter retains current value user presses \"go\" button",
        "pressing ``halt'' button nothing counter halted counter remains state ``go'' button pressed",
        "pressing ``go'' button causes counter start counting",
        "an fsm finite state machine, mathematical model computation used design computer programs digital logic circuits abstract machine one finite number states",
        "there disadvantages using fsm first, fsm designed carefully, hard understand debug second, fsm use resources simpler design, state machine finally, fsm difficult change extend simpler design",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list components used identify high-level states implemented fixed number clock cycles",
        "the fsm implemented using registers, counters, comparator comparator used implement statement program registers counters used implement variables idx min program memory used implement array values program",
        "the input behavior machine based type coin inserted selection item purchase user inserts coin nickel, machine reject coin remain state user inserts nickel, machine transition next state accept coin user selects item purchase, machine release item user inserted enough money otherwise, machine remain state",
        "the output behavior add3 procedure takes three integers arguments, adds together, returns sum procedure called constants 10, 20, 30, result printed calling convention, call made, r0 must contain value 10, r1 value 20, r2 value 30",
        "the \"go\" button initiates system call causes processor enter kernel mode execute instructions associated system call instructions part operating system used perform desired action, printing character console",
        "the two-bit gray code sequence two-bit patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit",
        "there two control buttons: one east-west road one north-south road",
        "a gray code sequence patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit construct gray code recursively follows: (n+1)-bit gray code, write sequence n-bit gray code, add 0 front patterns",
        "the states transition diagram represent different colors stoplight first two states red, followed yellow, green last two states red",
        "the uninterrupted counting cycle represents duration state fsm used calculate duration state fsm f=0",
        "system calls initiated trap instruction, system calls also known traps many architectures, system call places processor privileged kernel mode, instructions implement call considered part operating system",
        "the purpose using gray code create sequence patterns includes possible patterns two adjacent patterns differ one bit code actually cycle: first last patterns also differ one bit",
        "the design continues choosing state representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "if user presses \"go\" button state {count a}, outputs c_l=11 c_m=01 means user get one half servings lychee half serving mango",
        "there explicit answer question passage however, based information given, seems user presses ``halt'' button state { count a}, system reset state { halt a}",
        "there two possible outcomes user presses ``go'' button state { halt a} first outcome fsm moves state { count b}, next state sequence second outcome fsm resets state { count a}, initial state",
        "there possible ways answer question one way would say user presses ``halt'' button state { halt a}, system reset state { count a} another way answer question would say user presses ``halt'' button state { halt a}, system remain state { halt a}",
        "there two possible ways user could press buttons state { halt a} first way user could press \"halt\" button \"go\" button case, fsm would move state { halt a} state { count b} second way user could press \"go\" button \"halt\" button case, fsm would move state { count b} state { halt a}",
        "if user presses \"go\" button (hg=01), ice cream cup overflow outputs c_l=11 c_m=10, means dispenser release full serving flavor, two servings total",
        "if ``halt'' button pressed (hg=10), counter remains halted state { halt a} buttons pressed (hg=11), ``halt'' overrides ``go,'' nothing special alone pressed counter halted thus, input patterns hg=10 hg=11 also take state { halt a} back itself",
        "if user presses buttons (hg=11), ice cream cup overflows outputs c_l=11 c_m=10, dispenser releases full serving flavor, two servings total",
        "if \"halt\" button pressed (hg=10), logic outputs c_l=00 c_m=00, dispenser gives ice cream buttons pressed (hg=11), outputs c_l=11 c_m=11, dispenser gives two servings flavor, four servings total",
        "the design counter completed applying decisions made { count a} state counting states, decisions made { halt a} state halted states results design states labeled internal state outputs (s_2s_1s_0/z_1z_0)",
        "one important reason consider possible input conditions possible states help ensure design correct example, design ever receives input values within certain range, possible design actually correct input values considering possible input conditions help catch errors like this another reason consider possible input conditions help optimize design example, design ever receives input values within certain range, possible simplify design make efficient considering possible input conditions help identify opportunities optimization",
        "a transition diagram help process helping identify important metrics helping balance design effectively according metrics",
        "the state table form specification make missing parts specification obvious showing different states system transitions states help identify parts specification missing needs added order complete specification",
        "if user presses \"go\" button (hg=01), machine dispense one half servings lychee half serving mango",
        "if ``halt'' button pressed (hg=10), counter remains halted state buttons pressed (hg=11), counter also remains halted state",
        "the fsm needs least three states order eight states three possible items purchased, item purchased one two ways (with without enough money)",
        "when turing machine given input, either finishes finite number steps, not finish finite number steps, machine said \"halted\"",
        "a counter \"counting\" process incrementing, counter \"halted\" incrementing",
        "the choice representation fsm's states affect design complexity determines many bits needed represent state bits needed represent state, design complex",
        "the right strategy choosing representation start selecting representation makes sense human, even requires bits strictly necessary make design process simpler efficient long run",
        "the choice state representation affects design complexity ways first, affect number bits needed represent states second, affect number possible states represented third, affect number transitions need considered designing state machine",
        "the right strategy start selecting representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "one reason often best start selecting representation makes sense human easier understand work with additionally, starting representation makes sense human help ensure final product also easy understand use",
        "abstraction powerful tool help simplify complex problems selecting state representation, abstraction help identify important aspects problem ignore irrelevant details make easier find solution effective efficient",
        "abstraction selecting state representation lead better design allowing engineer focus important aspects problem ignoring details important help simplify problem make easier find solution",
        "the number state bits affects design complexity determines number possible states fsm in larger number state bits means possible states design must able handle them",
        "abstraction important selecting state representation allows designer select representation makes sense human, even requires bits strictly necessary resulting implementation easier design debug implementation global behavior meaning",
        "abstraction selecting representation impact design metrics reducing number metrics need considered simplify process designing solution make easier find optimal solution",
        "hold 1 counter count state s_2=0 counter already halted press \"go\" button",
        "hold = h + s_2 when counter halt state s_2=1, hold = 1 counter stop (move halted state without changing value) h true, halted states, s_2=1, counter stops (stays halted state) h+ true",
        "the value s_2 counter count state hold=0 undefined because, passage states, overflow occurs either operands negative operands positive operands negative, resulting sum equal c however, operands positive, resulting sum less c thus, impossible determine value s_2 without knowing values operands",
        "s_2 1 counter halt state hold=1 s_2=1, counter halted, hold=1, counter retain current value",
        "the value s_1s_0 counter count state hold=1 01",
        "the hold variable used save energy chip finishes work, turn off, saving energy variable allows chip turn finished, saving energy",
        "the value hold counter counting 0 value hold counter halted 1",
        "the value hold counter halted value last input given machine",
        "the value hold determines whether counter counts determining whether counter hold current value (stop counting) ``halt'' button pressed counter already halted ``go'' button pressed",
        "the next-state logic s_1^+ s_0^+ hold=0 follows: s_1^+ = s_0 + hold s_0^+ = s_1 + hold",
        "the hold variable simplifies design allowing designer separate logic deciding whether advance counter fairly cleanly logic advancing counter itself hold bit diagram used determine whether counter advance current cycle",
        "the use s_2 separates logic deciding whether advance counter allowing counter halted state (s_2=1) counting state (s_2=0) hold=1, counter retains state, hold=0, counts",
        "f two effects operation fsm first, prevents timer reset enters new state effect lengthening duration state second, prevents fsm entering loop defined next-state logic effect halting fsm current state",
        "abstraction used build three-bit gray code counter two-bit design using copies bit-sliced adder circuit approach less efficient designing circuit specifically three-bit gray code counter, simpler",
        "the state representation used determine next state fsm done examining inputs fsm deriving equations next state states fsm act like counter, examining connections, next state determined",
        "there several benefits good state representation first, help reduce number pins needed chip second, improve density memory chip third, improve speed memory chip",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor performance cases, bad state representation also lead increased costs fabrication testing",
        "one way verify implementation correct test known set inputs compare results expected results results match, implementation likely correct another way verify implementation examine code look errors done manually help software tool",
        "a good state representation easy understand able capture relevant information problem bad state representation may difficult understand may able capture relevant information",
        "the state representation significant impact overall design system affects way system behaves interacts environment well-chosen state representation simplify design system make efficient",
        "the states fsm act like counter, value fsm set whenever state changes timer set state changes, duration state determined value timer fsm also set conditions, signal f calculated",
        "a good state representation important help reduce number logic gates needed design, thus save chip area additionally, good state representation help improve performance design reducing number logic operations needed",
        "a bad state representation lead wasted engineering effort, well products cancelled due poor power consumption cases, two metrics may strongly correlated, meaning design good one metrics frequently also good metric",
        "one way improve bad state representation make compact done using two-level logic instead three-level logic another way improve bad state representation make readable done using clear consistent naming conventions",
        "the state representation impacts fsm determining duration state timer set whenever state changes, duration state determined muxes bottom mux selects s_2=0, selects output top mux s_2=1 top mux selects b s_0=1, selects c s_0=0",
        "a bad state representation lead number problems, including wasted engineering effort, poor performance, even product cancellations",
        "a bad state representation fixed using code larger hamming distance enable system detect correct errors",
        "there best state representation fsm important factor representation complete, meaning states represented inputs accounted for considerations include size state space number inputs outputs",
        "a good state representation important help reduce number transistors needed design, thus save space energy additionally, help improve performance design making easier computer manipulate logic expressions",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context",
        "the common types memory used digital systems sram dram sram used high-speed applications processor caches embedded designs dram used applications less demanding speed requirements",
        "one build static rams using logic using tri-state buffers tri-state buffers used create larger memories using multiple chips wider memories also created using multiple chips",
        "tri-state buffers used provide logical disconnection tri-state buffer output logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "memory chips combined provide larger wider memories using multiple chips example, two 2-bit memories used implement 4-bit memory one address bits used drive decoder determines two chips active (cs=1) decoder enabled chip select signal larger memory, neither chip enabled external cs low, desired",
        "the two common types memory used digital systems static random access memory (sram) dynamic random access memory (dram) sram used high-speed applications processor caches embedded designs, dram used applications less demanding speed requirements, main memory computers",
        "one build memories using logic creating tri-state buffer logical disconnection achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out, shown truth table",
        "a tri-state buffer type digital logic device used either connect disconnect signal line power source ground achieved using two transistors, one connect signal line power source, connect signal line ground buffer enabled, transistors turned on, signal line connected either power source ground, depending value input signal buffer disabled, transistors turned off, effectively disconnecting signal line power source ground",
        "one way combine memory chips use multiple chips implement larger memory done using one address bit drive decoder determines two chips active another way combine memory chips use multiple chips implement wider memory done routing external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one builds memories (static rams) using logic connecting dual-inverter loop opposing bit lines transistors controlled select line select high, transistors connect inverter loop bit lines writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "a tri-state buffer logic circuit used disconnect output logic circuit achieved using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "one way combine memory chips use create larger memory done using one address bit drive decoder determines two chips active address bits, well external data inputs write enable signal, delivered memories external data outputs also connected memories another way combine memory chips use create wider memory case, chips either active inactive time, external address, write enable, chip select inputs routed chips however, data inputs outputs separate, chip handling different part data",
        "dynamic rams memories use charged capacitor store bit charge drains time must replaced, giving rise qualifier ``dynamic'' dram also unavailable recharging capacitors, problem applications stringent real-time needs",
        "random access memories (rams) memories support two operations: writing data element, reading data element memories also volatile, means data held memory erased electrical power turned fails static random access memory (sram) used high-speed applications processor caches embedded designs",
        "the addressability computer memory number bits stored element memory size elements memory vary single binary digit, bit, byte (8 bits) more typically, data elements larger byte referred words, size word depends context",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors, dram cell uses one transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "to write data memory element, external circuit sends signal memory indicating address element written data written sent memory, memory stores data element specified address",
        "a computer memory group storage elements logic necessary move data elements size elements memory—called addressability memory—varies single binary digit, bit, byte (8 bits) more typically, refer data elements larger byte words, size word depends context element memory assigned unique name, called address, allows external circuit identify particular element interest addresses unlike street addresses use send letter unlike street addresses, however, memory addresses usually little redundancy; possible combination bits address identifies distinct set bits memory",
        "a chip select input input chip allows chip turned off input used save energy turning chip needed",
        "a word context computer memory sequence bits represents unit data words represent numbers, characters, data types size word typically determined computer's word size, number bits computer process time",
        "non-volatile memories include magnetic optical storage media dvds, cd-roms, disks, tapes, capacitive storage media flash drives, programmable logic devices",
        "a ram type memory used store data volatile memory, means data stored memory erased power turned fails ram random access memory, means time required access element memory independent element accessed",
        "sram faster dram, dram denser (has bits per chip area) substantial part dram density due transistor count: typical sram cells use six transistors (two inverter, two connect inverters bit lines), dram cells use single transistor however, memory designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor",
        "a computer memory storage device data two main types memory: sram dram sram faster expensive, dram slower cheaper dram commonly used main memory computers",
        "data elements computer memory stored either static random access memory (sram) dynamic random access memory (dram) sram uses active logic form two-inverter loop maintain stored values, dram uses charged capacitor store bit",
        "the addressability computer memory number bits stored element memory size elements memory vary single bit byte more typically, data elements larger byte referred words, size word depends context",
        "words computer memory stored bits, either 0 1 group bits makes byte, smallest unit data stored computer memory group bytes makes word, smallest unit data read written computer memory",
        "a random access memory (ram) type memory allows data stored retrieved order ram volatile, means loses data power supply removed two types ram: static ram (sram) dynamic ram (dram)",
        "static random access memory used high-speed applications processor caches embedded designs sram bit density significantly lower dram bit density, applications less demanding speed requirements use dram",
        "an sram cell flip-flop made two cross-coupled inverters output one inverter connected input other, vice versa power applied, sram cell one two stable states, represent 0 1 state cell changed applying correct sequence voltages inputs",
        "sram cells combined bit slice sharing bit lines analog read write logic bit slice figure thought 16-address, 1-bit-addressable memory (2^4b) cells bit slice share bit lines analog read write logic, appears right figure",
        "a chip select input used enable disable chip input used save power turning chip needed",
        "the main advantage sram dram speed sram faster dram need refresh memory cells often dram denser sram, store data given area",
        "sram cells store data using dual-inverter loop writing cell, bit lines held opposite logic values, forcing inverters match values lines storing value bit input reading cell, bit lines disconnected logic, allowing inverters drive lines current outputs",
        "a read operation performed sram cell first bringing bit line intermediate voltage level, raising select line allows capacitor either pull small amount charge bit line push small amount charge onto bit line resulting change voltage detected sense amplifier",
        "a write operation sram cell performed charging charging capacitor capacitor attached bit line transistor controlled select line select low, capacitor isolated holds charge however, select high write operation, logic driving bit line forces charge onto capacitor removes charge it",
        "sram type memory used computers made number transistors store data way easy computer access sram faster types memory, also expensive",
        "sram faster dram, dram denser (has bits per chip area) typical sram cell uses six transistors (two inverter, two connect inverters bit lines), dram cell uses single transistor",
        "a sram cell organized flip-flop, one transistor one capacitor per bit capacitor stores data bit, transistor controls access bit",
        "sram cells combined bit slice sharing bit lines analog read write logic decoder sets one cell's select line high enable read write operation cell chip select input cs drives enable input decoder, none memory cells active chip select low (cs=0), exactly one memory cells active chip select high (cs=1)",
        "a write operation sram cell performed bringing bit line intermediate voltage level, raising select line, allows capacitor either pull small amount charge bit line push small amount charge onto bit line resulting change voltage detected sense amplifier end bit line",
        "the main benefit using tri-state buffer allows logical disconnection buffer output means multiple memories share output line without need additional multiplexers",
        "a tri-state buffer achieves logical disconnection using outer pair transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "the decoder memory chip responsible translating memory address correct location memory chip necessary ensure correct data read written correct location memory chip",
        "multiple chips used construct wider memories connecting address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used reduce number pins needed chips combining inputs outputs allowed chip designers halve number pins needed",
        "a tri-state buffer type digital logic circuit used either connect disconnect signal line power supply ground done using two transistors, one connect signal line power supply, connect signal line ground buffer enabled, transistors turned on, signal line connected either power supply ground, depending value input signal buffer disabled, transistors turned off, signal line effectively disconnected power supply ground",
        "a tri-state buffer digital circuit used either connect disconnect output signal line buffer three states: high, low, high impedance buffer high state, output connected signal line copies signal input buffer low state, output disconnected signal line buffer high impedance state, output effectively disconnected signal line",
        "the benefit using tri-state buffer allows logical disconnection tri-state buffer output means output shared one memory without need additional multiplexers useful creating larger memories combining multiple chips",
        "tri-state buffers used construct larger memories using multiple chips connecting external address, write enable, chip select inputs chips data inputs outputs separate, left chip handling high n bits input writes producing high n bits output reads, right chip handles low n bits input produces low n bits output",
        "tri-state buffers used construct wider memories connecting data inputs outputs multiple memories together allows output line shared one memory without need additional multiplexers",
        "a tri-state buffer digital circuit used either connect disconnect signal circuit buffer three states: high, low, high impedance high impedance state effectively disconnects signal circuit allows multiple memories share output line without need additional multiplexers",
        "a tri-state buffer used create electrical connection tri-state buffer output logical disconnection achieved using outer transistors logic diagram en=0, transistors turn off, meaning regardless value in, out connected neither high voltage ground en=1, transistors turn on, tri-state buffer acts pair back-to-back inverters, copying signal in out",
        "tri-state buffers used reduce number pins needed chip combining inputs outputs example, data inputs outputs memory combined single set data wires, bidirectional signals reduces number pins needed still allowing amount data transferred",
        "one way construct wider memory use multiple chips connect data inputs outputs chip separately way, left chip handles high n bits input writes produces high n bits output reads, right chip handles low n bits input produces low n bits output",
        "one way construct larger memory use multiple chips one address bits drive decoder determines two chips active decoder enabled chip select signal larger memory way, neither chip enabled external cs low",
        "the main difference sram dram sram faster uses transistors, dram slower uses fewer transistors dram also denser sram, meaning bits stored given area",
        "a dram cell stores bit using charged capacitor charge capacitor drains time must replaced order maintain stored value",
        "a sense amplifier circuit used read data stored memory cell sense amplifier amplifies small signal memory cell converts digital signal read processor",
        "a row natural basis refresh cycle dram data pins provide bidirectional signals reading writing elements dram output enable input, oe, controls tri-state buffers dram determine whether dram drives data pins we input, controls type operation, also present",
        "sdram type dram used main memory computers ddr4 sdram newer type dram faster sdram",
        "dram used storing data capacitor capacitor attached bit line transistor controlled select line select line low, capacitor isolated holds charge however, transistor's resistance finite, charge leaks onto bit line",
        "dram type memory uses capacitors store data row dram selected, cells row read written back, refreshes data cells dram said destructive reads read operation brings voltage capacitor closer intermediate voltage level, effectively destroys data cell",
        "the benefits using dram denser sram uses fewer transistors makes dram ideal applications size important speed",
        "there several disadvantages using dram first, dram slower sram second, dram less dense sram, requires chip area store amount data finally, dram cells complex sram cells, difficult design manufacture",
        "dram type memory slower sram denser (has bits per chip area) dram cells use single transistor, sram cells use six transistors dram designers also made significant advances miniaturizing dram cells improve density beyond benefit available simple transistor count",
        "dram type capacitive storage, bit stored charging charging capacitor capacitor attached bit line transistor controlled select line select line high, capacitor isolated holds charge however, transistor's resistance finite, charge leaks onto bit line charge also leaks substrate transistor constructed",
        "a dram cell refreshed reading contents writing back active logic process necessary avoid data loss due charge leakage capacitor",
        "a sense amplifier device used amplify signal sensor typically used amplify signal small sensor, pressure sensor, level read larger device, computer",
        "the ras signal indicates row component address available raising ras signal row destructively reads contents cells row, forcing cells rewritten effecting refresh row thus natural basis refresh cycle",
        "the column address strobe (cas) input used indicate address components available used control type operation (read write)",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, problem solved",
        "the lab simulates two-level logic used map expression cmos gates also shows graphically manipulate expressions understand gate diagrams",
        "the fsm stoplight controller ensures lights one roads red times controller also alternates green lights two roads",
        "the vending machine application fsm designed team engineers fsm designed control simple vending machine accepts us coins payment offers choice three items sale machine adjustable item prices, fsm needs keep track much money inserted order decide whether user purchase one items",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "the fsm lab coin-counting fsm requires use moore machine model avoid sending servo controlling coin's path output pulse short enforce fsm's decision way send coin adding states fsm, servo held place, desired",
        "the vending machine application fsm designed connecting buttons b_1, b_2, b_3 priority encoder (and feeding 0 fourth input), produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab",
        "juan jos'e jaramillo identified common failure modes, including variability caused sunshine windows eceb, made changes improve robustness also created powerpoint slides typically used describe lab lecture",
        "in mid-1980's, vax architecture dominated workstation minicomputer markets, included universities digital equipment corporation, creator vax, second ibm terms computer sales vaxen, machines called, used microprogrammed control units supported numerous addressing modes well complex instructions ranging ``square root'' ``find roots polynomial equation'' impact increasingly dense integrated circuit technology begun effect, however, view increasing processor clock speeds, programmers using high-level languages rather writing assembly code although assembly programmers often made use complex vax instructions, compilers usually unable recognize corresponding high-level language constructs thus unable make use instructions the vax architecture developed digital equipment corporation mid-1980's architecture dominated workstation minicomputer markets time second ibm terms computer sales vax architecture used microprogrammed control units supported numerous addressing modes well complex instructions",
        "prof doug jones designed vending machine application fsm first identifying different states machine could in created state diagram showed machine would transition one state another finally, implemented fsm hardware using altera quartus software",
        "prof chris schmitz prototyped constructed physical elements help ece shop designed vending machine application fsm, prof doug jones created wiki documentation altera quartus portions lab casey smith, head guru ece instructional labs, developed new debounce design made changes improve robustness",
        "prof volodymyr kindratenko together prof geoffrey herman created wiki documentation altera quartus portions lab based lab earlier mentor graphics work prof herman prof kindratenko also helped scale design way made possible deliver 400 students entering ece every semester",
        "prof kindratenko helped scale design way made possible deliver 400 students entering ece every semester creating wiki documentation altera quartus portions lab also helped improve robustness lab identifying common failure modes making changes design",
        "jaramillo later identified common failure modes, including variability caused sunshine windows eceb, made changes improve robustness also created powerpoint slides typically used describe lab lecture",
        "a signal used set timer f 0, timer set state changes",
        "this synchronous fsm implemented digital logic fsm finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs",
        "the first optical sensor used detect presence chip chip present, sensor turns chip used chip present, sensor turns chip cannot used sensor used save energy turning chip needed",
        "the second optical sensor used detect chip finishes work chip turn save energy metric used guide process optimizing logic expressions balance struck different metrics involved",
        "if rise fall rising clock edge, processor would able recognize interrupts instructions would cause program terminate unexpectedly",
        "the device used turn save energy done using heuristic approaches find solutions strike balance different metrics, cost, power, performance human engineer impose constraints, limits chip area limits minimum performance, order guide process",
        "to use device, user presses one buttons user presses one button, device produces lychee ice cream user presses blend button, device produces blend user presses mango button, device produces mango ice cream",
        "the signal indicates interrupt occurred interrupt could generated external device, disk drive keyboard, error program executed, undefined instruction attempt divide zero",
        "the significance rising edge signal second sensor indicates presence object field view sensor rising edge signal indicates sensor detected change intensity light receiving",
        "there two optical sensors positioned different heights device first sensor positioned high enough slope dime passes beneath sensor, allowing signal produced sensor tell us whether coin dime quarter second sensor positioned coins pass front it signal second sensor used clock fsm",
        "the device uses two optical sensors differentiate dime quarter first sensor positioned dime passes beneath it, second sensor positioned coins pass front it rising edge clock signal second sensor occurs, signal first sensor indicates whether coin dime quarter",
        "the device uses sensors generate clock signal alternating 0 1 regular period clock 0, one set latches holds bit values fixed, combinational logic uses latches inputs produce bits copied second set latches clock 1, second set latches stops storing data inputs retains bit values order drive combinational logic, results copied third set latches",
        "the fsm uses signal determine whether accept reject coin checking rising edge signal second sensor rising edge occurs, signal first sensor indicates whether coin quarter (t=1) dime (t=0) sample timing diagram lab appears right clock signal generated lab square wave---in words, high low portions equal---but also unlikely periodic instead, ``cycle'' defined time coin insertions",
        "the possible inputs fsm dime (t=0) quarter (t=1) machine reject input user tries purchase item without inserting enough money first, fsm also reject request",
        "the possible outputs fsm a=1 p=1 f signal used set timer, either 0 1 f=0, timer set state changes f=1, timer set state changes light one roads green",
        "the start state initial state fsm state, money deposited yet fsm needs keep track much money inserted order decide whether user purchase one items information alone enough simplest machine, let's create machine adjustable item prices",
        "the dime quarter states used represent user inserted one coin purpose states output a=1 p=0, indicating user yet paid full price another coin needed",
        "the rejectd rejectq states used handle user mistakes user enters second dime dime state, fsm reject coin rejectd state rejects dime (a=0) continues wait quarter (p=0) rejectq state used handle user inserts one quarter",
        "the start state first state fsm sequence used initialize fsm",
        "the dime state state machine waiting dime inserted first state machine accepts coin machine outputs a=1 p=0 state, indicating user yet paid full price 35 cents",
        "the 'quarter' state refers fact addition unit 4-bit examples closed addition means value n, easily find two 4-bit unsigned numbers that, added together, cannot represented 4-bit unsigned number n=4, example, add 12 (1100) 6 (0110) obtain 18 since 18 outside range [0,2^4-1] representable using 4-bit unsigned representation, representation breaks try represent sum using representation",
        "the paid state state user paid full price 35 cents next states paid dime dime inserted quarter quarter inserted",
        "the 'rejectd' state state processor interrupts program due error unexpected behavior state usually causes program terminate",
        "the user purchases item inserting either dime followed quarter, quarter followed dime user inserts second dime, machine reject coin user inserts second quarter, machine accept coin user paid full price 35 cents",
        "the state representation lab fsm 3-bit binary number, following meaning: s_2: type last coin inserted (0 dime, 1 quarter) s_1: one quarter inserted (1 yes, 0 no) s_0: one dime inserted (1 yes, 0 no)",
        "based passage, least 33 bits internal state needed fsm needs track number cycles needed serial comparator execute comparison, least 32 cycles additionally, fsm needs track whether loop done, requires least one additional bit",
        "each bit pattern represents column addition problem carry bit (c_) added b bits produce sum bit (s_) carry bit (c_)",
        "the meaning assigned bit patterns makes easier understand behavior fsm example, paid state, last coin inserted may either type, type all, since decided start fsm state well however, four states, meanings provide clear understanding state fsm",
        "our machine accept pennies, let's fsm keep track much money inserted multiple 5 cents (one nickel) table right shows five types coins, value dollars, value terms nickels expensive item machine might cost dollar two, fsm must track least 20 40 nickels value let's decide use six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "the state table represents six states loop defined next-state logic, two remaining states converging loop single cycle lights red states, necessary safety",
        "there 63 possible states paid state machine track 315 dollars worth nickels, 63 nickels",
        "prof jones assigns bit patterns way makes easy humans understand meaning states example, paid state, last coin inserted may either type, type all, since fsm starts state however, four states, meanings clear easy apply",
        "this particular example tricky requires reader understand concept bit-sliced addition order understand passage furthermore, passage provide clear explanation bit-sliced adder circuit works, making difficult reader follow along",
        "the s_2 value specifies number inputs must satisfied order output 1 cuts number possible choices four two case two possible combinations inputs satisfy condition",
        "one reason try leverage fact next-state patterns two states relevant may simplify design system next-state patterns needed, system designed without them, may make design process simpler faster additionally, eliminating next-state patterns may also reduce cost system",
        "the final state table state transition diagram appear follows: the final state table lists six states loop defined next-state logic, two remaining states converging loop single cycle table also includes states outside desired loop lights red states, necessary safety the state transition diagram shows six states loop defined next-state logic, two remaining states converging loop single cycle diagram also shows duration state",
        "the purpose fsm control stoplights busy intersection fsm ensures lights always red one roads, yellow light shown green light, green lights alternated two roads",
        "the input sequence 111010010001 significant determines duration state fsm",
        "the input sequence 001 causes stoplight turn red roads necessary safety",
        "the design easy test two-level logic design means inputs outputs easily tested nand nor gate additionally, design easy test sop expression means inputs outputs easily tested or gate",
        "scan-based testing method testing input scanned converted appropriate result programmer responsible ensuring number conversions format string matches number arguments provided programmer must also ensure type information produced conversion stored address passed conversion",
        "the input sequence used initialize fsm sequence 0s 1s input fsm order set state fsm desired state",
        "the input sequence used test fsm sequence 0s 1s applied inputs fsm input sequence used determine output fsm",
        "the outputs needed observe state check output logic values state register timer outputs used determine duration state order states occur",
        "it difficult test sequential logic difficult predict behavior system sequential logic difficult test difficult determine whether system halt finite number steps not",
        "scan-based testing type testing input scanned errors processed type testing often used test software errors",
        "the fsm needs initialized external logic filling memory (the array integer values), executing fsm ``code,'' checking answer support use model, create fsm state called { wait} cycles fsm work do later, also make use external input signal { start} start fsm execution",
        "the input sequence initialization is: 1) value r0 10, 2) value r1 20, 3) value r2 30",
        "the input sequence testing follows: first, user prompted input two integers decimal form, converted 2's complement stored variables 'a' 'b' next, user prompted input ascii character, value hexadecimal, double-precision floating-point number, stored variables 'c', 'u', 'd', respectively finally, user prompted input two real numbers decimal form, converted single- double-precision floating-point numbers stored variables 'f' 'd', respectively",
        "an fsm finite state machine, model computation used design computer programs hardware fsm defined set states, set inputs, set outputs, set transitions states",
        "an encoder device converts signal message code code usually binary code, sequence 0s 1s code used represent signal message form read machine, computer",
        "a decoder logic circuit converts binary code corresponding decimal code decoders used variety applications, including data storage transmission, error detection correction, address decoding",
        "one way design fsm start flow chart program implemented flow chart used identify high-level states implemented fixed number clock cycles another way design fsm start list components needed implement program list used identify high-level states implemented using components",
        "a digital fsm model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called { transition rule} fsm comprises five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs",
        "an encoder helps implement fsm design translating user's input signal used fsm encoder produces signal p indicating user trying make purchase, two-bit signal indicating item user wants decoder takes signal produces individual item release signals r_1, r_2, r_3",
        "a decoder used fsm design generate release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "a digital fsm finite state machine implemented digital system means states must represented patterns using fixed number bits, inputs must translated bits, outputs must translated bits addition, transition rules must complete, meaning given state fsm pattern input bits, transition must defined another state",
        "the game revolves around old logic problem farmer must cross river order reach market farmer traveling market sell fox, goose, corn farmer boat, boat large enough carry fox, goose, corn time fox cannot left alone goose, fox eat goose goose cannot left alone corn, goose eat corn farmer get three items market",
        "a digital fsm used control stoplights intersection two roads fsm two inputs, f, two outputs, l1 l0 output fsm used control stoplights fsm designed stoplights red one roads times road green light, controller show yellow light showing red light give drivers warning allow slow down finally, fairness, controller alternate green lights two roads",
        "the fsm designed handle purchases, current number nickels stored register cycle, register fed adder, subtracts price purchase requested cycle priority encoder's signal used select value one three registers second input adder adder calculates carry signal c_, used indicate successful purchase signal r used select next value n using mux, also used enable decoder generates three individual item release outputs",
        "one could design game controller logic puzzle would buttons corresponding different operations could performed logic puzzle example, could button add new element puzzle, button remove element puzzle, button change value element puzzle game controller could also display would show current state puzzle player's progress",
        "the stoplight controller must ensure lights one roads red times similarly, road green light, controller show yellow light showing red light give drivers warning allow slow down finally, fairness, controller alternate green lights two roads",
        "what ideas used reduce number metrics some ideas used reduce number metrics include: identifying metrics practical impact current technology, setting threshold values metrics simplify reasoning them, eliminating redundant metrics, calculating linear sums reduce count metrics, making use notion pareto optimality",
        "the purpose fsm control stoplight stoplight must red one roads times, controller show yellow light showing red light give drivers warning allow slow down controller also alternate green lights two roads",
        "the inputs fsm states two roads, outputs colors lights two roads fsm ensures lights one roads red times, lights road green fsm also alternates green lights two roads",
        "the fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "why two-level logic popular two-level logic popular simple map expressions cmos gates additionally, easy understand gate diagrams",
        "the state fsm split two pieces: 3-bit register 6-bit timer timer simply binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "1 three ranges possible measurement values given metric the three ranges possible measurement values given metric values equivalently useful, ordered interesting respect one another, impossible use practice",
        "interrupts priority exceptions interrupts generated external devices, exceptions generated processor itself interrupts also asynchronous, exceptions not",
        "the vending machine fsm designed control release items vending machine based user's purchase request fsm uses priority encoder determine item user requested, decoder generate individual item release signals",
        "the fsm five parts: finite set states, set possible inputs, set possible outputs, set transition rules, methods calculating outputs class, focus clocked synchronous fsm implementations, fsm's internal state bits stored flip-flops",
        "the coin accept bit item release bits used indicate whether coin accepted whether item released, respectively",
        "the transitions states well-defined fsm timer counts produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the numeric representation money held used track value money inserted machine allows machine keep track much money inserted reject coins value high",
        "the fsm responsible controlling stoplights busy intersection ensures lights always red one roads, green light always followed yellow light, green lights alternated two roads",
        "the fsm needs keep track loop index, current minimum value, progress serial comparator",
        "the fsm needs track state stoplight duration state",
        "the fsm responsible controlling stoplights busy intersection ensures lights one roads red times, road green light, controller show yellow light showing red light",
        "the output fsm 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "a priority encoder type encoder generates signal whenever input lines active, encodes index highest active input two-bit unsigned number priority encoder used determine input lines highest priority",
        "what three ranges given metric the first range measurement values equivalently useful second range possible values ordered interesting respect one another values third range impossible use practice",
        "a decoder type logic circuit takes input signal produces one output possible value signal decoder similar multiplexer number inputs outputs however, decoder one input signal, multiplexer multiple input signals",
        "what difference sop pos sop (sum products) boolean algebra expression or anded terms, pos (product sums) expression and ored terms",
        "the main difference mux decoder mux multiple inputs one output, decoder one input multiple outputs mux used select one several input signals send output, decoder used interpret input signal produce several output signals",
        "a decoder logic circuit converts binary code set signals used operate device decoder takes input signal, typically one coded binary number, produces one output possible value signal decoder enabled (en=1), and gates produces one minterm input signal s decoder enabled (en=0), decoder produces 0 bits",
        "how multi-metric optimization useful engineering multi-metric optimization useful engineering allows engineers identify important metrics balance design effectively according them multi-metric optimization also allows engineers get rid many metrics possible focus important ones",
        "a decoder device converts coded signals usable information decoders used variety applications, error detection correction",
        "a decoder logic circuit converts coded inputs coded outputs, usually one output code input code decoders used variety applications, including data storage transmission, error detection correction, data compression",
        "a decoder similar mux allows one digital signal select several others forwarded output decoder one input multiple outputs, mux multiple inputs one output decoder thought special case mux",
        "a decoder logic device converts binary information form one code another, usually natural binary code multiplexer device selects one several analog digital input signals forwards selected input single output line",
        "a priority encoder type encoder assigns priority certain input signals used determine input signal given priority multiple input signals present",
        "a priority encoder type encoder assigns priority certain input signals priority encoder takes signal produces output signal indicates input signal highest priority output signal typically binary number used select one input signals",
        "a decoder logic circuit converts signals one form another binary form, decoder used convert binary number decimal number",
        "a priority encoder circuit takes number input signals, outputs code represents highest priority input signal output code usually binary number",
        "a mux logic block allows us use one digital signal select several others forwarded output decoder logic block converts binary code set signals",
        "the decoder generates release signals vending machine connecting signal produced priority encoder decoder's input connecting item release signal r decoder's en input outputs d_1, d_2, d_3 correspond individual item release signals r_1, r_2, r_3 vending machine",
        "the value register price1 price first item machine, determined owner machine",
        "the value register price2 number nickels machine multiplied price item question way, machine keep track much money inserted much owed item",
        "the value register price3 price third item machine, determined owner machine",
        "the value register n corresponds number nickels inserted machine user inserts quarter, machine transition state n+5, indicating 5 nickels inserted user attempts purchase item without inserting enough money first, machine remain state reject request",
        "the value register equivalence class sum two 4-bit numbers case, sum 18, equivalent 2 (mod 16)",
        "the register price1 six bits allows machine keep track 315 (63 nickels)",
        "the value register price2 number nickels inserted machine",
        "what difference sop pos sop form two-level logic, pos form multi-level logic sop popular simpler manipulate expressions algebraically graphically",
        "the value v 10 cents dime inserted dime worth 10 cents, machine tracks value money inserted terms nickels therefore, dime inserted, machine records 2 nickels",
        "the vending machine knows much item costs owner machine sets prices dynamically machine keeps track much money inserted multiple 5 cents (one nickel) expensive item machine might cost dollar two, fsm must track least 20 40 nickels value",
        "the vending machine keeps track much money inserted multiple 5 cents (one nickel) six bits record number nickels, allows machine keep track 315 (63 nickels)",
        "the vending machine uses sensors detect coin inserted first sensor positioned dime pass beneath it, second sensor positioned coins pass front it signal second sensor used clock fsm, signal first sensor indicates whether coin dime quarter",
        "the vending machine releases item using decoder generate three individual item release outputs correct output generated based decoded signal priority encoder, three output bits latched registers release purchased item next cycle",
        "the vending machine knows purchase requested user pushes one item selection buttons causes priority encoder produce signal p indicating user trying make purchase",
        "the input fsm reset button r, four buttons b_f, b_x, b_g, b_c fsm produces signal p indicating user trying make purchase two-bit signal indicating item user wants signal r also used enable decoder generates three individual item release outputs",
        "the output fsm position farmer, fox, goose, corn output either left bank right bank river game also two indicators: w reaching winning state, l reaching losing state",
        "the state represented fxgc, f position farmer, x position fox, g position goose, c position corn game five buttons: reset, cross alone, cross fox, cross goose, cross corn game stops player wins loses",
        "the next state fxgc=0101 farmer bank fox, corn, b_x b_c buttons ignored, leading next-state table right notice b_g accepted even b_c pressed farmer bank corn",
        "the player wins game getting four entities (farmer, fox, goose, corn) right bank river player makes mistake, game lose",
        "the player loses game able correctly answer question player gets question wrong, start game beginning",
        "the input fsm 3-bit register 6-bit timer timer used count produce output z=1 reaches 0 register used store state fsm",
        "the output fsm sequence red, yellow, green lights alternate two roads duration state determined signal f f 0, timer set state changes f 1, timer set state changes light one roads green",
        "the priority encoder used determine item user wants purchase, generate signal indicating user trying make purchase output priority encoder used select value one price registers, subtracted current number nickels stored register purchase successful, price subtracted number nickels item released",
        "the player loses game able get correct answer question player gets correct answer, win game",
        "when player loses, output fsm looks like red roads controller must ensure lights one roads red times",
        "the fsm handles multiple input events single clock cycle first storing input events queue fsm ready process input event, dequeues event queue processes it",
        "the outputs fsm states stoplights stoplights either red, green, yellow fsm controls duration light",
        "the purpose fsm control stoplights busy intersection fsm ensures lights one roads red times, road green light, controller show yellow light showing red light",
        "the signal f 1 timer reaches 0 state changes",
        "the state fsm split two pieces: {3-bit} register {6-bit} timer timer simply binary counter counts downward produces output z=1 reaches 0 notice register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle we thus think transitions fsm cycle cycle basis consisting two types first type simply counts downward number cycles holding register constant, second changes value sets timer order maintain new value number cycles",
        "the fsm ensures lights one roads red times keeping track state light light green, turn yellow red light red, stay red",
        "the fsm shows yellow light showing red light setting timer specific value state fsm changes value set signal f, calculated bottom fsm logic diagram",
        "the fsm alternates green lights two roads setting timer different value state fsm changes causes lights change color cycle-by-cycle basis, green light alternating two roads",
        "the signal f used set timer certain conditions particular, used set timer state changes",
        "the fsm initialized state \"000\" order ensure lights one roads red times timer set \"a\" order maintain new value number cycles",
        "the stoplight controller 3-bit register 6-bit timer timer binary counter counts downward produces output z=1 reaches 0 register takes new value timer reaches 0, z signal timer also forces new value loaded timer next cycle",
        "the stoplight controller ensures lights one roads red times using state machine six states states determined inputs fsm, states two roads output fsm controls lights two roads controller alternates green red lights two roads",
        "the stoplight controller shows yellow light showing red light order give drivers warning allow slow down",
        "the stoplight controller alternates green lights two roads changing value register s value changed timer reaches 0, timer set enters new state duration state determined value register s",
        "the signal f allows timer set conditions, addition state changes allows flexibility duration state",
        "starting human-based design process typically results design efficient effective one mapped high-level programming language human designers easily optimize design specific metrics, power consumption performance additionally, human designers easily impose constraints design, limits chip area minimum performance, order guide design process",
        "mapping bits gates means design circuit performs operation single bit passes necessary information another copy itself using copies bit-sliced adder circuit, mimic approach humans build adders size",
        "the control structure code maps high-level fsm design breaking program simple steps mapping step state fsm number states fsm depend number steps program",
        "the general model computer system execute set instructions, called program, store resulting data system set registers hold data instructions, set memory locations store data programs system also set input output devices allow interact outside world",
        "the purpose notes introduce important abstraction logic design, use abstraction design ripple-carry adder ripple-carry adder adder adds single bit passes necessary information another copy itself design less efficient designs optimized specific purpose, simplicity approach makes tradeoff interesting one",
        "a piece code transformed fsm first mapping desired task high-level programming language, using components registers, counters, memories implement variables needed approach, control structure code maps high-level fsm design",
        "a finite state machine model understanding behavior system describing system occupying one finite set states, moving states response external inputs, producing external outputs given state, particular input may cause fsm move another state; combination called transition rule",
        "a computer machine programmed carry set arithmetic logical operations automatically fsm model behavior composed finite set states, transitions states, actions",
        "one way transform code written high-level language fsm use compiler compiler program translates code written high-level language code run computer another way transform code written high-level language fsm use interpreter interpreter program executes code written high-level language",
        "the control structure code maps high-level fsm design breaking program simple steps, one step flow chart may sometimes require one state fsm similarly, one fsm state may able implement several steps flow chart, steps performed simultaneously",
        "one design fsm executes simple pieces flow chart breaking program smaller steps mapping step state fsm one also use registers counters implement variables program, use comparator implement test statement",
        "the general model computer turing machine mathematical model computer used simulate computer",
        "one way build fsm allows pieces executed specified fsm built use state machine output routed different inputs allows fsm configured execute different pieces code based input another way build fsm allows pieces executed specified fsm built use state machine multiple states executed parallel allows fsm configured execute different pieces code parallel based input",
        "the problem code trying solve halting problem halting problem problem cannot solved turing machine problem given turing machine input turing machine, possible determine whether machine finish computing finite number steps",
        "what difference sop pos sop pos two forms two-level logic sop, output true inputs true pos, output true inputs true",
        "the array notation code means code trying convert input user appropriate result, store result memory address given next argument",
        "the idx variable used keep track number operations logic expression metric used estimate number transistors needed design, turn estimate area required design",
        "the flow chart represents steps taken designing new product first step think carefully metrics possible interest second step get rid many metrics possible third step identify metrics practical impact current technology fourth step set threshold values metrics simplify reasoning them fifth step eliminate redundant metrics sixth step calculate linear sums reduce count metrics seventh step make use notion pareto optimality",
        "there three variables used code, x, y, z value x initialized 42, value initialized x value z initialized"
    ]
}