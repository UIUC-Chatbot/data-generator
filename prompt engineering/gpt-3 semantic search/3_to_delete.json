[
  {
    "textbook-paragraph": "produce it gives  F=S_1S_0{V^+{S_1}S_0{V^.  If we  ignore the two states outside of the main loop for S, the first term  is 1 only when the lights are green on the East and West roads and the  detector for the North and South roads indicates that no vehicles are  approaching.  Similarly, the second term is 1 only when the lights are  green on the North and South roads and the detector for the East and  West roads indicates that no vehicles are approaching.  What happens when F=1?  First, the OR gate feeding into the timer's LD input produces a 1, meaning that the timer loads a new value instead of counting down.  Second, the OR gate controlling the lower mux selects the A input.  In other words, the timer is reset to A cycles, corresponding to the initial value for the green light states. In other words, the light stays green until vehicles approach on  the other road, plus A more cycles.  Unfortunately, the signal F may also be 1 in the unused states of S, in which case the lights on both roads may remain red even though cars are waiting on one of the roads.  To avoid this behavior, we must be  sure to initialize the state S to one of the six states in the desired loop.    {From FSM to Computer}  The FSM designs we have explored so far have started with a human-based design process in which someone writes down the desired behavior in terms of states, inputs, outputs, and transitions.  Such an approach makes it easier to build a digital FSM, since the abstraction used corresponds almost directly to the implementation.  As an alternative, one can start by mapping the desired task into a high-level programming language, then using components such as registers, counters, and memories to implement the variables needed.  In this approach, the control structure of the code maps into a high-level FSM design. Of course, in order to implement our FSM with digital logic, we eventually still need to map down to bits and gates.  In this set of notes, we show how one can transform a piece of code written in a high-level language into an FSM.  This process is meant to help you understand how we can design an FSM that executes simple pieces of a flow chart such as assignments, { if} statements, and  loops.  Later, we generalize this concept and build an FSM that allows the pieces to be executed to be specified after the FSM is built---in  other words, the FSM executes a program specified by bits stored in  memory.  This more general model, as you might have already guessed,  is a computer.    {Specifying the Problem}  Let's begin by specifying the problem that we want to solve. Say that we want to find the minimum value in a set of 10 integers. Using the C programming language, we can write the following fragment of  code:   {  aaaa=aaaa= int >values[10];    /* 10 integers--filled in by other code */ int >idx; int >min  min = values[0]; for (idx = 1; 10 > idx; idx = idx + 1) { >  if (min > values[idx]) { >  >  min = values[idx]; >  } } /* The minimum value from array is now in min. */  }   The code uses array notation, which we have not used previously in our  class, so let's first discuss the meaning of the code.  The code uses three variables.  The variable { values} represents the 10 values in our set. The suffix ``[10]'' after the variable name tells the compiler that we want an array of 10 integers ({ int}) indexed from 0 to 9. These integers can be treated as 10 separate variables, but can be accessed using the single name ``{ values}'' along with an index (again, from 0 to 9 in this case).  The variable { idx} holds a loop index that we use to examine each of the values one by one in order to find the minimum value in the set.  Finally, the variable { min} holds the smallest known value as  the program examines each of the values in the set.  The program body consists of two statements.    We assume that some other piece of code---one not shown here---has  initialized the 10 values in our set before the code above executes.  The first",
    "GPT-3-Semantic-Search-Generations": {
      "question": " How is FSM initialization solved?\\n",
      "answer": "\nThe FSM is initialized to one of the six states in the desired loop. This ensures that the lights on both roads are not red when cars are waiting on one of the roads."
    }
  }
]